
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08004778  08004778  00005778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004af0  08004af0  000061cc  2**0
                  CONTENTS
  4 .ARM          00000008  08004af0  08004af0  00005af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af8  08004af8  000061cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af8  08004af8  00005af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004afc  08004afc  00005afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08004b00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001cc  08004ccc  000061cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004ccc  0000633c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003c13  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010e1  00000000  00000000  00009e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000550  00000000  00000000  0000aef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003cd  00000000  00000000  0000b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ccf  00000000  00000000  0000b80d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004c8d  00000000  00000000  0000e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073a7f  00000000  00000000  00013169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00086be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002454  00000000  00000000  00086c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00089080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004760 	.word	0x08004760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	08004760 	.word	0x08004760

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	@ 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	fab3 f383 	clz	r3, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2103      	movs	r1, #3
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3724      	adds	r7, #36	@ 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	fb01 f303 	mul.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	605a      	str	r2, [r3, #4]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b089      	sub	sp, #36	@ 0x24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2103      	movs	r1, #3
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	401a      	ands	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c80:	bf00      	nop
 8000c82:	3724      	adds	r7, #36	@ 0x24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	@ 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa93 f3a3 	rbit	r3, r3
 8000ca6:	613b      	str	r3, [r7, #16]
  return(result);
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	fab3 f383 	clz	r3, r3
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	60da      	str	r2, [r3, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	3724      	adds	r7, #36	@ 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b089      	sub	sp, #36	@ 0x24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6a1a      	ldr	r2, [r3, #32]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa93 f3a3 	rbit	r3, r3
 8000d00:	613b      	str	r3, [r7, #16]
  return(result);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	fab3 f383 	clz	r3, r3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	401a      	ands	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000d34:	bf00      	nop
 8000d36:	3724      	adds	r7, #36	@ 0x24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	@ 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	210f      	movs	r1, #15
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d92:	bf00      	nop
 8000d94:	3724      	adds	r7, #36	@ 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b088      	sub	sp, #32
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa93 f3a3 	rbit	r3, r3
 8000dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000dc6:	e048      	b.n	8000e5a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d03a      	beq.n	8000e54 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	461a      	mov	r2, r3
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fede 	bl	8000ba8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d003      	beq.n	8000dfc <LL_GPIO_Init+0x5e>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d106      	bne.n	8000e0a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	461a      	mov	r2, r3
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff14 	bl	8000c32 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	69b9      	ldr	r1, [r7, #24]
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff3a 	bl	8000c8c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d119      	bne.n	8000e54 <LL_GPIO_Init+0xb6>
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d807      	bhi.n	8000e46 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff51 	bl	8000ce6 <LL_GPIO_SetAFPin_0_7>
 8000e44:	e006      	b.n	8000e54 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	69b9      	ldr	r1, [r7, #24]
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff76 	bl	8000d40 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	3301      	adds	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa22 f303 	lsr.w	r3, r2, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1af      	bne.n	8000dc8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d003      	beq.n	8000e78 <LL_GPIO_Init+0xda>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d107      	bne.n	8000e88 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	461a      	mov	r2, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff febd 	bl	8000c02 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f043 0201 	orr.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 0201 	bic.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	0219      	lsls	r1, r3, #8
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	430b      	orrs	r3, r1
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	601a      	str	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f14:	f023 0307 	bic.w	r3, r3, #7
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	609a      	str	r2, [r3, #8]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	609a      	str	r2, [r3, #8]
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	609a      	str	r2, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	683a      	ldr	r2, [r7, #0]
 8000f7e:	611a      	str	r2, [r3, #16]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	605a      	str	r2, [r3, #4]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff65 	bl	8000eb2 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	6899      	ldr	r1, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff6d 	bl	8000ed2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffb6 	bl	8000f70 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff44 	bl	8000e92 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa0 	bl	8000f50 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	6919      	ldr	r1, [r3, #16]
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	461a      	mov	r2, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff70 	bl	8000f00 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff81 	bl	8000f30 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffa9 	bl	8000f8c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4619      	mov	r1, r3
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ffb6 	bl	8000fb2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001062:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <LL_InitTick+0x30>)
 8001064:	3b01      	subs	r3, #1
 8001066:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <LL_InitTick+0x30>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <LL_InitTick+0x30>)
 8001070:	2205      	movs	r2, #5
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e010 	.word	0xe000e010

08001084 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800108c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffdd 	bl	8001050 <LL_InitTick>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <LL_mDelay+0x48>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80010ae:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b6:	d00c      	beq.n	80010d2 <LL_mDelay+0x32>
  {
    Delay++;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3301      	adds	r3, #1
 80010bc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80010be:	e008      	b.n	80010d2 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80010c0:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <LL_mDelay+0x48>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <LL_mDelay+0x32>
    {
      Delay--;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	607b      	str	r3, [r7, #4]
  while (Delay)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1f3      	bne.n	80010c0 <LL_mDelay+0x20>
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <LL_SetSystemCoreClock+0x1c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000

0800110c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	4907      	ldr	r1, [pc, #28]	@ (8001138 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001120:	4b05      	ldr	r3, [pc, #20]	@ (8001138 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001122:	695a      	ldr	r2, [r3, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4013      	ands	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000

0800113c <LL_GPIO_SetPinMode>:
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	613b      	str	r3, [r7, #16]
  return(result);
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	fab3 f383 	clz	r3, r3
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2103      	movs	r1, #3
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	401a      	ands	r2, r3
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	61bb      	str	r3, [r7, #24]
  return(result);
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	431a      	orrs	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]
}
 800118a:	bf00      	nop
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80011b8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80011bc:	f7ff ffa6 	bl	800110c <LL_AHB1_GRP1_EnableClock>

  /* LED pin configuration */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_3, LL_GPIO_MODE_OUTPUT);
 80011c0:	2201      	movs	r2, #1
 80011c2:	2108      	movs	r1, #8
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_GPIO_Init+0x24>)
 80011c6:	f7ff ffb9 	bl	800113c <LL_GPIO_SetPinMode>
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80011ca:	2108      	movs	r1, #8
 80011cc:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <MX_GPIO_Init+0x24>)
 80011ce:	f7ff ffe2 	bl	8001196 <LL_GPIO_SetOutputPin>

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	48000400 	.word	0x48000400

080011dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	@ (8001228 <NVIC_EnableIRQ+0x30>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	da0b      	bge.n	8001258 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <NVIC_SetPriority+0x4c>)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	3b04      	subs	r3, #4
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001256:	e009      	b.n	800126c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <NVIC_SetPriority+0x50>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00
 800127c:	e000e100 	.word	0xe000e100

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_I2C_Enable>:
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <LL_I2C_EnableClockStretching>:
{
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <LL_I2C_DisableGeneralCall>:
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <LL_I2C_SetOwnAddress2>:
{
 8001346:	b480      	push	{r7}
 8001348:	b085      	sub	sp, #20
 800134a:	af00      	add	r7, sp, #0
 800134c:	60f8      	str	r0, [r7, #12]
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800135a:	f023 0306 	bic.w	r3, r3, #6
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	430a      	orrs	r2, r1
 8001364:	431a      	orrs	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	60da      	str	r2, [r3, #12]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_I2C_DisableOwnAddress2>:
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	60da      	str	r2, [r3, #12]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_I2C_EnableIT_RX>:
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f043 0204 	orr.w	r2, r3, #4
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_I2C_DisableIT_RX>:
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f023 0204 	bic.w	r2, r3, #4
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_I2C_IsActiveFlag_TXIS>:
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	bf0c      	ite	eq
 80013ea:	2301      	moveq	r3, #1
 80013ec:	2300      	movne	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_I2C_IsActiveFlag_RXNE>:
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b04      	cmp	r3, #4
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_I2C_IsActiveFlag_STOP>:
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	2b20      	cmp	r3, #32
 8001434:	bf0c      	ite	eq
 8001436:	2301      	moveq	r3, #1
 8001438:	2300      	movne	r3, #0
 800143a:	b2db      	uxtb	r3, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_I2C_ClearFlag_NACK>:
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	f043 0210 	orr.w	r2, r3, #16
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	61da      	str	r2, [r3, #28]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_I2C_ClearFlag_STOP>:
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f043 0220 	orr.w	r2, r3, #32
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	61da      	str	r2, [r3, #28]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_I2C_EnableAutoEndMode>:
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	605a      	str	r2, [r3, #4]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	0d5b      	lsrs	r3, r3, #21
 80014be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <LL_I2C_HandleTransfer+0x48>)
 80014c4:	430b      	orrs	r3, r1
 80014c6:	43db      	mvns	r3, r3
 80014c8:	401a      	ands	r2, r3
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4319      	orrs	r1, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	041b      	lsls	r3, r3, #16
 80014d4:	4319      	orrs	r1, r3
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	4319      	orrs	r1, r3
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	430b      	orrs	r3, r1
 80014de:	431a      	orrs	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	03ff7bff 	.word	0x03ff7bff

080014f4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001500:	b2db      	uxtb	r3, r3
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800151a:	78fa      	ldrb	r2, [r7, #3]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <LL_AHB1_GRP1_EnableClock>:
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	4907      	ldr	r1, [pc, #28]	@ (8001558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4013      	ands	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000

0800155c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001566:	69da      	ldr	r2, [r3, #28]
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <LL_APB1_GRP1_EnableClock+0x2c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001570:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40021000 	.word	0x40021000

0800158c <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	@ 0x38
 8001590:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80015b6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80015ba:	f7ff ffb7 	bl	800152c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80015be:	23c0      	movs	r3, #192	@ 0xc0
 80015c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80015c2:	2302      	movs	r3, #2
 80015c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80015ca:	2301      	movs	r3, #1
 80015cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80015d2:	2304      	movs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4821      	ldr	r0, [pc, #132]	@ (8001660 <MX_I2C1_Init+0xd4>)
 80015dc:	f7ff fbdf 	bl	8000d9e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80015e0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80015e4:	f7ff ffba 	bl	800155c <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015e8:	f7ff fdf8 	bl	80011dc <NVIC_GetPriorityGrouping>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2200      	movs	r2, #0
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe44 	bl	8001280 <NVIC_EncodePriority>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4619      	mov	r1, r3
 80015fc:	201f      	movs	r0, #31
 80015fe:	f7ff fe15 	bl	800122c <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001602:	201f      	movs	r0, #31
 8001604:	f7ff fdf8 	bl	80011f8 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001608:	4816      	ldr	r0, [pc, #88]	@ (8001664 <MX_I2C1_Init+0xd8>)
 800160a:	f7ff ff3d 	bl	8001488 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800160e:	4815      	ldr	r0, [pc, #84]	@ (8001664 <MX_I2C1_Init+0xd8>)
 8001610:	f7ff feb1 	bl	8001376 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001614:	4813      	ldr	r0, [pc, #76]	@ (8001664 <MX_I2C1_Init+0xd8>)
 8001616:	f7ff fe86 	bl	8001326 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800161a:	4812      	ldr	r0, [pc, #72]	@ (8001664 <MX_I2C1_Init+0xd8>)
 800161c:	f7ff fe73 	bl	8001306 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001624:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <MX_I2C1_Init+0xdc>)
 8001626:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001630:	2302      	movs	r3, #2
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001638:	2300      	movs	r3, #0
 800163a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4808      	ldr	r0, [pc, #32]	@ (8001664 <MX_I2C1_Init+0xd8>)
 8001644:	f7ff fcc8 	bl	8000fd8 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_I2C1_Init+0xd8>)
 800164e:	f7ff fe7a 	bl	8001346 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 8001652:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MX_I2C1_Init+0xd8>)
 8001654:	f7ff fe47 	bl	80012e6 <LL_I2C_Enable>
}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	@ 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	48000400 	.word	0x48000400
 8001664:	40005400 	.word	0x40005400
 8001668:	2000090e 	.word	0x2000090e

0800166c <i2c_master_read_byte>:


uint8_t i2c_master_read_byte(uint8_t slave_address, uint8_t register_address)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af02      	add	r7, sp, #8
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	71fb      	strb	r3, [r7, #7]
 8001678:	4613      	mov	r3, r2
 800167a:	71bb      	strb	r3, [r7, #6]
	// Enable It from I2C
	LL_I2C_EnableIT_RX(I2C1);
 800167c:	4825      	ldr	r0, [pc, #148]	@ (8001714 <i2c_master_read_byte+0xa8>)
 800167e:	f7ff fe8a 	bl	8001396 <LL_I2C_EnableIT_RX>
	// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001682:	79f9      	ldrb	r1, [r7, #7]
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <i2c_master_read_byte+0xac>)
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2301      	movs	r3, #1
 8001690:	2200      	movs	r2, #0
 8001692:	4820      	ldr	r0, [pc, #128]	@ (8001714 <i2c_master_read_byte+0xa8>)
 8001694:	f7ff ff08 	bl	80014a8 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001698:	e00a      	b.n	80016b0 <i2c_master_read_byte+0x44>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800169a:	481e      	ldr	r0, [pc, #120]	@ (8001714 <i2c_master_read_byte+0xa8>)
 800169c:	f7ff fe9b 	bl	80013d6 <LL_I2C_IsActiveFlag_TXIS>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d004      	beq.n	80016b0 <i2c_master_read_byte+0x44>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 80016a6:	79bb      	ldrb	r3, [r7, #6]
 80016a8:	4619      	mov	r1, r3
 80016aa:	481a      	ldr	r0, [pc, #104]	@ (8001714 <i2c_master_read_byte+0xa8>)
 80016ac:	f7ff ff2f 	bl	800150e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80016b0:	4818      	ldr	r0, [pc, #96]	@ (8001714 <i2c_master_read_byte+0xa8>)
 80016b2:	f7ff feb6 	bl	8001422 <LL_I2C_IsActiveFlag_STOP>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0ee      	beq.n	800169a <i2c_master_read_byte+0x2e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80016bc:	4815      	ldr	r0, [pc, #84]	@ (8001714 <i2c_master_read_byte+0xa8>)
 80016be:	f7ff fed3 	bl	8001468 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80016c2:	bf00      	nop
 80016c4:	4813      	ldr	r0, [pc, #76]	@ (8001714 <i2c_master_read_byte+0xa8>)
 80016c6:	f7ff feac 	bl	8001422 <LL_I2C_IsActiveFlag_STOP>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f9      	bne.n	80016c4 <i2c_master_read_byte+0x58>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80016d0:	79f9      	ldrb	r1, [r7, #7]
 80016d2:	4b12      	ldr	r3, [pc, #72]	@ (800171c <i2c_master_read_byte+0xb0>)
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	2200      	movs	r2, #0
 80016e0:	480c      	ldr	r0, [pc, #48]	@ (8001714 <i2c_master_read_byte+0xa8>)
 80016e2:	f7ff fee1 	bl	80014a8 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80016e6:	bf00      	nop
 80016e8:	480a      	ldr	r0, [pc, #40]	@ (8001714 <i2c_master_read_byte+0xa8>)
 80016ea:	f7ff fe9a 	bl	8001422 <LL_I2C_IsActiveFlag_STOP>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f9      	beq.n	80016e8 <i2c_master_read_byte+0x7c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 80016f4:	4807      	ldr	r0, [pc, #28]	@ (8001714 <i2c_master_read_byte+0xa8>)
 80016f6:	f7ff fe5e 	bl	80013b6 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 80016fa:	4806      	ldr	r0, [pc, #24]	@ (8001714 <i2c_master_read_byte+0xa8>)
 80016fc:	f7ff feb4 	bl	8001468 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 8001700:	4804      	ldr	r0, [pc, #16]	@ (8001714 <i2c_master_read_byte+0xa8>)
 8001702:	f7ff fea1 	bl	8001448 <LL_I2C_ClearFlag_NACK>

	return i2c_rx_data;
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <i2c_master_read_byte+0xb4>)
 8001708:	781b      	ldrb	r3, [r3, #0]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40005400 	.word	0x40005400
 8001718:	80002000 	.word	0x80002000
 800171c:	80002400 	.word	0x80002400
 8001720:	200001e8 	.word	0x200001e8

08001724 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	// Check RXNE flag value in ISR register
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001728:	4807      	ldr	r0, [pc, #28]	@ (8001748 <I2C1_EV_IRQHandler+0x24>)
 800172a:	f7ff fe67 	bl	80013fc <LL_I2C_IsActiveFlag_RXNE>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <I2C1_EV_IRQHandler+0x1e>
	{
		// Call function Master Reception Callback
		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
 8001734:	4804      	ldr	r0, [pc, #16]	@ (8001748 <I2C1_EV_IRQHandler+0x24>)
 8001736:	f7ff fedd 	bl	80014f4 <LL_I2C_ReceiveData8>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	4b03      	ldr	r3, [pc, #12]	@ (800174c <I2C1_EV_IRQHandler+0x28>)
 8001740:	701a      	strb	r2, [r3, #0]
	}
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40005400 	.word	0x40005400
 800174c:	200001e8 	.word	0x200001e8

08001750 <NVIC_SetPriorityGrouping>:
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	@ (8001794 <NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800179c:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <LL_RCC_HSI_Enable+0x1c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <LL_RCC_HSI_Enable+0x1c>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <LL_RCC_HSI_IsReady+0x20>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	bf0c      	ite	eq
 80017c8:	2301      	moveq	r3, #1
 80017ca:	2300      	movne	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40021000 	.word	0x40021000

080017dc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4904      	ldr	r1, [pc, #16]	@ (8001804 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <LL_RCC_SetSysClkSource+0x24>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 0203 	bic.w	r2, r3, #3
 8001818:	4904      	ldr	r1, [pc, #16]	@ (800182c <LL_RCC_SetSysClkSource+0x24>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	40021000 	.word	0x40021000

08001830 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <LL_RCC_GetSysClkSource+0x18>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
}
 800183c:	4618      	mov	r0, r3
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <LL_RCC_SetAHBPrescaler+0x24>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185c:	4904      	ldr	r1, [pc, #16]	@ (8001870 <LL_RCC_SetAHBPrescaler+0x24>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40021000 	.word	0x40021000

08001874 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <LL_RCC_SetAPB1Prescaler+0x24>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001884:	4904      	ldr	r1, [pc, #16]	@ (8001898 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	40021000 	.word	0x40021000

0800189c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018ac:	4904      	ldr	r1, [pc, #16]	@ (80018c0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000

080018c4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80018cc:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0e1b      	lsrs	r3, r3, #24
 80018d4:	43db      	mvns	r3, r3
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80018de:	4904      	ldr	r1, [pc, #16]	@ (80018f0 <LL_RCC_SetI2CClockSource+0x2c>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000

080018f4 <LL_APB1_GRP1_EnableClock>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018fe:	69da      	ldr	r2, [r3, #28]
 8001900:	4907      	ldr	r1, [pc, #28]	@ (8001920 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <LL_APB1_GRP1_EnableClock+0x2c>)
 800190a:	69da      	ldr	r2, [r3, #28]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40021000 	.word	0x40021000

08001924 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <LL_APB2_GRP1_EnableClock+0x2c>)
 800192e:	699a      	ldr	r2, [r3, #24]
 8001930:	4907      	ldr	r1, [pc, #28]	@ (8001950 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4313      	orrs	r3, r2
 8001936:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <LL_APB2_GRP1_EnableClock+0x2c>)
 800193a:	699a      	ldr	r2, [r3, #24]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4013      	ands	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000

08001954 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800195c:	4b06      	ldr	r3, [pc, #24]	@ (8001978 <LL_FLASH_SetLatency+0x24>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 0207 	bic.w	r2, r3, #7
 8001964:	4904      	ldr	r1, [pc, #16]	@ (8001978 <LL_FLASH_SetLatency+0x24>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40022000 	.word	0x40022000

0800197c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001980:	4b04      	ldr	r3, [pc, #16]	@ (8001994 <LL_FLASH_GetLatency+0x18>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0307 	and.w	r3, r3, #7
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000

08001998 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d106      	bne.n	80019b4 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80019a6:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <LL_SYSTICK_SetClkSource+0x34>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <LL_SYSTICK_SetClkSource+0x34>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80019b2:	e005      	b.n	80019c0 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80019b4:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <LL_SYSTICK_SetClkSource+0x34>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <LL_SYSTICK_SetClkSource+0x34>)
 80019ba:	f023 0304 	bic.w	r3, r3, #4
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	405a      	eors	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	615a      	str	r2, [r3, #20]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <main>:

void SystemClock_Config(void);


int main(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff ff93 	bl	8001924 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019fe:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001a02:	f7ff ff77 	bl	80018f4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a06:	2003      	movs	r0, #3
 8001a08:	f7ff fea2 	bl	8001750 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001a0c:	f000 f816 	bl	8001a3c <SystemClock_Config>

  MX_GPIO_Init();
 8001a10:	f7ff fbd0 	bl	80011b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001a14:	f7ff fdba 	bl	800158c <MX_I2C1_Init>

  while (1)
  {
	  if(i2c_master_read_byte(LSM6DS0_DEVICE_ADDRESS, LSM6DS0_WHO_AM_I_ADDRES) == LSM6DS0_WHO_AM_I_VALUE)
 8001a18:	210f      	movs	r1, #15
 8001a1a:	20d6      	movs	r0, #214	@ 0xd6
 8001a1c:	f7ff fe26 	bl	800166c <i2c_master_read_byte>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b68      	cmp	r3, #104	@ 0x68
 8001a24:	d103      	bne.n	8001a2e <main+0x3a>
	  {
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
 8001a26:	2108      	movs	r1, #8
 8001a28:	4803      	ldr	r0, [pc, #12]	@ (8001a38 <main+0x44>)
 8001a2a:	f7ff ffd1 	bl	80019d0 <LL_GPIO_TogglePin>
	  }

	  LL_mDelay(100);
 8001a2e:	2064      	movs	r0, #100	@ 0x64
 8001a30:	f7ff fb36 	bl	80010a0 <LL_mDelay>
	  if(i2c_master_read_byte(LSM6DS0_DEVICE_ADDRESS, LSM6DS0_WHO_AM_I_ADDRES) == LSM6DS0_WHO_AM_I_VALUE)
 8001a34:	e7f0      	b.n	8001a18 <main+0x24>
 8001a36:	bf00      	nop
 8001a38:	48000400 	.word	0x48000400

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff ff87 	bl	8001954 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001a46:	f7ff ff99 	bl	800197c <LL_FLASH_GetLatency>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001a50:	f000 f82e 	bl	8001ab0 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001a54:	f7ff fea0 	bl	8001798 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001a58:	bf00      	nop
 8001a5a:	f7ff fead 	bl	80017b8 <LL_RCC_HSI_IsReady>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d1fa      	bne.n	8001a5a <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001a64:	2010      	movs	r0, #16
 8001a66:	f7ff feb9 	bl	80017dc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff feee 	bl	800184c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff feff 	bl	8001874 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff ff10 	bl	800189c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fec3 	bl	8001808 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001a82:	bf00      	nop
 8001a84:	f7ff fed4 	bl	8001830 <LL_RCC_GetSysClkSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1fa      	bne.n	8001a84 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8001a8e:	4807      	ldr	r0, [pc, #28]	@ (8001aac <SystemClock_Config+0x70>)
 8001a90:	f7ff faf8 	bl	8001084 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001a94:	2004      	movs	r0, #4
 8001a96:	f7ff ff7f 	bl	8001998 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8001a9a:	4804      	ldr	r0, [pc, #16]	@ (8001aac <SystemClock_Config+0x70>)
 8001a9c:	f7ff fb26 	bl	80010ec <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001aa0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001aa4:	f7ff ff0e 	bl	80018c4 <LL_RCC_SetI2CClockSource>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	007a1200 	.word	0x007a1200

08001ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	4a0b      	ldr	r2, [pc, #44]	@ (8001afc <LL_DMA_DisableChannel+0x3c>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	3a01      	subs	r2, #1
 8001ade:	4907      	ldr	r1, [pc, #28]	@ (8001afc <LL_DMA_DisableChannel+0x3c>)
 8001ae0:	5c8a      	ldrb	r2, [r1, r2]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	440a      	add	r2, r1
 8001ae8:	f023 0301 	bic.w	r3, r3, #1
 8001aec:	6013      	str	r3, [r2, #0]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	08004778 	.word	0x08004778

08001b00 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b14:	bf0c      	ite	eq
 8001b16:	2301      	moveq	r3, #1
 8001b18:	2300      	movne	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b36:	605a      	str	r2, [r3, #4]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b54:	2b40      	cmp	r3, #64	@ 0x40
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <MemManage_Handler+0x4>

08001b88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <BusFault_Handler+0x4>

08001b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <UsageFault_Handler+0x4>

08001b98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001bd4:	480a      	ldr	r0, [pc, #40]	@ (8001c00 <DMA1_Channel7_IRQHandler+0x30>)
 8001bd6:	f7ff ff93 	bl	8001b00 <LL_DMA_IsActiveFlag_TC7>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d10d      	bne.n	8001bfc <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001be0:	4807      	ldr	r0, [pc, #28]	@ (8001c00 <DMA1_Channel7_IRQHandler+0x30>)
 8001be2:	f7ff ffa1 	bl	8001b28 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001be6:	bf00      	nop
 8001be8:	4806      	ldr	r0, [pc, #24]	@ (8001c04 <DMA1_Channel7_IRQHandler+0x34>)
 8001bea:	f7ff ffab 	bl	8001b44 <LL_USART_IsActiveFlag_TC>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0f9      	beq.n	8001be8 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001bf4:	2107      	movs	r1, #7
 8001bf6:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <DMA1_Channel7_IRQHandler+0x30>)
 8001bf8:	f7ff ff62 	bl	8001ac0 <LL_DMA_DisableChannel>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40020000 	.word	0x40020000
 8001c04:	40004400 	.word	0x40004400

08001c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	return 1;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_kill>:

int _kill(int pid, int sig)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c22:	f000 fecf 	bl	80029c4 <__errno>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2216      	movs	r2, #22
 8001c2a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_exit>:

void _exit (int status)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff ffe7 	bl	8001c18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c4a:	bf00      	nop
 8001c4c:	e7fd      	b.n	8001c4a <_exit+0x12>

08001c4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e00a      	b.n	8001c76 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c60:	f3af 8000 	nop.w
 8001c64:	4601      	mov	r1, r0
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	1c5a      	adds	r2, r3, #1
 8001c6a:	60ba      	str	r2, [r7, #8]
 8001c6c:	b2ca      	uxtb	r2, r1
 8001c6e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	3301      	adds	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	dbf0      	blt.n	8001c60 <_read+0x12>
	}

return len;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e009      	b.n	8001cae <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	60ba      	str	r2, [r7, #8]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3301      	adds	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	dbf1      	blt.n	8001c9a <_write+0x12>
	}
	return len;
 8001cb6:	687b      	ldr	r3, [r7, #4]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <_close>:

int _close(int file)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	return -1;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ce8:	605a      	str	r2, [r3, #4]
	return 0;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_isatty>:

int _isatty(int file)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	return 1;
 8001d00:	2301      	movs	r3, #1
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	60f8      	str	r0, [r7, #12]
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
	return 0;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <_sbrk+0x50>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x16>
		heap_end = &end;
 8001d38:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <_sbrk+0x50>)
 8001d3a:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <_sbrk+0x54>)
 8001d3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <_sbrk+0x50>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <_sbrk+0x50>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	466a      	mov	r2, sp
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d907      	bls.n	8001d62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d52:	f000 fe37 	bl	80029c4 <__errno>
 8001d56:	4603      	mov	r3, r0
 8001d58:	220c      	movs	r2, #12
 8001d5a:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	e006      	b.n	8001d70 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <_sbrk+0x50>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a03      	ldr	r2, [pc, #12]	@ (8001d78 <_sbrk+0x50>)
 8001d6c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200001ec 	.word	0x200001ec
 8001d7c:	20000340 	.word	0x20000340

08001d80 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d84:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <SystemInit+0x84>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <SystemInit+0x84>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d94:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <SystemInit+0x88>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1b      	ldr	r2, [pc, #108]	@ (8001e08 <SystemInit+0x88>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <SystemInit+0x88>)
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4918      	ldr	r1, [pc, #96]	@ (8001e08 <SystemInit+0x88>)
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <SystemInit+0x8c>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <SystemInit+0x88>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a15      	ldr	r2, [pc, #84]	@ (8001e08 <SystemInit+0x88>)
 8001db2:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <SystemInit+0x88>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <SystemInit+0x88>)
 8001dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <SystemInit+0x88>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8001e08 <SystemInit+0x88>)
 8001dce:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8001dd2:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <SystemInit+0x88>)
 8001dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e08 <SystemInit+0x88>)
 8001dda:	f023 030f 	bic.w	r3, r3, #15
 8001dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <SystemInit+0x88>)
 8001de2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001de4:	4908      	ldr	r1, [pc, #32]	@ (8001e08 <SystemInit+0x88>)
 8001de6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <SystemInit+0x90>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <SystemInit+0x88>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001df2:	4b04      	ldr	r3, [pc, #16]	@ (8001e04 <SystemInit+0x84>)
 8001df4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001df8:	609a      	str	r2, [r3, #8]
#endif
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000ed00 	.word	0xe000ed00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	f87fc00c 	.word	0xf87fc00c
 8001e10:	ff00fccc 	.word	0xff00fccc

08001e14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e4c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e1a:	e003      	b.n	8001e24 <LoopCopyDataInit>

08001e1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e22:	3104      	adds	r1, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e24:	480b      	ldr	r0, [pc, #44]	@ (8001e54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e26:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e2c:	d3f6      	bcc.n	8001e1c <CopyDataInit>
	ldr	r2, =_sbss
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e30:	e002      	b.n	8001e38 <LoopFillZerobss>

08001e32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e34:	f842 3b04 	str.w	r3, [r2], #4

08001e38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e38:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <LoopForever+0x16>)
	cmp	r2, r3
 8001e3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e3c:	d3f9      	bcc.n	8001e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e3e:	f7ff ff9f 	bl	8001d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e42:	f000 fdc5 	bl	80029d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e46:	f7ff fdd5 	bl	80019f4 <main>

08001e4a <LoopForever>:

LoopForever:
    b LoopForever
 8001e4a:	e7fe      	b.n	8001e4a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e4c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001e50:	08004b00 	.word	0x08004b00
	ldr	r0, =_sdata
 8001e54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e58:	200001cc 	.word	0x200001cc
	ldr	r2, =_sbss
 8001e5c:	200001cc 	.word	0x200001cc
	ldr	r3, = _ebss
 8001e60:	2000033c 	.word	0x2000033c

08001e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e64:	e7fe      	b.n	8001e64 <ADC1_2_IRQHandler>

08001e66 <__cvt>:
 8001e66:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e6a:	ec57 6b10 	vmov	r6, r7, d0
 8001e6e:	2f00      	cmp	r7, #0
 8001e70:	460c      	mov	r4, r1
 8001e72:	4619      	mov	r1, r3
 8001e74:	463b      	mov	r3, r7
 8001e76:	bfbb      	ittet	lt
 8001e78:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001e7c:	461f      	movlt	r7, r3
 8001e7e:	2300      	movge	r3, #0
 8001e80:	232d      	movlt	r3, #45	@ 0x2d
 8001e82:	700b      	strb	r3, [r1, #0]
 8001e84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001e86:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001e8a:	4691      	mov	r9, r2
 8001e8c:	f023 0820 	bic.w	r8, r3, #32
 8001e90:	bfbc      	itt	lt
 8001e92:	4632      	movlt	r2, r6
 8001e94:	4616      	movlt	r6, r2
 8001e96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001e9a:	d005      	beq.n	8001ea8 <__cvt+0x42>
 8001e9c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001ea0:	d100      	bne.n	8001ea4 <__cvt+0x3e>
 8001ea2:	3401      	adds	r4, #1
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	e000      	b.n	8001eaa <__cvt+0x44>
 8001ea8:	2103      	movs	r1, #3
 8001eaa:	ab03      	add	r3, sp, #12
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	ab02      	add	r3, sp, #8
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	ec47 6b10 	vmov	d0, r6, r7
 8001eb6:	4653      	mov	r3, sl
 8001eb8:	4622      	mov	r2, r4
 8001eba:	f000 fe39 	bl	8002b30 <_dtoa_r>
 8001ebe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001ec2:	4605      	mov	r5, r0
 8001ec4:	d119      	bne.n	8001efa <__cvt+0x94>
 8001ec6:	f019 0f01 	tst.w	r9, #1
 8001eca:	d00e      	beq.n	8001eea <__cvt+0x84>
 8001ecc:	eb00 0904 	add.w	r9, r0, r4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	4639      	mov	r1, r7
 8001ed8:	f7fe fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8001edc:	b108      	cbz	r0, 8001ee2 <__cvt+0x7c>
 8001ede:	f8cd 900c 	str.w	r9, [sp, #12]
 8001ee2:	2230      	movs	r2, #48	@ 0x30
 8001ee4:	9b03      	ldr	r3, [sp, #12]
 8001ee6:	454b      	cmp	r3, r9
 8001ee8:	d31e      	bcc.n	8001f28 <__cvt+0xc2>
 8001eea:	9b03      	ldr	r3, [sp, #12]
 8001eec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001eee:	1b5b      	subs	r3, r3, r5
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	b004      	add	sp, #16
 8001ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001efa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001efe:	eb00 0904 	add.w	r9, r0, r4
 8001f02:	d1e5      	bne.n	8001ed0 <__cvt+0x6a>
 8001f04:	7803      	ldrb	r3, [r0, #0]
 8001f06:	2b30      	cmp	r3, #48	@ 0x30
 8001f08:	d10a      	bne.n	8001f20 <__cvt+0xba>
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	4630      	mov	r0, r6
 8001f10:	4639      	mov	r1, r7
 8001f12:	f7fe fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f16:	b918      	cbnz	r0, 8001f20 <__cvt+0xba>
 8001f18:	f1c4 0401 	rsb	r4, r4, #1
 8001f1c:	f8ca 4000 	str.w	r4, [sl]
 8001f20:	f8da 3000 	ldr.w	r3, [sl]
 8001f24:	4499      	add	r9, r3
 8001f26:	e7d3      	b.n	8001ed0 <__cvt+0x6a>
 8001f28:	1c59      	adds	r1, r3, #1
 8001f2a:	9103      	str	r1, [sp, #12]
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e7d9      	b.n	8001ee4 <__cvt+0x7e>

08001f30 <__exponent>:
 8001f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f32:	2900      	cmp	r1, #0
 8001f34:	bfba      	itte	lt
 8001f36:	4249      	neglt	r1, r1
 8001f38:	232d      	movlt	r3, #45	@ 0x2d
 8001f3a:	232b      	movge	r3, #43	@ 0x2b
 8001f3c:	2909      	cmp	r1, #9
 8001f3e:	7002      	strb	r2, [r0, #0]
 8001f40:	7043      	strb	r3, [r0, #1]
 8001f42:	dd29      	ble.n	8001f98 <__exponent+0x68>
 8001f44:	f10d 0307 	add.w	r3, sp, #7
 8001f48:	461d      	mov	r5, r3
 8001f4a:	270a      	movs	r7, #10
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	fbb1 f6f7 	udiv	r6, r1, r7
 8001f52:	fb07 1416 	mls	r4, r7, r6, r1
 8001f56:	3430      	adds	r4, #48	@ 0x30
 8001f58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001f5c:	460c      	mov	r4, r1
 8001f5e:	2c63      	cmp	r4, #99	@ 0x63
 8001f60:	f103 33ff 	add.w	r3, r3, #4294967295
 8001f64:	4631      	mov	r1, r6
 8001f66:	dcf1      	bgt.n	8001f4c <__exponent+0x1c>
 8001f68:	3130      	adds	r1, #48	@ 0x30
 8001f6a:	1e94      	subs	r4, r2, #2
 8001f6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001f70:	1c41      	adds	r1, r0, #1
 8001f72:	4623      	mov	r3, r4
 8001f74:	42ab      	cmp	r3, r5
 8001f76:	d30a      	bcc.n	8001f8e <__exponent+0x5e>
 8001f78:	f10d 0309 	add.w	r3, sp, #9
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	42ac      	cmp	r4, r5
 8001f80:	bf88      	it	hi
 8001f82:	2300      	movhi	r3, #0
 8001f84:	3302      	adds	r3, #2
 8001f86:	4403      	add	r3, r0
 8001f88:	1a18      	subs	r0, r3, r0
 8001f8a:	b003      	add	sp, #12
 8001f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001f92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001f96:	e7ed      	b.n	8001f74 <__exponent+0x44>
 8001f98:	2330      	movs	r3, #48	@ 0x30
 8001f9a:	3130      	adds	r1, #48	@ 0x30
 8001f9c:	7083      	strb	r3, [r0, #2]
 8001f9e:	70c1      	strb	r1, [r0, #3]
 8001fa0:	1d03      	adds	r3, r0, #4
 8001fa2:	e7f1      	b.n	8001f88 <__exponent+0x58>

08001fa4 <_printf_float>:
 8001fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa8:	b08d      	sub	sp, #52	@ 0x34
 8001faa:	460c      	mov	r4, r1
 8001fac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8001fb0:	4616      	mov	r6, r2
 8001fb2:	461f      	mov	r7, r3
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	f000 fcbb 	bl	8002930 <_localeconv_r>
 8001fba:	6803      	ldr	r3, [r0, #0]
 8001fbc:	9304      	str	r3, [sp, #16]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe f956 	bl	8000270 <strlen>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8001fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8001fcc:	9005      	str	r0, [sp, #20]
 8001fce:	3307      	adds	r3, #7
 8001fd0:	f023 0307 	bic.w	r3, r3, #7
 8001fd4:	f103 0208 	add.w	r2, r3, #8
 8001fd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001fdc:	f8d4 b000 	ldr.w	fp, [r4]
 8001fe0:	f8c8 2000 	str.w	r2, [r8]
 8001fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001fe8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8001fec:	9307      	str	r3, [sp, #28]
 8001fee:	f8cd 8018 	str.w	r8, [sp, #24]
 8001ff2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8001ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800226c <_printf_float+0x2c8>)
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	f7fe fd94 	bl	8000b2c <__aeabi_dcmpun>
 8002004:	bb70      	cbnz	r0, 8002064 <_printf_float+0xc0>
 8002006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800200a:	4b98      	ldr	r3, [pc, #608]	@ (800226c <_printf_float+0x2c8>)
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	f7fe fd6e 	bl	8000af0 <__aeabi_dcmple>
 8002014:	bb30      	cbnz	r0, 8002064 <_printf_float+0xc0>
 8002016:	2200      	movs	r2, #0
 8002018:	2300      	movs	r3, #0
 800201a:	4640      	mov	r0, r8
 800201c:	4649      	mov	r1, r9
 800201e:	f7fe fd5d 	bl	8000adc <__aeabi_dcmplt>
 8002022:	b110      	cbz	r0, 800202a <_printf_float+0x86>
 8002024:	232d      	movs	r3, #45	@ 0x2d
 8002026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800202a:	4a91      	ldr	r2, [pc, #580]	@ (8002270 <_printf_float+0x2cc>)
 800202c:	4b91      	ldr	r3, [pc, #580]	@ (8002274 <_printf_float+0x2d0>)
 800202e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002032:	bf94      	ite	ls
 8002034:	4690      	movls	r8, r2
 8002036:	4698      	movhi	r8, r3
 8002038:	2303      	movs	r3, #3
 800203a:	6123      	str	r3, [r4, #16]
 800203c:	f02b 0304 	bic.w	r3, fp, #4
 8002040:	6023      	str	r3, [r4, #0]
 8002042:	f04f 0900 	mov.w	r9, #0
 8002046:	9700      	str	r7, [sp, #0]
 8002048:	4633      	mov	r3, r6
 800204a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800204c:	4621      	mov	r1, r4
 800204e:	4628      	mov	r0, r5
 8002050:	f000 f9d2 	bl	80023f8 <_printf_common>
 8002054:	3001      	adds	r0, #1
 8002056:	f040 808d 	bne.w	8002174 <_printf_float+0x1d0>
 800205a:	f04f 30ff 	mov.w	r0, #4294967295
 800205e:	b00d      	add	sp, #52	@ 0x34
 8002060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002064:	4642      	mov	r2, r8
 8002066:	464b      	mov	r3, r9
 8002068:	4640      	mov	r0, r8
 800206a:	4649      	mov	r1, r9
 800206c:	f7fe fd5e 	bl	8000b2c <__aeabi_dcmpun>
 8002070:	b140      	cbz	r0, 8002084 <_printf_float+0xe0>
 8002072:	464b      	mov	r3, r9
 8002074:	2b00      	cmp	r3, #0
 8002076:	bfbc      	itt	lt
 8002078:	232d      	movlt	r3, #45	@ 0x2d
 800207a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800207e:	4a7e      	ldr	r2, [pc, #504]	@ (8002278 <_printf_float+0x2d4>)
 8002080:	4b7e      	ldr	r3, [pc, #504]	@ (800227c <_printf_float+0x2d8>)
 8002082:	e7d4      	b.n	800202e <_printf_float+0x8a>
 8002084:	6863      	ldr	r3, [r4, #4]
 8002086:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800208a:	9206      	str	r2, [sp, #24]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	d13b      	bne.n	8002108 <_printf_float+0x164>
 8002090:	2306      	movs	r3, #6
 8002092:	6063      	str	r3, [r4, #4]
 8002094:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002098:	2300      	movs	r3, #0
 800209a:	6022      	str	r2, [r4, #0]
 800209c:	9303      	str	r3, [sp, #12]
 800209e:	ab0a      	add	r3, sp, #40	@ 0x28
 80020a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80020a4:	ab09      	add	r3, sp, #36	@ 0x24
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	6861      	ldr	r1, [r4, #4]
 80020aa:	ec49 8b10 	vmov	d0, r8, r9
 80020ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80020b2:	4628      	mov	r0, r5
 80020b4:	f7ff fed7 	bl	8001e66 <__cvt>
 80020b8:	9b06      	ldr	r3, [sp, #24]
 80020ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80020bc:	2b47      	cmp	r3, #71	@ 0x47
 80020be:	4680      	mov	r8, r0
 80020c0:	d129      	bne.n	8002116 <_printf_float+0x172>
 80020c2:	1cc8      	adds	r0, r1, #3
 80020c4:	db02      	blt.n	80020cc <_printf_float+0x128>
 80020c6:	6863      	ldr	r3, [r4, #4]
 80020c8:	4299      	cmp	r1, r3
 80020ca:	dd41      	ble.n	8002150 <_printf_float+0x1ac>
 80020cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80020d0:	fa5f fa8a 	uxtb.w	sl, sl
 80020d4:	3901      	subs	r1, #1
 80020d6:	4652      	mov	r2, sl
 80020d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80020dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80020de:	f7ff ff27 	bl	8001f30 <__exponent>
 80020e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80020e4:	1813      	adds	r3, r2, r0
 80020e6:	2a01      	cmp	r2, #1
 80020e8:	4681      	mov	r9, r0
 80020ea:	6123      	str	r3, [r4, #16]
 80020ec:	dc02      	bgt.n	80020f4 <_printf_float+0x150>
 80020ee:	6822      	ldr	r2, [r4, #0]
 80020f0:	07d2      	lsls	r2, r2, #31
 80020f2:	d501      	bpl.n	80020f8 <_printf_float+0x154>
 80020f4:	3301      	adds	r3, #1
 80020f6:	6123      	str	r3, [r4, #16]
 80020f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0a2      	beq.n	8002046 <_printf_float+0xa2>
 8002100:	232d      	movs	r3, #45	@ 0x2d
 8002102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002106:	e79e      	b.n	8002046 <_printf_float+0xa2>
 8002108:	9a06      	ldr	r2, [sp, #24]
 800210a:	2a47      	cmp	r2, #71	@ 0x47
 800210c:	d1c2      	bne.n	8002094 <_printf_float+0xf0>
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1c0      	bne.n	8002094 <_printf_float+0xf0>
 8002112:	2301      	movs	r3, #1
 8002114:	e7bd      	b.n	8002092 <_printf_float+0xee>
 8002116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800211a:	d9db      	bls.n	80020d4 <_printf_float+0x130>
 800211c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002120:	d118      	bne.n	8002154 <_printf_float+0x1b0>
 8002122:	2900      	cmp	r1, #0
 8002124:	6863      	ldr	r3, [r4, #4]
 8002126:	dd0b      	ble.n	8002140 <_printf_float+0x19c>
 8002128:	6121      	str	r1, [r4, #16]
 800212a:	b913      	cbnz	r3, 8002132 <_printf_float+0x18e>
 800212c:	6822      	ldr	r2, [r4, #0]
 800212e:	07d0      	lsls	r0, r2, #31
 8002130:	d502      	bpl.n	8002138 <_printf_float+0x194>
 8002132:	3301      	adds	r3, #1
 8002134:	440b      	add	r3, r1
 8002136:	6123      	str	r3, [r4, #16]
 8002138:	65a1      	str	r1, [r4, #88]	@ 0x58
 800213a:	f04f 0900 	mov.w	r9, #0
 800213e:	e7db      	b.n	80020f8 <_printf_float+0x154>
 8002140:	b913      	cbnz	r3, 8002148 <_printf_float+0x1a4>
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	07d2      	lsls	r2, r2, #31
 8002146:	d501      	bpl.n	800214c <_printf_float+0x1a8>
 8002148:	3302      	adds	r3, #2
 800214a:	e7f4      	b.n	8002136 <_printf_float+0x192>
 800214c:	2301      	movs	r3, #1
 800214e:	e7f2      	b.n	8002136 <_printf_float+0x192>
 8002150:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002156:	4299      	cmp	r1, r3
 8002158:	db05      	blt.n	8002166 <_printf_float+0x1c2>
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	6121      	str	r1, [r4, #16]
 800215e:	07d8      	lsls	r0, r3, #31
 8002160:	d5ea      	bpl.n	8002138 <_printf_float+0x194>
 8002162:	1c4b      	adds	r3, r1, #1
 8002164:	e7e7      	b.n	8002136 <_printf_float+0x192>
 8002166:	2900      	cmp	r1, #0
 8002168:	bfd4      	ite	le
 800216a:	f1c1 0202 	rsble	r2, r1, #2
 800216e:	2201      	movgt	r2, #1
 8002170:	4413      	add	r3, r2
 8002172:	e7e0      	b.n	8002136 <_printf_float+0x192>
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	055a      	lsls	r2, r3, #21
 8002178:	d407      	bmi.n	800218a <_printf_float+0x1e6>
 800217a:	6923      	ldr	r3, [r4, #16]
 800217c:	4642      	mov	r2, r8
 800217e:	4631      	mov	r1, r6
 8002180:	4628      	mov	r0, r5
 8002182:	47b8      	blx	r7
 8002184:	3001      	adds	r0, #1
 8002186:	d12b      	bne.n	80021e0 <_printf_float+0x23c>
 8002188:	e767      	b.n	800205a <_printf_float+0xb6>
 800218a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800218e:	f240 80dd 	bls.w	800234c <_printf_float+0x3a8>
 8002192:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002196:	2200      	movs	r2, #0
 8002198:	2300      	movs	r3, #0
 800219a:	f7fe fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d033      	beq.n	800220a <_printf_float+0x266>
 80021a2:	4a37      	ldr	r2, [pc, #220]	@ (8002280 <_printf_float+0x2dc>)
 80021a4:	2301      	movs	r3, #1
 80021a6:	4631      	mov	r1, r6
 80021a8:	4628      	mov	r0, r5
 80021aa:	47b8      	blx	r7
 80021ac:	3001      	adds	r0, #1
 80021ae:	f43f af54 	beq.w	800205a <_printf_float+0xb6>
 80021b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80021b6:	4543      	cmp	r3, r8
 80021b8:	db02      	blt.n	80021c0 <_printf_float+0x21c>
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	07d8      	lsls	r0, r3, #31
 80021be:	d50f      	bpl.n	80021e0 <_printf_float+0x23c>
 80021c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80021c4:	4631      	mov	r1, r6
 80021c6:	4628      	mov	r0, r5
 80021c8:	47b8      	blx	r7
 80021ca:	3001      	adds	r0, #1
 80021cc:	f43f af45 	beq.w	800205a <_printf_float+0xb6>
 80021d0:	f04f 0900 	mov.w	r9, #0
 80021d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80021d8:	f104 0a1a 	add.w	sl, r4, #26
 80021dc:	45c8      	cmp	r8, r9
 80021de:	dc09      	bgt.n	80021f4 <_printf_float+0x250>
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	079b      	lsls	r3, r3, #30
 80021e4:	f100 8103 	bmi.w	80023ee <_printf_float+0x44a>
 80021e8:	68e0      	ldr	r0, [r4, #12]
 80021ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80021ec:	4298      	cmp	r0, r3
 80021ee:	bfb8      	it	lt
 80021f0:	4618      	movlt	r0, r3
 80021f2:	e734      	b.n	800205e <_printf_float+0xba>
 80021f4:	2301      	movs	r3, #1
 80021f6:	4652      	mov	r2, sl
 80021f8:	4631      	mov	r1, r6
 80021fa:	4628      	mov	r0, r5
 80021fc:	47b8      	blx	r7
 80021fe:	3001      	adds	r0, #1
 8002200:	f43f af2b 	beq.w	800205a <_printf_float+0xb6>
 8002204:	f109 0901 	add.w	r9, r9, #1
 8002208:	e7e8      	b.n	80021dc <_printf_float+0x238>
 800220a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800220c:	2b00      	cmp	r3, #0
 800220e:	dc39      	bgt.n	8002284 <_printf_float+0x2e0>
 8002210:	4a1b      	ldr	r2, [pc, #108]	@ (8002280 <_printf_float+0x2dc>)
 8002212:	2301      	movs	r3, #1
 8002214:	4631      	mov	r1, r6
 8002216:	4628      	mov	r0, r5
 8002218:	47b8      	blx	r7
 800221a:	3001      	adds	r0, #1
 800221c:	f43f af1d 	beq.w	800205a <_printf_float+0xb6>
 8002220:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002224:	ea59 0303 	orrs.w	r3, r9, r3
 8002228:	d102      	bne.n	8002230 <_printf_float+0x28c>
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	07d9      	lsls	r1, r3, #31
 800222e:	d5d7      	bpl.n	80021e0 <_printf_float+0x23c>
 8002230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002234:	4631      	mov	r1, r6
 8002236:	4628      	mov	r0, r5
 8002238:	47b8      	blx	r7
 800223a:	3001      	adds	r0, #1
 800223c:	f43f af0d 	beq.w	800205a <_printf_float+0xb6>
 8002240:	f04f 0a00 	mov.w	sl, #0
 8002244:	f104 0b1a 	add.w	fp, r4, #26
 8002248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800224a:	425b      	negs	r3, r3
 800224c:	4553      	cmp	r3, sl
 800224e:	dc01      	bgt.n	8002254 <_printf_float+0x2b0>
 8002250:	464b      	mov	r3, r9
 8002252:	e793      	b.n	800217c <_printf_float+0x1d8>
 8002254:	2301      	movs	r3, #1
 8002256:	465a      	mov	r2, fp
 8002258:	4631      	mov	r1, r6
 800225a:	4628      	mov	r0, r5
 800225c:	47b8      	blx	r7
 800225e:	3001      	adds	r0, #1
 8002260:	f43f aefb 	beq.w	800205a <_printf_float+0xb6>
 8002264:	f10a 0a01 	add.w	sl, sl, #1
 8002268:	e7ee      	b.n	8002248 <_printf_float+0x2a4>
 800226a:	bf00      	nop
 800226c:	7fefffff 	.word	0x7fefffff
 8002270:	0800477f 	.word	0x0800477f
 8002274:	08004783 	.word	0x08004783
 8002278:	08004787 	.word	0x08004787
 800227c:	0800478b 	.word	0x0800478b
 8002280:	0800478f 	.word	0x0800478f
 8002284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002286:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800228a:	4553      	cmp	r3, sl
 800228c:	bfa8      	it	ge
 800228e:	4653      	movge	r3, sl
 8002290:	2b00      	cmp	r3, #0
 8002292:	4699      	mov	r9, r3
 8002294:	dc36      	bgt.n	8002304 <_printf_float+0x360>
 8002296:	f04f 0b00 	mov.w	fp, #0
 800229a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800229e:	f104 021a 	add.w	r2, r4, #26
 80022a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80022a4:	9306      	str	r3, [sp, #24]
 80022a6:	eba3 0309 	sub.w	r3, r3, r9
 80022aa:	455b      	cmp	r3, fp
 80022ac:	dc31      	bgt.n	8002312 <_printf_float+0x36e>
 80022ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022b0:	459a      	cmp	sl, r3
 80022b2:	dc3a      	bgt.n	800232a <_printf_float+0x386>
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	07da      	lsls	r2, r3, #31
 80022b8:	d437      	bmi.n	800232a <_printf_float+0x386>
 80022ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022bc:	ebaa 0903 	sub.w	r9, sl, r3
 80022c0:	9b06      	ldr	r3, [sp, #24]
 80022c2:	ebaa 0303 	sub.w	r3, sl, r3
 80022c6:	4599      	cmp	r9, r3
 80022c8:	bfa8      	it	ge
 80022ca:	4699      	movge	r9, r3
 80022cc:	f1b9 0f00 	cmp.w	r9, #0
 80022d0:	dc33      	bgt.n	800233a <_printf_float+0x396>
 80022d2:	f04f 0800 	mov.w	r8, #0
 80022d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022da:	f104 0b1a 	add.w	fp, r4, #26
 80022de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022e0:	ebaa 0303 	sub.w	r3, sl, r3
 80022e4:	eba3 0309 	sub.w	r3, r3, r9
 80022e8:	4543      	cmp	r3, r8
 80022ea:	f77f af79 	ble.w	80021e0 <_printf_float+0x23c>
 80022ee:	2301      	movs	r3, #1
 80022f0:	465a      	mov	r2, fp
 80022f2:	4631      	mov	r1, r6
 80022f4:	4628      	mov	r0, r5
 80022f6:	47b8      	blx	r7
 80022f8:	3001      	adds	r0, #1
 80022fa:	f43f aeae 	beq.w	800205a <_printf_float+0xb6>
 80022fe:	f108 0801 	add.w	r8, r8, #1
 8002302:	e7ec      	b.n	80022de <_printf_float+0x33a>
 8002304:	4642      	mov	r2, r8
 8002306:	4631      	mov	r1, r6
 8002308:	4628      	mov	r0, r5
 800230a:	47b8      	blx	r7
 800230c:	3001      	adds	r0, #1
 800230e:	d1c2      	bne.n	8002296 <_printf_float+0x2f2>
 8002310:	e6a3      	b.n	800205a <_printf_float+0xb6>
 8002312:	2301      	movs	r3, #1
 8002314:	4631      	mov	r1, r6
 8002316:	4628      	mov	r0, r5
 8002318:	9206      	str	r2, [sp, #24]
 800231a:	47b8      	blx	r7
 800231c:	3001      	adds	r0, #1
 800231e:	f43f ae9c 	beq.w	800205a <_printf_float+0xb6>
 8002322:	9a06      	ldr	r2, [sp, #24]
 8002324:	f10b 0b01 	add.w	fp, fp, #1
 8002328:	e7bb      	b.n	80022a2 <_printf_float+0x2fe>
 800232a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800232e:	4631      	mov	r1, r6
 8002330:	4628      	mov	r0, r5
 8002332:	47b8      	blx	r7
 8002334:	3001      	adds	r0, #1
 8002336:	d1c0      	bne.n	80022ba <_printf_float+0x316>
 8002338:	e68f      	b.n	800205a <_printf_float+0xb6>
 800233a:	9a06      	ldr	r2, [sp, #24]
 800233c:	464b      	mov	r3, r9
 800233e:	4442      	add	r2, r8
 8002340:	4631      	mov	r1, r6
 8002342:	4628      	mov	r0, r5
 8002344:	47b8      	blx	r7
 8002346:	3001      	adds	r0, #1
 8002348:	d1c3      	bne.n	80022d2 <_printf_float+0x32e>
 800234a:	e686      	b.n	800205a <_printf_float+0xb6>
 800234c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002350:	f1ba 0f01 	cmp.w	sl, #1
 8002354:	dc01      	bgt.n	800235a <_printf_float+0x3b6>
 8002356:	07db      	lsls	r3, r3, #31
 8002358:	d536      	bpl.n	80023c8 <_printf_float+0x424>
 800235a:	2301      	movs	r3, #1
 800235c:	4642      	mov	r2, r8
 800235e:	4631      	mov	r1, r6
 8002360:	4628      	mov	r0, r5
 8002362:	47b8      	blx	r7
 8002364:	3001      	adds	r0, #1
 8002366:	f43f ae78 	beq.w	800205a <_printf_float+0xb6>
 800236a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800236e:	4631      	mov	r1, r6
 8002370:	4628      	mov	r0, r5
 8002372:	47b8      	blx	r7
 8002374:	3001      	adds	r0, #1
 8002376:	f43f ae70 	beq.w	800205a <_printf_float+0xb6>
 800237a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800237e:	2200      	movs	r2, #0
 8002380:	2300      	movs	r3, #0
 8002382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002386:	f7fe fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800238a:	b9c0      	cbnz	r0, 80023be <_printf_float+0x41a>
 800238c:	4653      	mov	r3, sl
 800238e:	f108 0201 	add.w	r2, r8, #1
 8002392:	4631      	mov	r1, r6
 8002394:	4628      	mov	r0, r5
 8002396:	47b8      	blx	r7
 8002398:	3001      	adds	r0, #1
 800239a:	d10c      	bne.n	80023b6 <_printf_float+0x412>
 800239c:	e65d      	b.n	800205a <_printf_float+0xb6>
 800239e:	2301      	movs	r3, #1
 80023a0:	465a      	mov	r2, fp
 80023a2:	4631      	mov	r1, r6
 80023a4:	4628      	mov	r0, r5
 80023a6:	47b8      	blx	r7
 80023a8:	3001      	adds	r0, #1
 80023aa:	f43f ae56 	beq.w	800205a <_printf_float+0xb6>
 80023ae:	f108 0801 	add.w	r8, r8, #1
 80023b2:	45d0      	cmp	r8, sl
 80023b4:	dbf3      	blt.n	800239e <_printf_float+0x3fa>
 80023b6:	464b      	mov	r3, r9
 80023b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80023bc:	e6df      	b.n	800217e <_printf_float+0x1da>
 80023be:	f04f 0800 	mov.w	r8, #0
 80023c2:	f104 0b1a 	add.w	fp, r4, #26
 80023c6:	e7f4      	b.n	80023b2 <_printf_float+0x40e>
 80023c8:	2301      	movs	r3, #1
 80023ca:	4642      	mov	r2, r8
 80023cc:	e7e1      	b.n	8002392 <_printf_float+0x3ee>
 80023ce:	2301      	movs	r3, #1
 80023d0:	464a      	mov	r2, r9
 80023d2:	4631      	mov	r1, r6
 80023d4:	4628      	mov	r0, r5
 80023d6:	47b8      	blx	r7
 80023d8:	3001      	adds	r0, #1
 80023da:	f43f ae3e 	beq.w	800205a <_printf_float+0xb6>
 80023de:	f108 0801 	add.w	r8, r8, #1
 80023e2:	68e3      	ldr	r3, [r4, #12]
 80023e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80023e6:	1a5b      	subs	r3, r3, r1
 80023e8:	4543      	cmp	r3, r8
 80023ea:	dcf0      	bgt.n	80023ce <_printf_float+0x42a>
 80023ec:	e6fc      	b.n	80021e8 <_printf_float+0x244>
 80023ee:	f04f 0800 	mov.w	r8, #0
 80023f2:	f104 0919 	add.w	r9, r4, #25
 80023f6:	e7f4      	b.n	80023e2 <_printf_float+0x43e>

080023f8 <_printf_common>:
 80023f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023fc:	4616      	mov	r6, r2
 80023fe:	4698      	mov	r8, r3
 8002400:	688a      	ldr	r2, [r1, #8]
 8002402:	690b      	ldr	r3, [r1, #16]
 8002404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002408:	4293      	cmp	r3, r2
 800240a:	bfb8      	it	lt
 800240c:	4613      	movlt	r3, r2
 800240e:	6033      	str	r3, [r6, #0]
 8002410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002414:	4607      	mov	r7, r0
 8002416:	460c      	mov	r4, r1
 8002418:	b10a      	cbz	r2, 800241e <_printf_common+0x26>
 800241a:	3301      	adds	r3, #1
 800241c:	6033      	str	r3, [r6, #0]
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	0699      	lsls	r1, r3, #26
 8002422:	bf42      	ittt	mi
 8002424:	6833      	ldrmi	r3, [r6, #0]
 8002426:	3302      	addmi	r3, #2
 8002428:	6033      	strmi	r3, [r6, #0]
 800242a:	6825      	ldr	r5, [r4, #0]
 800242c:	f015 0506 	ands.w	r5, r5, #6
 8002430:	d106      	bne.n	8002440 <_printf_common+0x48>
 8002432:	f104 0a19 	add.w	sl, r4, #25
 8002436:	68e3      	ldr	r3, [r4, #12]
 8002438:	6832      	ldr	r2, [r6, #0]
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	42ab      	cmp	r3, r5
 800243e:	dc26      	bgt.n	800248e <_printf_common+0x96>
 8002440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002444:	6822      	ldr	r2, [r4, #0]
 8002446:	3b00      	subs	r3, #0
 8002448:	bf18      	it	ne
 800244a:	2301      	movne	r3, #1
 800244c:	0692      	lsls	r2, r2, #26
 800244e:	d42b      	bmi.n	80024a8 <_printf_common+0xb0>
 8002450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002454:	4641      	mov	r1, r8
 8002456:	4638      	mov	r0, r7
 8002458:	47c8      	blx	r9
 800245a:	3001      	adds	r0, #1
 800245c:	d01e      	beq.n	800249c <_printf_common+0xa4>
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	6922      	ldr	r2, [r4, #16]
 8002462:	f003 0306 	and.w	r3, r3, #6
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf02      	ittt	eq
 800246a:	68e5      	ldreq	r5, [r4, #12]
 800246c:	6833      	ldreq	r3, [r6, #0]
 800246e:	1aed      	subeq	r5, r5, r3
 8002470:	68a3      	ldr	r3, [r4, #8]
 8002472:	bf0c      	ite	eq
 8002474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002478:	2500      	movne	r5, #0
 800247a:	4293      	cmp	r3, r2
 800247c:	bfc4      	itt	gt
 800247e:	1a9b      	subgt	r3, r3, r2
 8002480:	18ed      	addgt	r5, r5, r3
 8002482:	2600      	movs	r6, #0
 8002484:	341a      	adds	r4, #26
 8002486:	42b5      	cmp	r5, r6
 8002488:	d11a      	bne.n	80024c0 <_printf_common+0xc8>
 800248a:	2000      	movs	r0, #0
 800248c:	e008      	b.n	80024a0 <_printf_common+0xa8>
 800248e:	2301      	movs	r3, #1
 8002490:	4652      	mov	r2, sl
 8002492:	4641      	mov	r1, r8
 8002494:	4638      	mov	r0, r7
 8002496:	47c8      	blx	r9
 8002498:	3001      	adds	r0, #1
 800249a:	d103      	bne.n	80024a4 <_printf_common+0xac>
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024a4:	3501      	adds	r5, #1
 80024a6:	e7c6      	b.n	8002436 <_printf_common+0x3e>
 80024a8:	18e1      	adds	r1, r4, r3
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	2030      	movs	r0, #48	@ 0x30
 80024ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80024b2:	4422      	add	r2, r4
 80024b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80024b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80024bc:	3302      	adds	r3, #2
 80024be:	e7c7      	b.n	8002450 <_printf_common+0x58>
 80024c0:	2301      	movs	r3, #1
 80024c2:	4622      	mov	r2, r4
 80024c4:	4641      	mov	r1, r8
 80024c6:	4638      	mov	r0, r7
 80024c8:	47c8      	blx	r9
 80024ca:	3001      	adds	r0, #1
 80024cc:	d0e6      	beq.n	800249c <_printf_common+0xa4>
 80024ce:	3601      	adds	r6, #1
 80024d0:	e7d9      	b.n	8002486 <_printf_common+0x8e>
	...

080024d4 <_printf_i>:
 80024d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024d8:	7e0f      	ldrb	r7, [r1, #24]
 80024da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80024dc:	2f78      	cmp	r7, #120	@ 0x78
 80024de:	4691      	mov	r9, r2
 80024e0:	4680      	mov	r8, r0
 80024e2:	460c      	mov	r4, r1
 80024e4:	469a      	mov	sl, r3
 80024e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024ea:	d807      	bhi.n	80024fc <_printf_i+0x28>
 80024ec:	2f62      	cmp	r7, #98	@ 0x62
 80024ee:	d80a      	bhi.n	8002506 <_printf_i+0x32>
 80024f0:	2f00      	cmp	r7, #0
 80024f2:	f000 80d2 	beq.w	800269a <_printf_i+0x1c6>
 80024f6:	2f58      	cmp	r7, #88	@ 0x58
 80024f8:	f000 80b9 	beq.w	800266e <_printf_i+0x19a>
 80024fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002504:	e03a      	b.n	800257c <_printf_i+0xa8>
 8002506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800250a:	2b15      	cmp	r3, #21
 800250c:	d8f6      	bhi.n	80024fc <_printf_i+0x28>
 800250e:	a101      	add	r1, pc, #4	@ (adr r1, 8002514 <_printf_i+0x40>)
 8002510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002514:	0800256d 	.word	0x0800256d
 8002518:	08002581 	.word	0x08002581
 800251c:	080024fd 	.word	0x080024fd
 8002520:	080024fd 	.word	0x080024fd
 8002524:	080024fd 	.word	0x080024fd
 8002528:	080024fd 	.word	0x080024fd
 800252c:	08002581 	.word	0x08002581
 8002530:	080024fd 	.word	0x080024fd
 8002534:	080024fd 	.word	0x080024fd
 8002538:	080024fd 	.word	0x080024fd
 800253c:	080024fd 	.word	0x080024fd
 8002540:	08002681 	.word	0x08002681
 8002544:	080025ab 	.word	0x080025ab
 8002548:	0800263b 	.word	0x0800263b
 800254c:	080024fd 	.word	0x080024fd
 8002550:	080024fd 	.word	0x080024fd
 8002554:	080026a3 	.word	0x080026a3
 8002558:	080024fd 	.word	0x080024fd
 800255c:	080025ab 	.word	0x080025ab
 8002560:	080024fd 	.word	0x080024fd
 8002564:	080024fd 	.word	0x080024fd
 8002568:	08002643 	.word	0x08002643
 800256c:	6833      	ldr	r3, [r6, #0]
 800256e:	1d1a      	adds	r2, r3, #4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6032      	str	r2, [r6, #0]
 8002574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800257c:	2301      	movs	r3, #1
 800257e:	e09d      	b.n	80026bc <_printf_i+0x1e8>
 8002580:	6833      	ldr	r3, [r6, #0]
 8002582:	6820      	ldr	r0, [r4, #0]
 8002584:	1d19      	adds	r1, r3, #4
 8002586:	6031      	str	r1, [r6, #0]
 8002588:	0606      	lsls	r6, r0, #24
 800258a:	d501      	bpl.n	8002590 <_printf_i+0xbc>
 800258c:	681d      	ldr	r5, [r3, #0]
 800258e:	e003      	b.n	8002598 <_printf_i+0xc4>
 8002590:	0645      	lsls	r5, r0, #25
 8002592:	d5fb      	bpl.n	800258c <_printf_i+0xb8>
 8002594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002598:	2d00      	cmp	r5, #0
 800259a:	da03      	bge.n	80025a4 <_printf_i+0xd0>
 800259c:	232d      	movs	r3, #45	@ 0x2d
 800259e:	426d      	negs	r5, r5
 80025a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025a4:	4859      	ldr	r0, [pc, #356]	@ (800270c <_printf_i+0x238>)
 80025a6:	230a      	movs	r3, #10
 80025a8:	e011      	b.n	80025ce <_printf_i+0xfa>
 80025aa:	6821      	ldr	r1, [r4, #0]
 80025ac:	6833      	ldr	r3, [r6, #0]
 80025ae:	0608      	lsls	r0, r1, #24
 80025b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80025b4:	d402      	bmi.n	80025bc <_printf_i+0xe8>
 80025b6:	0649      	lsls	r1, r1, #25
 80025b8:	bf48      	it	mi
 80025ba:	b2ad      	uxthmi	r5, r5
 80025bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80025be:	4853      	ldr	r0, [pc, #332]	@ (800270c <_printf_i+0x238>)
 80025c0:	6033      	str	r3, [r6, #0]
 80025c2:	bf14      	ite	ne
 80025c4:	230a      	movne	r3, #10
 80025c6:	2308      	moveq	r3, #8
 80025c8:	2100      	movs	r1, #0
 80025ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80025ce:	6866      	ldr	r6, [r4, #4]
 80025d0:	60a6      	str	r6, [r4, #8]
 80025d2:	2e00      	cmp	r6, #0
 80025d4:	bfa2      	ittt	ge
 80025d6:	6821      	ldrge	r1, [r4, #0]
 80025d8:	f021 0104 	bicge.w	r1, r1, #4
 80025dc:	6021      	strge	r1, [r4, #0]
 80025de:	b90d      	cbnz	r5, 80025e4 <_printf_i+0x110>
 80025e0:	2e00      	cmp	r6, #0
 80025e2:	d04b      	beq.n	800267c <_printf_i+0x1a8>
 80025e4:	4616      	mov	r6, r2
 80025e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80025ea:	fb03 5711 	mls	r7, r3, r1, r5
 80025ee:	5dc7      	ldrb	r7, [r0, r7]
 80025f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025f4:	462f      	mov	r7, r5
 80025f6:	42bb      	cmp	r3, r7
 80025f8:	460d      	mov	r5, r1
 80025fa:	d9f4      	bls.n	80025e6 <_printf_i+0x112>
 80025fc:	2b08      	cmp	r3, #8
 80025fe:	d10b      	bne.n	8002618 <_printf_i+0x144>
 8002600:	6823      	ldr	r3, [r4, #0]
 8002602:	07df      	lsls	r7, r3, #31
 8002604:	d508      	bpl.n	8002618 <_printf_i+0x144>
 8002606:	6923      	ldr	r3, [r4, #16]
 8002608:	6861      	ldr	r1, [r4, #4]
 800260a:	4299      	cmp	r1, r3
 800260c:	bfde      	ittt	le
 800260e:	2330      	movle	r3, #48	@ 0x30
 8002610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002614:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002618:	1b92      	subs	r2, r2, r6
 800261a:	6122      	str	r2, [r4, #16]
 800261c:	f8cd a000 	str.w	sl, [sp]
 8002620:	464b      	mov	r3, r9
 8002622:	aa03      	add	r2, sp, #12
 8002624:	4621      	mov	r1, r4
 8002626:	4640      	mov	r0, r8
 8002628:	f7ff fee6 	bl	80023f8 <_printf_common>
 800262c:	3001      	adds	r0, #1
 800262e:	d14a      	bne.n	80026c6 <_printf_i+0x1f2>
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	b004      	add	sp, #16
 8002636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800263a:	6823      	ldr	r3, [r4, #0]
 800263c:	f043 0320 	orr.w	r3, r3, #32
 8002640:	6023      	str	r3, [r4, #0]
 8002642:	4833      	ldr	r0, [pc, #204]	@ (8002710 <_printf_i+0x23c>)
 8002644:	2778      	movs	r7, #120	@ 0x78
 8002646:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	6831      	ldr	r1, [r6, #0]
 800264e:	061f      	lsls	r7, r3, #24
 8002650:	f851 5b04 	ldr.w	r5, [r1], #4
 8002654:	d402      	bmi.n	800265c <_printf_i+0x188>
 8002656:	065f      	lsls	r7, r3, #25
 8002658:	bf48      	it	mi
 800265a:	b2ad      	uxthmi	r5, r5
 800265c:	6031      	str	r1, [r6, #0]
 800265e:	07d9      	lsls	r1, r3, #31
 8002660:	bf44      	itt	mi
 8002662:	f043 0320 	orrmi.w	r3, r3, #32
 8002666:	6023      	strmi	r3, [r4, #0]
 8002668:	b11d      	cbz	r5, 8002672 <_printf_i+0x19e>
 800266a:	2310      	movs	r3, #16
 800266c:	e7ac      	b.n	80025c8 <_printf_i+0xf4>
 800266e:	4827      	ldr	r0, [pc, #156]	@ (800270c <_printf_i+0x238>)
 8002670:	e7e9      	b.n	8002646 <_printf_i+0x172>
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	f023 0320 	bic.w	r3, r3, #32
 8002678:	6023      	str	r3, [r4, #0]
 800267a:	e7f6      	b.n	800266a <_printf_i+0x196>
 800267c:	4616      	mov	r6, r2
 800267e:	e7bd      	b.n	80025fc <_printf_i+0x128>
 8002680:	6833      	ldr	r3, [r6, #0]
 8002682:	6825      	ldr	r5, [r4, #0]
 8002684:	6961      	ldr	r1, [r4, #20]
 8002686:	1d18      	adds	r0, r3, #4
 8002688:	6030      	str	r0, [r6, #0]
 800268a:	062e      	lsls	r6, r5, #24
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	d501      	bpl.n	8002694 <_printf_i+0x1c0>
 8002690:	6019      	str	r1, [r3, #0]
 8002692:	e002      	b.n	800269a <_printf_i+0x1c6>
 8002694:	0668      	lsls	r0, r5, #25
 8002696:	d5fb      	bpl.n	8002690 <_printf_i+0x1bc>
 8002698:	8019      	strh	r1, [r3, #0]
 800269a:	2300      	movs	r3, #0
 800269c:	6123      	str	r3, [r4, #16]
 800269e:	4616      	mov	r6, r2
 80026a0:	e7bc      	b.n	800261c <_printf_i+0x148>
 80026a2:	6833      	ldr	r3, [r6, #0]
 80026a4:	1d1a      	adds	r2, r3, #4
 80026a6:	6032      	str	r2, [r6, #0]
 80026a8:	681e      	ldr	r6, [r3, #0]
 80026aa:	6862      	ldr	r2, [r4, #4]
 80026ac:	2100      	movs	r1, #0
 80026ae:	4630      	mov	r0, r6
 80026b0:	f7fd fd8e 	bl	80001d0 <memchr>
 80026b4:	b108      	cbz	r0, 80026ba <_printf_i+0x1e6>
 80026b6:	1b80      	subs	r0, r0, r6
 80026b8:	6060      	str	r0, [r4, #4]
 80026ba:	6863      	ldr	r3, [r4, #4]
 80026bc:	6123      	str	r3, [r4, #16]
 80026be:	2300      	movs	r3, #0
 80026c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026c4:	e7aa      	b.n	800261c <_printf_i+0x148>
 80026c6:	6923      	ldr	r3, [r4, #16]
 80026c8:	4632      	mov	r2, r6
 80026ca:	4649      	mov	r1, r9
 80026cc:	4640      	mov	r0, r8
 80026ce:	47d0      	blx	sl
 80026d0:	3001      	adds	r0, #1
 80026d2:	d0ad      	beq.n	8002630 <_printf_i+0x15c>
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	079b      	lsls	r3, r3, #30
 80026d8:	d413      	bmi.n	8002702 <_printf_i+0x22e>
 80026da:	68e0      	ldr	r0, [r4, #12]
 80026dc:	9b03      	ldr	r3, [sp, #12]
 80026de:	4298      	cmp	r0, r3
 80026e0:	bfb8      	it	lt
 80026e2:	4618      	movlt	r0, r3
 80026e4:	e7a6      	b.n	8002634 <_printf_i+0x160>
 80026e6:	2301      	movs	r3, #1
 80026e8:	4632      	mov	r2, r6
 80026ea:	4649      	mov	r1, r9
 80026ec:	4640      	mov	r0, r8
 80026ee:	47d0      	blx	sl
 80026f0:	3001      	adds	r0, #1
 80026f2:	d09d      	beq.n	8002630 <_printf_i+0x15c>
 80026f4:	3501      	adds	r5, #1
 80026f6:	68e3      	ldr	r3, [r4, #12]
 80026f8:	9903      	ldr	r1, [sp, #12]
 80026fa:	1a5b      	subs	r3, r3, r1
 80026fc:	42ab      	cmp	r3, r5
 80026fe:	dcf2      	bgt.n	80026e6 <_printf_i+0x212>
 8002700:	e7eb      	b.n	80026da <_printf_i+0x206>
 8002702:	2500      	movs	r5, #0
 8002704:	f104 0619 	add.w	r6, r4, #25
 8002708:	e7f5      	b.n	80026f6 <_printf_i+0x222>
 800270a:	bf00      	nop
 800270c:	08004791 	.word	0x08004791
 8002710:	080047a2 	.word	0x080047a2

08002714 <std>:
 8002714:	2300      	movs	r3, #0
 8002716:	b510      	push	{r4, lr}
 8002718:	4604      	mov	r4, r0
 800271a:	e9c0 3300 	strd	r3, r3, [r0]
 800271e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002722:	6083      	str	r3, [r0, #8]
 8002724:	8181      	strh	r1, [r0, #12]
 8002726:	6643      	str	r3, [r0, #100]	@ 0x64
 8002728:	81c2      	strh	r2, [r0, #14]
 800272a:	6183      	str	r3, [r0, #24]
 800272c:	4619      	mov	r1, r3
 800272e:	2208      	movs	r2, #8
 8002730:	305c      	adds	r0, #92	@ 0x5c
 8002732:	f000 f8f4 	bl	800291e <memset>
 8002736:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <std+0x58>)
 8002738:	6263      	str	r3, [r4, #36]	@ 0x24
 800273a:	4b0d      	ldr	r3, [pc, #52]	@ (8002770 <std+0x5c>)
 800273c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800273e:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <std+0x60>)
 8002740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <std+0x64>)
 8002744:	6323      	str	r3, [r4, #48]	@ 0x30
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <std+0x68>)
 8002748:	6224      	str	r4, [r4, #32]
 800274a:	429c      	cmp	r4, r3
 800274c:	d006      	beq.n	800275c <std+0x48>
 800274e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002752:	4294      	cmp	r4, r2
 8002754:	d002      	beq.n	800275c <std+0x48>
 8002756:	33d0      	adds	r3, #208	@ 0xd0
 8002758:	429c      	cmp	r4, r3
 800275a:	d105      	bne.n	8002768 <std+0x54>
 800275c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002764:	f000 b958 	b.w	8002a18 <__retarget_lock_init_recursive>
 8002768:	bd10      	pop	{r4, pc}
 800276a:	bf00      	nop
 800276c:	08002899 	.word	0x08002899
 8002770:	080028bb 	.word	0x080028bb
 8002774:	080028f3 	.word	0x080028f3
 8002778:	08002917 	.word	0x08002917
 800277c:	200001f0 	.word	0x200001f0

08002780 <stdio_exit_handler>:
 8002780:	4a02      	ldr	r2, [pc, #8]	@ (800278c <stdio_exit_handler+0xc>)
 8002782:	4903      	ldr	r1, [pc, #12]	@ (8002790 <stdio_exit_handler+0x10>)
 8002784:	4803      	ldr	r0, [pc, #12]	@ (8002794 <stdio_exit_handler+0x14>)
 8002786:	f000 b869 	b.w	800285c <_fwalk_sglue>
 800278a:	bf00      	nop
 800278c:	20000004 	.word	0x20000004
 8002790:	080040c5 	.word	0x080040c5
 8002794:	20000014 	.word	0x20000014

08002798 <cleanup_stdio>:
 8002798:	6841      	ldr	r1, [r0, #4]
 800279a:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <cleanup_stdio+0x34>)
 800279c:	4299      	cmp	r1, r3
 800279e:	b510      	push	{r4, lr}
 80027a0:	4604      	mov	r4, r0
 80027a2:	d001      	beq.n	80027a8 <cleanup_stdio+0x10>
 80027a4:	f001 fc8e 	bl	80040c4 <_fflush_r>
 80027a8:	68a1      	ldr	r1, [r4, #8]
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <cleanup_stdio+0x38>)
 80027ac:	4299      	cmp	r1, r3
 80027ae:	d002      	beq.n	80027b6 <cleanup_stdio+0x1e>
 80027b0:	4620      	mov	r0, r4
 80027b2:	f001 fc87 	bl	80040c4 <_fflush_r>
 80027b6:	68e1      	ldr	r1, [r4, #12]
 80027b8:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <cleanup_stdio+0x3c>)
 80027ba:	4299      	cmp	r1, r3
 80027bc:	d004      	beq.n	80027c8 <cleanup_stdio+0x30>
 80027be:	4620      	mov	r0, r4
 80027c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c4:	f001 bc7e 	b.w	80040c4 <_fflush_r>
 80027c8:	bd10      	pop	{r4, pc}
 80027ca:	bf00      	nop
 80027cc:	200001f0 	.word	0x200001f0
 80027d0:	20000258 	.word	0x20000258
 80027d4:	200002c0 	.word	0x200002c0

080027d8 <global_stdio_init.part.0>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <global_stdio_init.part.0+0x30>)
 80027dc:	4c0b      	ldr	r4, [pc, #44]	@ (800280c <global_stdio_init.part.0+0x34>)
 80027de:	4a0c      	ldr	r2, [pc, #48]	@ (8002810 <global_stdio_init.part.0+0x38>)
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	4620      	mov	r0, r4
 80027e4:	2200      	movs	r2, #0
 80027e6:	2104      	movs	r1, #4
 80027e8:	f7ff ff94 	bl	8002714 <std>
 80027ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80027f0:	2201      	movs	r2, #1
 80027f2:	2109      	movs	r1, #9
 80027f4:	f7ff ff8e 	bl	8002714 <std>
 80027f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80027fc:	2202      	movs	r2, #2
 80027fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002802:	2112      	movs	r1, #18
 8002804:	f7ff bf86 	b.w	8002714 <std>
 8002808:	20000328 	.word	0x20000328
 800280c:	200001f0 	.word	0x200001f0
 8002810:	08002781 	.word	0x08002781

08002814 <__sfp_lock_acquire>:
 8002814:	4801      	ldr	r0, [pc, #4]	@ (800281c <__sfp_lock_acquire+0x8>)
 8002816:	f000 b900 	b.w	8002a1a <__retarget_lock_acquire_recursive>
 800281a:	bf00      	nop
 800281c:	20000331 	.word	0x20000331

08002820 <__sfp_lock_release>:
 8002820:	4801      	ldr	r0, [pc, #4]	@ (8002828 <__sfp_lock_release+0x8>)
 8002822:	f000 b8fb 	b.w	8002a1c <__retarget_lock_release_recursive>
 8002826:	bf00      	nop
 8002828:	20000331 	.word	0x20000331

0800282c <__sinit>:
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
 8002830:	f7ff fff0 	bl	8002814 <__sfp_lock_acquire>
 8002834:	6a23      	ldr	r3, [r4, #32]
 8002836:	b11b      	cbz	r3, 8002840 <__sinit+0x14>
 8002838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800283c:	f7ff bff0 	b.w	8002820 <__sfp_lock_release>
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <__sinit+0x28>)
 8002842:	6223      	str	r3, [r4, #32]
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <__sinit+0x2c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f5      	bne.n	8002838 <__sinit+0xc>
 800284c:	f7ff ffc4 	bl	80027d8 <global_stdio_init.part.0>
 8002850:	e7f2      	b.n	8002838 <__sinit+0xc>
 8002852:	bf00      	nop
 8002854:	08002799 	.word	0x08002799
 8002858:	20000328 	.word	0x20000328

0800285c <_fwalk_sglue>:
 800285c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002860:	4607      	mov	r7, r0
 8002862:	4688      	mov	r8, r1
 8002864:	4614      	mov	r4, r2
 8002866:	2600      	movs	r6, #0
 8002868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800286c:	f1b9 0901 	subs.w	r9, r9, #1
 8002870:	d505      	bpl.n	800287e <_fwalk_sglue+0x22>
 8002872:	6824      	ldr	r4, [r4, #0]
 8002874:	2c00      	cmp	r4, #0
 8002876:	d1f7      	bne.n	8002868 <_fwalk_sglue+0xc>
 8002878:	4630      	mov	r0, r6
 800287a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800287e:	89ab      	ldrh	r3, [r5, #12]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d907      	bls.n	8002894 <_fwalk_sglue+0x38>
 8002884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002888:	3301      	adds	r3, #1
 800288a:	d003      	beq.n	8002894 <_fwalk_sglue+0x38>
 800288c:	4629      	mov	r1, r5
 800288e:	4638      	mov	r0, r7
 8002890:	47c0      	blx	r8
 8002892:	4306      	orrs	r6, r0
 8002894:	3568      	adds	r5, #104	@ 0x68
 8002896:	e7e9      	b.n	800286c <_fwalk_sglue+0x10>

08002898 <__sread>:
 8002898:	b510      	push	{r4, lr}
 800289a:	460c      	mov	r4, r1
 800289c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a0:	f000 f86c 	bl	800297c <_read_r>
 80028a4:	2800      	cmp	r0, #0
 80028a6:	bfab      	itete	ge
 80028a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80028aa:	89a3      	ldrhlt	r3, [r4, #12]
 80028ac:	181b      	addge	r3, r3, r0
 80028ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80028b2:	bfac      	ite	ge
 80028b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80028b6:	81a3      	strhlt	r3, [r4, #12]
 80028b8:	bd10      	pop	{r4, pc}

080028ba <__swrite>:
 80028ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028be:	461f      	mov	r7, r3
 80028c0:	898b      	ldrh	r3, [r1, #12]
 80028c2:	05db      	lsls	r3, r3, #23
 80028c4:	4605      	mov	r5, r0
 80028c6:	460c      	mov	r4, r1
 80028c8:	4616      	mov	r6, r2
 80028ca:	d505      	bpl.n	80028d8 <__swrite+0x1e>
 80028cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028d0:	2302      	movs	r3, #2
 80028d2:	2200      	movs	r2, #0
 80028d4:	f000 f840 	bl	8002958 <_lseek_r>
 80028d8:	89a3      	ldrh	r3, [r4, #12]
 80028da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80028de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028e2:	81a3      	strh	r3, [r4, #12]
 80028e4:	4632      	mov	r2, r6
 80028e6:	463b      	mov	r3, r7
 80028e8:	4628      	mov	r0, r5
 80028ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028ee:	f000 b857 	b.w	80029a0 <_write_r>

080028f2 <__sseek>:
 80028f2:	b510      	push	{r4, lr}
 80028f4:	460c      	mov	r4, r1
 80028f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028fa:	f000 f82d 	bl	8002958 <_lseek_r>
 80028fe:	1c43      	adds	r3, r0, #1
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	bf15      	itete	ne
 8002904:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002906:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800290a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800290e:	81a3      	strheq	r3, [r4, #12]
 8002910:	bf18      	it	ne
 8002912:	81a3      	strhne	r3, [r4, #12]
 8002914:	bd10      	pop	{r4, pc}

08002916 <__sclose>:
 8002916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800291a:	f000 b80d 	b.w	8002938 <_close_r>

0800291e <memset>:
 800291e:	4402      	add	r2, r0
 8002920:	4603      	mov	r3, r0
 8002922:	4293      	cmp	r3, r2
 8002924:	d100      	bne.n	8002928 <memset+0xa>
 8002926:	4770      	bx	lr
 8002928:	f803 1b01 	strb.w	r1, [r3], #1
 800292c:	e7f9      	b.n	8002922 <memset+0x4>
	...

08002930 <_localeconv_r>:
 8002930:	4800      	ldr	r0, [pc, #0]	@ (8002934 <_localeconv_r+0x4>)
 8002932:	4770      	bx	lr
 8002934:	20000150 	.word	0x20000150

08002938 <_close_r>:
 8002938:	b538      	push	{r3, r4, r5, lr}
 800293a:	4d06      	ldr	r5, [pc, #24]	@ (8002954 <_close_r+0x1c>)
 800293c:	2300      	movs	r3, #0
 800293e:	4604      	mov	r4, r0
 8002940:	4608      	mov	r0, r1
 8002942:	602b      	str	r3, [r5, #0]
 8002944:	f7ff f9bc 	bl	8001cc0 <_close>
 8002948:	1c43      	adds	r3, r0, #1
 800294a:	d102      	bne.n	8002952 <_close_r+0x1a>
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	b103      	cbz	r3, 8002952 <_close_r+0x1a>
 8002950:	6023      	str	r3, [r4, #0]
 8002952:	bd38      	pop	{r3, r4, r5, pc}
 8002954:	2000032c 	.word	0x2000032c

08002958 <_lseek_r>:
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	4d07      	ldr	r5, [pc, #28]	@ (8002978 <_lseek_r+0x20>)
 800295c:	4604      	mov	r4, r0
 800295e:	4608      	mov	r0, r1
 8002960:	4611      	mov	r1, r2
 8002962:	2200      	movs	r2, #0
 8002964:	602a      	str	r2, [r5, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	f7ff f9d1 	bl	8001d0e <_lseek>
 800296c:	1c43      	adds	r3, r0, #1
 800296e:	d102      	bne.n	8002976 <_lseek_r+0x1e>
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	b103      	cbz	r3, 8002976 <_lseek_r+0x1e>
 8002974:	6023      	str	r3, [r4, #0]
 8002976:	bd38      	pop	{r3, r4, r5, pc}
 8002978:	2000032c 	.word	0x2000032c

0800297c <_read_r>:
 800297c:	b538      	push	{r3, r4, r5, lr}
 800297e:	4d07      	ldr	r5, [pc, #28]	@ (800299c <_read_r+0x20>)
 8002980:	4604      	mov	r4, r0
 8002982:	4608      	mov	r0, r1
 8002984:	4611      	mov	r1, r2
 8002986:	2200      	movs	r2, #0
 8002988:	602a      	str	r2, [r5, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	f7ff f95f 	bl	8001c4e <_read>
 8002990:	1c43      	adds	r3, r0, #1
 8002992:	d102      	bne.n	800299a <_read_r+0x1e>
 8002994:	682b      	ldr	r3, [r5, #0]
 8002996:	b103      	cbz	r3, 800299a <_read_r+0x1e>
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	bd38      	pop	{r3, r4, r5, pc}
 800299c:	2000032c 	.word	0x2000032c

080029a0 <_write_r>:
 80029a0:	b538      	push	{r3, r4, r5, lr}
 80029a2:	4d07      	ldr	r5, [pc, #28]	@ (80029c0 <_write_r+0x20>)
 80029a4:	4604      	mov	r4, r0
 80029a6:	4608      	mov	r0, r1
 80029a8:	4611      	mov	r1, r2
 80029aa:	2200      	movs	r2, #0
 80029ac:	602a      	str	r2, [r5, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	f7ff f96a 	bl	8001c88 <_write>
 80029b4:	1c43      	adds	r3, r0, #1
 80029b6:	d102      	bne.n	80029be <_write_r+0x1e>
 80029b8:	682b      	ldr	r3, [r5, #0]
 80029ba:	b103      	cbz	r3, 80029be <_write_r+0x1e>
 80029bc:	6023      	str	r3, [r4, #0]
 80029be:	bd38      	pop	{r3, r4, r5, pc}
 80029c0:	2000032c 	.word	0x2000032c

080029c4 <__errno>:
 80029c4:	4b01      	ldr	r3, [pc, #4]	@ (80029cc <__errno+0x8>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000010 	.word	0x20000010

080029d0 <__libc_init_array>:
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	4d0d      	ldr	r5, [pc, #52]	@ (8002a08 <__libc_init_array+0x38>)
 80029d4:	4c0d      	ldr	r4, [pc, #52]	@ (8002a0c <__libc_init_array+0x3c>)
 80029d6:	1b64      	subs	r4, r4, r5
 80029d8:	10a4      	asrs	r4, r4, #2
 80029da:	2600      	movs	r6, #0
 80029dc:	42a6      	cmp	r6, r4
 80029de:	d109      	bne.n	80029f4 <__libc_init_array+0x24>
 80029e0:	4d0b      	ldr	r5, [pc, #44]	@ (8002a10 <__libc_init_array+0x40>)
 80029e2:	4c0c      	ldr	r4, [pc, #48]	@ (8002a14 <__libc_init_array+0x44>)
 80029e4:	f001 febc 	bl	8004760 <_init>
 80029e8:	1b64      	subs	r4, r4, r5
 80029ea:	10a4      	asrs	r4, r4, #2
 80029ec:	2600      	movs	r6, #0
 80029ee:	42a6      	cmp	r6, r4
 80029f0:	d105      	bne.n	80029fe <__libc_init_array+0x2e>
 80029f2:	bd70      	pop	{r4, r5, r6, pc}
 80029f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f8:	4798      	blx	r3
 80029fa:	3601      	adds	r6, #1
 80029fc:	e7ee      	b.n	80029dc <__libc_init_array+0xc>
 80029fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a02:	4798      	blx	r3
 8002a04:	3601      	adds	r6, #1
 8002a06:	e7f2      	b.n	80029ee <__libc_init_array+0x1e>
 8002a08:	08004af8 	.word	0x08004af8
 8002a0c:	08004af8 	.word	0x08004af8
 8002a10:	08004af8 	.word	0x08004af8
 8002a14:	08004afc 	.word	0x08004afc

08002a18 <__retarget_lock_init_recursive>:
 8002a18:	4770      	bx	lr

08002a1a <__retarget_lock_acquire_recursive>:
 8002a1a:	4770      	bx	lr

08002a1c <__retarget_lock_release_recursive>:
 8002a1c:	4770      	bx	lr

08002a1e <quorem>:
 8002a1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a22:	6903      	ldr	r3, [r0, #16]
 8002a24:	690c      	ldr	r4, [r1, #16]
 8002a26:	42a3      	cmp	r3, r4
 8002a28:	4607      	mov	r7, r0
 8002a2a:	db7e      	blt.n	8002b2a <quorem+0x10c>
 8002a2c:	3c01      	subs	r4, #1
 8002a2e:	f101 0814 	add.w	r8, r1, #20
 8002a32:	00a3      	lsls	r3, r4, #2
 8002a34:	f100 0514 	add.w	r5, r0, #20
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002a50:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a54:	d32e      	bcc.n	8002ab4 <quorem+0x96>
 8002a56:	f04f 0a00 	mov.w	sl, #0
 8002a5a:	46c4      	mov	ip, r8
 8002a5c:	46ae      	mov	lr, r5
 8002a5e:	46d3      	mov	fp, sl
 8002a60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002a64:	b298      	uxth	r0, r3
 8002a66:	fb06 a000 	mla	r0, r6, r0, sl
 8002a6a:	0c02      	lsrs	r2, r0, #16
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	fb06 2303 	mla	r3, r6, r3, r2
 8002a72:	f8de 2000 	ldr.w	r2, [lr]
 8002a76:	b280      	uxth	r0, r0
 8002a78:	b292      	uxth	r2, r2
 8002a7a:	1a12      	subs	r2, r2, r0
 8002a7c:	445a      	add	r2, fp
 8002a7e:	f8de 0000 	ldr.w	r0, [lr]
 8002a82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002a8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002a90:	b292      	uxth	r2, r2
 8002a92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002a96:	45e1      	cmp	r9, ip
 8002a98:	f84e 2b04 	str.w	r2, [lr], #4
 8002a9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002aa0:	d2de      	bcs.n	8002a60 <quorem+0x42>
 8002aa2:	9b00      	ldr	r3, [sp, #0]
 8002aa4:	58eb      	ldr	r3, [r5, r3]
 8002aa6:	b92b      	cbnz	r3, 8002ab4 <quorem+0x96>
 8002aa8:	9b01      	ldr	r3, [sp, #4]
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	429d      	cmp	r5, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	d32f      	bcc.n	8002b12 <quorem+0xf4>
 8002ab2:	613c      	str	r4, [r7, #16]
 8002ab4:	4638      	mov	r0, r7
 8002ab6:	f001 f979 	bl	8003dac <__mcmp>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	db25      	blt.n	8002b0a <quorem+0xec>
 8002abe:	4629      	mov	r1, r5
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f858 2b04 	ldr.w	r2, [r8], #4
 8002ac6:	f8d1 c000 	ldr.w	ip, [r1]
 8002aca:	fa1f fe82 	uxth.w	lr, r2
 8002ace:	fa1f f38c 	uxth.w	r3, ip
 8002ad2:	eba3 030e 	sub.w	r3, r3, lr
 8002ad6:	4403      	add	r3, r0
 8002ad8:	0c12      	lsrs	r2, r2, #16
 8002ada:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002ade:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ae8:	45c1      	cmp	r9, r8
 8002aea:	f841 3b04 	str.w	r3, [r1], #4
 8002aee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002af2:	d2e6      	bcs.n	8002ac2 <quorem+0xa4>
 8002af4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002af8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002afc:	b922      	cbnz	r2, 8002b08 <quorem+0xea>
 8002afe:	3b04      	subs	r3, #4
 8002b00:	429d      	cmp	r5, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	d30b      	bcc.n	8002b1e <quorem+0x100>
 8002b06:	613c      	str	r4, [r7, #16]
 8002b08:	3601      	adds	r6, #1
 8002b0a:	4630      	mov	r0, r6
 8002b0c:	b003      	add	sp, #12
 8002b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	3b04      	subs	r3, #4
 8002b16:	2a00      	cmp	r2, #0
 8002b18:	d1cb      	bne.n	8002ab2 <quorem+0x94>
 8002b1a:	3c01      	subs	r4, #1
 8002b1c:	e7c6      	b.n	8002aac <quorem+0x8e>
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	3b04      	subs	r3, #4
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	d1ef      	bne.n	8002b06 <quorem+0xe8>
 8002b26:	3c01      	subs	r4, #1
 8002b28:	e7ea      	b.n	8002b00 <quorem+0xe2>
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	e7ee      	b.n	8002b0c <quorem+0xee>
	...

08002b30 <_dtoa_r>:
 8002b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b34:	69c7      	ldr	r7, [r0, #28]
 8002b36:	b099      	sub	sp, #100	@ 0x64
 8002b38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002b3c:	ec55 4b10 	vmov	r4, r5, d0
 8002b40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8002b42:	9109      	str	r1, [sp, #36]	@ 0x24
 8002b44:	4683      	mov	fp, r0
 8002b46:	920e      	str	r2, [sp, #56]	@ 0x38
 8002b48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002b4a:	b97f      	cbnz	r7, 8002b6c <_dtoa_r+0x3c>
 8002b4c:	2010      	movs	r0, #16
 8002b4e:	f000 fdfd 	bl	800374c <malloc>
 8002b52:	4602      	mov	r2, r0
 8002b54:	f8cb 001c 	str.w	r0, [fp, #28]
 8002b58:	b920      	cbnz	r0, 8002b64 <_dtoa_r+0x34>
 8002b5a:	4ba7      	ldr	r3, [pc, #668]	@ (8002df8 <_dtoa_r+0x2c8>)
 8002b5c:	21ef      	movs	r1, #239	@ 0xef
 8002b5e:	48a7      	ldr	r0, [pc, #668]	@ (8002dfc <_dtoa_r+0x2cc>)
 8002b60:	f001 faf6 	bl	8004150 <__assert_func>
 8002b64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002b68:	6007      	str	r7, [r0, #0]
 8002b6a:	60c7      	str	r7, [r0, #12]
 8002b6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	b159      	cbz	r1, 8002b8c <_dtoa_r+0x5c>
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	604a      	str	r2, [r1, #4]
 8002b78:	2301      	movs	r3, #1
 8002b7a:	4093      	lsls	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
 8002b7e:	4658      	mov	r0, fp
 8002b80:	f000 feda 	bl	8003938 <_Bfree>
 8002b84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	1e2b      	subs	r3, r5, #0
 8002b8e:	bfb9      	ittee	lt
 8002b90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002b94:	9303      	strlt	r3, [sp, #12]
 8002b96:	2300      	movge	r3, #0
 8002b98:	6033      	strge	r3, [r6, #0]
 8002b9a:	9f03      	ldr	r7, [sp, #12]
 8002b9c:	4b98      	ldr	r3, [pc, #608]	@ (8002e00 <_dtoa_r+0x2d0>)
 8002b9e:	bfbc      	itt	lt
 8002ba0:	2201      	movlt	r2, #1
 8002ba2:	6032      	strlt	r2, [r6, #0]
 8002ba4:	43bb      	bics	r3, r7
 8002ba6:	d112      	bne.n	8002bce <_dtoa_r+0x9e>
 8002ba8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002baa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002bb4:	4323      	orrs	r3, r4
 8002bb6:	f000 854d 	beq.w	8003654 <_dtoa_r+0xb24>
 8002bba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002bbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8002e14 <_dtoa_r+0x2e4>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 854f 	beq.w	8003664 <_dtoa_r+0xb34>
 8002bc6:	f10a 0303 	add.w	r3, sl, #3
 8002bca:	f000 bd49 	b.w	8003660 <_dtoa_r+0xb30>
 8002bce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	ec51 0b17 	vmov	r0, r1, d7
 8002bd8:	2300      	movs	r3, #0
 8002bda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002bde:	f7fd ff73 	bl	8000ac8 <__aeabi_dcmpeq>
 8002be2:	4680      	mov	r8, r0
 8002be4:	b158      	cbz	r0, 8002bfe <_dtoa_r+0xce>
 8002be6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002be8:	2301      	movs	r3, #1
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002bee:	b113      	cbz	r3, 8002bf6 <_dtoa_r+0xc6>
 8002bf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002bf2:	4b84      	ldr	r3, [pc, #528]	@ (8002e04 <_dtoa_r+0x2d4>)
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8002e18 <_dtoa_r+0x2e8>
 8002bfa:	f000 bd33 	b.w	8003664 <_dtoa_r+0xb34>
 8002bfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002c02:	aa16      	add	r2, sp, #88	@ 0x58
 8002c04:	a917      	add	r1, sp, #92	@ 0x5c
 8002c06:	4658      	mov	r0, fp
 8002c08:	f001 f980 	bl	8003f0c <__d2b>
 8002c0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002c10:	4681      	mov	r9, r0
 8002c12:	2e00      	cmp	r6, #0
 8002c14:	d077      	beq.n	8002d06 <_dtoa_r+0x1d6>
 8002c16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002c18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8002c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002c24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002c28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002c2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002c30:	4619      	mov	r1, r3
 8002c32:	2200      	movs	r2, #0
 8002c34:	4b74      	ldr	r3, [pc, #464]	@ (8002e08 <_dtoa_r+0x2d8>)
 8002c36:	f7fd fb27 	bl	8000288 <__aeabi_dsub>
 8002c3a:	a369      	add	r3, pc, #420	@ (adr r3, 8002de0 <_dtoa_r+0x2b0>)
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f7fd fcda 	bl	80005f8 <__aeabi_dmul>
 8002c44:	a368      	add	r3, pc, #416	@ (adr r3, 8002de8 <_dtoa_r+0x2b8>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fb1f 	bl	800028c <__adddf3>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	4630      	mov	r0, r6
 8002c52:	460d      	mov	r5, r1
 8002c54:	f7fd fc66 	bl	8000524 <__aeabi_i2d>
 8002c58:	a365      	add	r3, pc, #404	@ (adr r3, 8002df0 <_dtoa_r+0x2c0>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd fccb 	bl	80005f8 <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4620      	mov	r0, r4
 8002c68:	4629      	mov	r1, r5
 8002c6a:	f7fd fb0f 	bl	800028c <__adddf3>
 8002c6e:	4604      	mov	r4, r0
 8002c70:	460d      	mov	r5, r1
 8002c72:	f7fd ff71 	bl	8000b58 <__aeabi_d2iz>
 8002c76:	2200      	movs	r2, #0
 8002c78:	4607      	mov	r7, r0
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	4629      	mov	r1, r5
 8002c80:	f7fd ff2c 	bl	8000adc <__aeabi_dcmplt>
 8002c84:	b140      	cbz	r0, 8002c98 <_dtoa_r+0x168>
 8002c86:	4638      	mov	r0, r7
 8002c88:	f7fd fc4c 	bl	8000524 <__aeabi_i2d>
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	462b      	mov	r3, r5
 8002c90:	f7fd ff1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c94:	b900      	cbnz	r0, 8002c98 <_dtoa_r+0x168>
 8002c96:	3f01      	subs	r7, #1
 8002c98:	2f16      	cmp	r7, #22
 8002c9a:	d851      	bhi.n	8002d40 <_dtoa_r+0x210>
 8002c9c:	4b5b      	ldr	r3, [pc, #364]	@ (8002e0c <_dtoa_r+0x2dc>)
 8002c9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002caa:	f7fd ff17 	bl	8000adc <__aeabi_dcmplt>
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d048      	beq.n	8002d44 <_dtoa_r+0x214>
 8002cb2:	3f01      	subs	r7, #1
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8002cb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002cba:	1b9b      	subs	r3, r3, r6
 8002cbc:	1e5a      	subs	r2, r3, #1
 8002cbe:	bf44      	itt	mi
 8002cc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8002cc4:	2300      	movmi	r3, #0
 8002cc6:	9208      	str	r2, [sp, #32]
 8002cc8:	bf54      	ite	pl
 8002cca:	f04f 0800 	movpl.w	r8, #0
 8002cce:	9308      	strmi	r3, [sp, #32]
 8002cd0:	2f00      	cmp	r7, #0
 8002cd2:	db39      	blt.n	8002d48 <_dtoa_r+0x218>
 8002cd4:	9b08      	ldr	r3, [sp, #32]
 8002cd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002cd8:	443b      	add	r3, r7
 8002cda:	9308      	str	r3, [sp, #32]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ce2:	2b09      	cmp	r3, #9
 8002ce4:	d864      	bhi.n	8002db0 <_dtoa_r+0x280>
 8002ce6:	2b05      	cmp	r3, #5
 8002ce8:	bfc4      	itt	gt
 8002cea:	3b04      	subgt	r3, #4
 8002cec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8002cee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002cf0:	f1a3 0302 	sub.w	r3, r3, #2
 8002cf4:	bfcc      	ite	gt
 8002cf6:	2400      	movgt	r4, #0
 8002cf8:	2401      	movle	r4, #1
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d863      	bhi.n	8002dc6 <_dtoa_r+0x296>
 8002cfe:	e8df f003 	tbb	[pc, r3]
 8002d02:	372a      	.short	0x372a
 8002d04:	5535      	.short	0x5535
 8002d06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8002d0a:	441e      	add	r6, r3
 8002d0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002d10:	2b20      	cmp	r3, #32
 8002d12:	bfc1      	itttt	gt
 8002d14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002d18:	409f      	lslgt	r7, r3
 8002d1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002d1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002d22:	bfd6      	itet	le
 8002d24:	f1c3 0320 	rsble	r3, r3, #32
 8002d28:	ea47 0003 	orrgt.w	r0, r7, r3
 8002d2c:	fa04 f003 	lslle.w	r0, r4, r3
 8002d30:	f7fd fbe8 	bl	8000504 <__aeabi_ui2d>
 8002d34:	2201      	movs	r2, #1
 8002d36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002d3a:	3e01      	subs	r6, #1
 8002d3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8002d3e:	e777      	b.n	8002c30 <_dtoa_r+0x100>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e7b8      	b.n	8002cb6 <_dtoa_r+0x186>
 8002d44:	9012      	str	r0, [sp, #72]	@ 0x48
 8002d46:	e7b7      	b.n	8002cb8 <_dtoa_r+0x188>
 8002d48:	427b      	negs	r3, r7
 8002d4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	eba8 0807 	sub.w	r8, r8, r7
 8002d52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002d54:	e7c4      	b.n	8002ce0 <_dtoa_r+0x1b0>
 8002d56:	2300      	movs	r3, #0
 8002d58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	dc35      	bgt.n	8002dcc <_dtoa_r+0x29c>
 8002d60:	2301      	movs	r3, #1
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	9307      	str	r3, [sp, #28]
 8002d66:	461a      	mov	r2, r3
 8002d68:	920e      	str	r2, [sp, #56]	@ 0x38
 8002d6a:	e00b      	b.n	8002d84 <_dtoa_r+0x254>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e7f3      	b.n	8002d58 <_dtoa_r+0x228>
 8002d70:	2300      	movs	r3, #0
 8002d72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	9307      	str	r3, [sp, #28]
 8002d80:	bfb8      	it	lt
 8002d82:	2301      	movlt	r3, #1
 8002d84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002d88:	2100      	movs	r1, #0
 8002d8a:	2204      	movs	r2, #4
 8002d8c:	f102 0514 	add.w	r5, r2, #20
 8002d90:	429d      	cmp	r5, r3
 8002d92:	d91f      	bls.n	8002dd4 <_dtoa_r+0x2a4>
 8002d94:	6041      	str	r1, [r0, #4]
 8002d96:	4658      	mov	r0, fp
 8002d98:	f000 fd8e 	bl	80038b8 <_Balloc>
 8002d9c:	4682      	mov	sl, r0
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d13c      	bne.n	8002e1c <_dtoa_r+0x2ec>
 8002da2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <_dtoa_r+0x2e0>)
 8002da4:	4602      	mov	r2, r0
 8002da6:	f240 11af 	movw	r1, #431	@ 0x1af
 8002daa:	e6d8      	b.n	8002b5e <_dtoa_r+0x2e>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e7e0      	b.n	8002d72 <_dtoa_r+0x242>
 8002db0:	2401      	movs	r4, #1
 8002db2:	2300      	movs	r3, #0
 8002db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002db6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	9307      	str	r3, [sp, #28]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2312      	movs	r3, #18
 8002dc4:	e7d0      	b.n	8002d68 <_dtoa_r+0x238>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002dca:	e7f5      	b.n	8002db8 <_dtoa_r+0x288>
 8002dcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	9307      	str	r3, [sp, #28]
 8002dd2:	e7d7      	b.n	8002d84 <_dtoa_r+0x254>
 8002dd4:	3101      	adds	r1, #1
 8002dd6:	0052      	lsls	r2, r2, #1
 8002dd8:	e7d8      	b.n	8002d8c <_dtoa_r+0x25c>
 8002dda:	bf00      	nop
 8002ddc:	f3af 8000 	nop.w
 8002de0:	636f4361 	.word	0x636f4361
 8002de4:	3fd287a7 	.word	0x3fd287a7
 8002de8:	8b60c8b3 	.word	0x8b60c8b3
 8002dec:	3fc68a28 	.word	0x3fc68a28
 8002df0:	509f79fb 	.word	0x509f79fb
 8002df4:	3fd34413 	.word	0x3fd34413
 8002df8:	080047c0 	.word	0x080047c0
 8002dfc:	080047d7 	.word	0x080047d7
 8002e00:	7ff00000 	.word	0x7ff00000
 8002e04:	08004790 	.word	0x08004790
 8002e08:	3ff80000 	.word	0x3ff80000
 8002e0c:	080048d0 	.word	0x080048d0
 8002e10:	0800482f 	.word	0x0800482f
 8002e14:	080047bc 	.word	0x080047bc
 8002e18:	0800478f 	.word	0x0800478f
 8002e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002e20:	6018      	str	r0, [r3, #0]
 8002e22:	9b07      	ldr	r3, [sp, #28]
 8002e24:	2b0e      	cmp	r3, #14
 8002e26:	f200 80a4 	bhi.w	8002f72 <_dtoa_r+0x442>
 8002e2a:	2c00      	cmp	r4, #0
 8002e2c:	f000 80a1 	beq.w	8002f72 <_dtoa_r+0x442>
 8002e30:	2f00      	cmp	r7, #0
 8002e32:	dd33      	ble.n	8002e9c <_dtoa_r+0x36c>
 8002e34:	4bad      	ldr	r3, [pc, #692]	@ (80030ec <_dtoa_r+0x5bc>)
 8002e36:	f007 020f 	and.w	r2, r7, #15
 8002e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e3e:	ed93 7b00 	vldr	d7, [r3]
 8002e42:	05f8      	lsls	r0, r7, #23
 8002e44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002e48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8002e4c:	d516      	bpl.n	8002e7c <_dtoa_r+0x34c>
 8002e4e:	4ba8      	ldr	r3, [pc, #672]	@ (80030f0 <_dtoa_r+0x5c0>)
 8002e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002e54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e58:	f7fd fcf8 	bl	800084c <__aeabi_ddiv>
 8002e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e60:	f004 040f 	and.w	r4, r4, #15
 8002e64:	2603      	movs	r6, #3
 8002e66:	4da2      	ldr	r5, [pc, #648]	@ (80030f0 <_dtoa_r+0x5c0>)
 8002e68:	b954      	cbnz	r4, 8002e80 <_dtoa_r+0x350>
 8002e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e72:	f7fd fceb 	bl	800084c <__aeabi_ddiv>
 8002e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e7a:	e028      	b.n	8002ece <_dtoa_r+0x39e>
 8002e7c:	2602      	movs	r6, #2
 8002e7e:	e7f2      	b.n	8002e66 <_dtoa_r+0x336>
 8002e80:	07e1      	lsls	r1, r4, #31
 8002e82:	d508      	bpl.n	8002e96 <_dtoa_r+0x366>
 8002e84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002e8c:	f7fd fbb4 	bl	80005f8 <__aeabi_dmul>
 8002e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e94:	3601      	adds	r6, #1
 8002e96:	1064      	asrs	r4, r4, #1
 8002e98:	3508      	adds	r5, #8
 8002e9a:	e7e5      	b.n	8002e68 <_dtoa_r+0x338>
 8002e9c:	f000 80d2 	beq.w	8003044 <_dtoa_r+0x514>
 8002ea0:	427c      	negs	r4, r7
 8002ea2:	4b92      	ldr	r3, [pc, #584]	@ (80030ec <_dtoa_r+0x5bc>)
 8002ea4:	4d92      	ldr	r5, [pc, #584]	@ (80030f0 <_dtoa_r+0x5c0>)
 8002ea6:	f004 020f 	and.w	r2, r4, #15
 8002eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002eb6:	f7fd fb9f 	bl	80005f8 <__aeabi_dmul>
 8002eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ebe:	1124      	asrs	r4, r4, #4
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2602      	movs	r6, #2
 8002ec4:	2c00      	cmp	r4, #0
 8002ec6:	f040 80b2 	bne.w	800302e <_dtoa_r+0x4fe>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1d3      	bne.n	8002e76 <_dtoa_r+0x346>
 8002ece:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002ed0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80b7 	beq.w	8003048 <_dtoa_r+0x518>
 8002eda:	4b86      	ldr	r3, [pc, #536]	@ (80030f4 <_dtoa_r+0x5c4>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	4620      	mov	r0, r4
 8002ee0:	4629      	mov	r1, r5
 8002ee2:	f7fd fdfb 	bl	8000adc <__aeabi_dcmplt>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	f000 80ae 	beq.w	8003048 <_dtoa_r+0x518>
 8002eec:	9b07      	ldr	r3, [sp, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 80aa 	beq.w	8003048 <_dtoa_r+0x518>
 8002ef4:	9b00      	ldr	r3, [sp, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	dd37      	ble.n	8002f6a <_dtoa_r+0x43a>
 8002efa:	1e7b      	subs	r3, r7, #1
 8002efc:	9304      	str	r3, [sp, #16]
 8002efe:	4620      	mov	r0, r4
 8002f00:	4b7d      	ldr	r3, [pc, #500]	@ (80030f8 <_dtoa_r+0x5c8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd fb77 	bl	80005f8 <__aeabi_dmul>
 8002f0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f0e:	9c00      	ldr	r4, [sp, #0]
 8002f10:	3601      	adds	r6, #1
 8002f12:	4630      	mov	r0, r6
 8002f14:	f7fd fb06 	bl	8000524 <__aeabi_i2d>
 8002f18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f1c:	f7fd fb6c 	bl	80005f8 <__aeabi_dmul>
 8002f20:	4b76      	ldr	r3, [pc, #472]	@ (80030fc <_dtoa_r+0x5cc>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	f7fd f9b2 	bl	800028c <__adddf3>
 8002f28:	4605      	mov	r5, r0
 8002f2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8002f2e:	2c00      	cmp	r4, #0
 8002f30:	f040 808d 	bne.w	800304e <_dtoa_r+0x51e>
 8002f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f38:	4b71      	ldr	r3, [pc, #452]	@ (8003100 <_dtoa_r+0x5d0>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f7fd f9a4 	bl	8000288 <__aeabi_dsub>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f48:	462a      	mov	r2, r5
 8002f4a:	4633      	mov	r3, r6
 8002f4c:	f7fd fde4 	bl	8000b18 <__aeabi_dcmpgt>
 8002f50:	2800      	cmp	r0, #0
 8002f52:	f040 828b 	bne.w	800346c <_dtoa_r+0x93c>
 8002f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f5a:	462a      	mov	r2, r5
 8002f5c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8002f60:	f7fd fdbc 	bl	8000adc <__aeabi_dcmplt>
 8002f64:	2800      	cmp	r0, #0
 8002f66:	f040 8128 	bne.w	80031ba <_dtoa_r+0x68a>
 8002f6a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8002f6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002f72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f2c0 815a 	blt.w	800322e <_dtoa_r+0x6fe>
 8002f7a:	2f0e      	cmp	r7, #14
 8002f7c:	f300 8157 	bgt.w	800322e <_dtoa_r+0x6fe>
 8002f80:	4b5a      	ldr	r3, [pc, #360]	@ (80030ec <_dtoa_r+0x5bc>)
 8002f82:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002f86:	ed93 7b00 	vldr	d7, [r3]
 8002f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	ed8d 7b00 	vstr	d7, [sp]
 8002f92:	da03      	bge.n	8002f9c <_dtoa_r+0x46c>
 8002f94:	9b07      	ldr	r3, [sp, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f340 8101 	ble.w	800319e <_dtoa_r+0x66e>
 8002f9c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002fa0:	4656      	mov	r6, sl
 8002fa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fa6:	4620      	mov	r0, r4
 8002fa8:	4629      	mov	r1, r5
 8002faa:	f7fd fc4f 	bl	800084c <__aeabi_ddiv>
 8002fae:	f7fd fdd3 	bl	8000b58 <__aeabi_d2iz>
 8002fb2:	4680      	mov	r8, r0
 8002fb4:	f7fd fab6 	bl	8000524 <__aeabi_i2d>
 8002fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fbc:	f7fd fb1c 	bl	80005f8 <__aeabi_dmul>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8002fcc:	f7fd f95c 	bl	8000288 <__aeabi_dsub>
 8002fd0:	f806 4b01 	strb.w	r4, [r6], #1
 8002fd4:	9d07      	ldr	r5, [sp, #28]
 8002fd6:	eba6 040a 	sub.w	r4, r6, sl
 8002fda:	42a5      	cmp	r5, r4
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	f040 8117 	bne.w	8003212 <_dtoa_r+0x6e2>
 8002fe4:	f7fd f952 	bl	800028c <__adddf3>
 8002fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fec:	4604      	mov	r4, r0
 8002fee:	460d      	mov	r5, r1
 8002ff0:	f7fd fd92 	bl	8000b18 <__aeabi_dcmpgt>
 8002ff4:	2800      	cmp	r0, #0
 8002ff6:	f040 80f9 	bne.w	80031ec <_dtoa_r+0x6bc>
 8002ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002ffe:	4620      	mov	r0, r4
 8003000:	4629      	mov	r1, r5
 8003002:	f7fd fd61 	bl	8000ac8 <__aeabi_dcmpeq>
 8003006:	b118      	cbz	r0, 8003010 <_dtoa_r+0x4e0>
 8003008:	f018 0f01 	tst.w	r8, #1
 800300c:	f040 80ee 	bne.w	80031ec <_dtoa_r+0x6bc>
 8003010:	4649      	mov	r1, r9
 8003012:	4658      	mov	r0, fp
 8003014:	f000 fc90 	bl	8003938 <_Bfree>
 8003018:	2300      	movs	r3, #0
 800301a:	7033      	strb	r3, [r6, #0]
 800301c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800301e:	3701      	adds	r7, #1
 8003020:	601f      	str	r7, [r3, #0]
 8003022:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 831d 	beq.w	8003664 <_dtoa_r+0xb34>
 800302a:	601e      	str	r6, [r3, #0]
 800302c:	e31a      	b.n	8003664 <_dtoa_r+0xb34>
 800302e:	07e2      	lsls	r2, r4, #31
 8003030:	d505      	bpl.n	800303e <_dtoa_r+0x50e>
 8003032:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003036:	f7fd fadf 	bl	80005f8 <__aeabi_dmul>
 800303a:	3601      	adds	r6, #1
 800303c:	2301      	movs	r3, #1
 800303e:	1064      	asrs	r4, r4, #1
 8003040:	3508      	adds	r5, #8
 8003042:	e73f      	b.n	8002ec4 <_dtoa_r+0x394>
 8003044:	2602      	movs	r6, #2
 8003046:	e742      	b.n	8002ece <_dtoa_r+0x39e>
 8003048:	9c07      	ldr	r4, [sp, #28]
 800304a:	9704      	str	r7, [sp, #16]
 800304c:	e761      	b.n	8002f12 <_dtoa_r+0x3e2>
 800304e:	4b27      	ldr	r3, [pc, #156]	@ (80030ec <_dtoa_r+0x5bc>)
 8003050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003052:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003056:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800305a:	4454      	add	r4, sl
 800305c:	2900      	cmp	r1, #0
 800305e:	d053      	beq.n	8003108 <_dtoa_r+0x5d8>
 8003060:	4928      	ldr	r1, [pc, #160]	@ (8003104 <_dtoa_r+0x5d4>)
 8003062:	2000      	movs	r0, #0
 8003064:	f7fd fbf2 	bl	800084c <__aeabi_ddiv>
 8003068:	4633      	mov	r3, r6
 800306a:	462a      	mov	r2, r5
 800306c:	f7fd f90c 	bl	8000288 <__aeabi_dsub>
 8003070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003074:	4656      	mov	r6, sl
 8003076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800307a:	f7fd fd6d 	bl	8000b58 <__aeabi_d2iz>
 800307e:	4605      	mov	r5, r0
 8003080:	f7fd fa50 	bl	8000524 <__aeabi_i2d>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800308c:	f7fd f8fc 	bl	8000288 <__aeabi_dsub>
 8003090:	3530      	adds	r5, #48	@ 0x30
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800309a:	f806 5b01 	strb.w	r5, [r6], #1
 800309e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80030a2:	f7fd fd1b 	bl	8000adc <__aeabi_dcmplt>
 80030a6:	2800      	cmp	r0, #0
 80030a8:	d171      	bne.n	800318e <_dtoa_r+0x65e>
 80030aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80030ae:	4911      	ldr	r1, [pc, #68]	@ (80030f4 <_dtoa_r+0x5c4>)
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7fd f8e9 	bl	8000288 <__aeabi_dsub>
 80030b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80030ba:	f7fd fd0f 	bl	8000adc <__aeabi_dcmplt>
 80030be:	2800      	cmp	r0, #0
 80030c0:	f040 8095 	bne.w	80031ee <_dtoa_r+0x6be>
 80030c4:	42a6      	cmp	r6, r4
 80030c6:	f43f af50 	beq.w	8002f6a <_dtoa_r+0x43a>
 80030ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80030ce:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <_dtoa_r+0x5c8>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	f7fd fa91 	bl	80005f8 <__aeabi_dmul>
 80030d6:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <_dtoa_r+0x5c8>)
 80030d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80030dc:	2200      	movs	r2, #0
 80030de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030e2:	f7fd fa89 	bl	80005f8 <__aeabi_dmul>
 80030e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80030ea:	e7c4      	b.n	8003076 <_dtoa_r+0x546>
 80030ec:	080048d0 	.word	0x080048d0
 80030f0:	080048a8 	.word	0x080048a8
 80030f4:	3ff00000 	.word	0x3ff00000
 80030f8:	40240000 	.word	0x40240000
 80030fc:	401c0000 	.word	0x401c0000
 8003100:	40140000 	.word	0x40140000
 8003104:	3fe00000 	.word	0x3fe00000
 8003108:	4631      	mov	r1, r6
 800310a:	4628      	mov	r0, r5
 800310c:	f7fd fa74 	bl	80005f8 <__aeabi_dmul>
 8003110:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003114:	9415      	str	r4, [sp, #84]	@ 0x54
 8003116:	4656      	mov	r6, sl
 8003118:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800311c:	f7fd fd1c 	bl	8000b58 <__aeabi_d2iz>
 8003120:	4605      	mov	r5, r0
 8003122:	f7fd f9ff 	bl	8000524 <__aeabi_i2d>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800312e:	f7fd f8ab 	bl	8000288 <__aeabi_dsub>
 8003132:	3530      	adds	r5, #48	@ 0x30
 8003134:	f806 5b01 	strb.w	r5, [r6], #1
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	42a6      	cmp	r6, r4
 800313e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	d124      	bne.n	8003192 <_dtoa_r+0x662>
 8003148:	4bac      	ldr	r3, [pc, #688]	@ (80033fc <_dtoa_r+0x8cc>)
 800314a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800314e:	f7fd f89d 	bl	800028c <__adddf3>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800315a:	f7fd fcdd 	bl	8000b18 <__aeabi_dcmpgt>
 800315e:	2800      	cmp	r0, #0
 8003160:	d145      	bne.n	80031ee <_dtoa_r+0x6be>
 8003162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003166:	49a5      	ldr	r1, [pc, #660]	@ (80033fc <_dtoa_r+0x8cc>)
 8003168:	2000      	movs	r0, #0
 800316a:	f7fd f88d 	bl	8000288 <__aeabi_dsub>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003176:	f7fd fcb1 	bl	8000adc <__aeabi_dcmplt>
 800317a:	2800      	cmp	r0, #0
 800317c:	f43f aef5 	beq.w	8002f6a <_dtoa_r+0x43a>
 8003180:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8003182:	1e73      	subs	r3, r6, #1
 8003184:	9315      	str	r3, [sp, #84]	@ 0x54
 8003186:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800318a:	2b30      	cmp	r3, #48	@ 0x30
 800318c:	d0f8      	beq.n	8003180 <_dtoa_r+0x650>
 800318e:	9f04      	ldr	r7, [sp, #16]
 8003190:	e73e      	b.n	8003010 <_dtoa_r+0x4e0>
 8003192:	4b9b      	ldr	r3, [pc, #620]	@ (8003400 <_dtoa_r+0x8d0>)
 8003194:	f7fd fa30 	bl	80005f8 <__aeabi_dmul>
 8003198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800319c:	e7bc      	b.n	8003118 <_dtoa_r+0x5e8>
 800319e:	d10c      	bne.n	80031ba <_dtoa_r+0x68a>
 80031a0:	4b98      	ldr	r3, [pc, #608]	@ (8003404 <_dtoa_r+0x8d4>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80031a8:	f7fd fa26 	bl	80005f8 <__aeabi_dmul>
 80031ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031b0:	f7fd fca8 	bl	8000b04 <__aeabi_dcmpge>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	f000 8157 	beq.w	8003468 <_dtoa_r+0x938>
 80031ba:	2400      	movs	r4, #0
 80031bc:	4625      	mov	r5, r4
 80031be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80031c0:	43db      	mvns	r3, r3
 80031c2:	9304      	str	r3, [sp, #16]
 80031c4:	4656      	mov	r6, sl
 80031c6:	2700      	movs	r7, #0
 80031c8:	4621      	mov	r1, r4
 80031ca:	4658      	mov	r0, fp
 80031cc:	f000 fbb4 	bl	8003938 <_Bfree>
 80031d0:	2d00      	cmp	r5, #0
 80031d2:	d0dc      	beq.n	800318e <_dtoa_r+0x65e>
 80031d4:	b12f      	cbz	r7, 80031e2 <_dtoa_r+0x6b2>
 80031d6:	42af      	cmp	r7, r5
 80031d8:	d003      	beq.n	80031e2 <_dtoa_r+0x6b2>
 80031da:	4639      	mov	r1, r7
 80031dc:	4658      	mov	r0, fp
 80031de:	f000 fbab 	bl	8003938 <_Bfree>
 80031e2:	4629      	mov	r1, r5
 80031e4:	4658      	mov	r0, fp
 80031e6:	f000 fba7 	bl	8003938 <_Bfree>
 80031ea:	e7d0      	b.n	800318e <_dtoa_r+0x65e>
 80031ec:	9704      	str	r7, [sp, #16]
 80031ee:	4633      	mov	r3, r6
 80031f0:	461e      	mov	r6, r3
 80031f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80031f6:	2a39      	cmp	r2, #57	@ 0x39
 80031f8:	d107      	bne.n	800320a <_dtoa_r+0x6da>
 80031fa:	459a      	cmp	sl, r3
 80031fc:	d1f8      	bne.n	80031f0 <_dtoa_r+0x6c0>
 80031fe:	9a04      	ldr	r2, [sp, #16]
 8003200:	3201      	adds	r2, #1
 8003202:	9204      	str	r2, [sp, #16]
 8003204:	2230      	movs	r2, #48	@ 0x30
 8003206:	f88a 2000 	strb.w	r2, [sl]
 800320a:	781a      	ldrb	r2, [r3, #0]
 800320c:	3201      	adds	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e7bd      	b.n	800318e <_dtoa_r+0x65e>
 8003212:	4b7b      	ldr	r3, [pc, #492]	@ (8003400 <_dtoa_r+0x8d0>)
 8003214:	2200      	movs	r2, #0
 8003216:	f7fd f9ef 	bl	80005f8 <__aeabi_dmul>
 800321a:	2200      	movs	r2, #0
 800321c:	2300      	movs	r3, #0
 800321e:	4604      	mov	r4, r0
 8003220:	460d      	mov	r5, r1
 8003222:	f7fd fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 8003226:	2800      	cmp	r0, #0
 8003228:	f43f aebb 	beq.w	8002fa2 <_dtoa_r+0x472>
 800322c:	e6f0      	b.n	8003010 <_dtoa_r+0x4e0>
 800322e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003230:	2a00      	cmp	r2, #0
 8003232:	f000 80db 	beq.w	80033ec <_dtoa_r+0x8bc>
 8003236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003238:	2a01      	cmp	r2, #1
 800323a:	f300 80bf 	bgt.w	80033bc <_dtoa_r+0x88c>
 800323e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003240:	2a00      	cmp	r2, #0
 8003242:	f000 80b7 	beq.w	80033b4 <_dtoa_r+0x884>
 8003246:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800324a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800324c:	4646      	mov	r6, r8
 800324e:	9a08      	ldr	r2, [sp, #32]
 8003250:	2101      	movs	r1, #1
 8003252:	441a      	add	r2, r3
 8003254:	4658      	mov	r0, fp
 8003256:	4498      	add	r8, r3
 8003258:	9208      	str	r2, [sp, #32]
 800325a:	f000 fc21 	bl	8003aa0 <__i2b>
 800325e:	4605      	mov	r5, r0
 8003260:	b15e      	cbz	r6, 800327a <_dtoa_r+0x74a>
 8003262:	9b08      	ldr	r3, [sp, #32]
 8003264:	2b00      	cmp	r3, #0
 8003266:	dd08      	ble.n	800327a <_dtoa_r+0x74a>
 8003268:	42b3      	cmp	r3, r6
 800326a:	9a08      	ldr	r2, [sp, #32]
 800326c:	bfa8      	it	ge
 800326e:	4633      	movge	r3, r6
 8003270:	eba8 0803 	sub.w	r8, r8, r3
 8003274:	1af6      	subs	r6, r6, r3
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	9308      	str	r3, [sp, #32]
 800327a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800327c:	b1f3      	cbz	r3, 80032bc <_dtoa_r+0x78c>
 800327e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 80b7 	beq.w	80033f4 <_dtoa_r+0x8c4>
 8003286:	b18c      	cbz	r4, 80032ac <_dtoa_r+0x77c>
 8003288:	4629      	mov	r1, r5
 800328a:	4622      	mov	r2, r4
 800328c:	4658      	mov	r0, fp
 800328e:	f000 fcc7 	bl	8003c20 <__pow5mult>
 8003292:	464a      	mov	r2, r9
 8003294:	4601      	mov	r1, r0
 8003296:	4605      	mov	r5, r0
 8003298:	4658      	mov	r0, fp
 800329a:	f000 fc17 	bl	8003acc <__multiply>
 800329e:	4649      	mov	r1, r9
 80032a0:	9004      	str	r0, [sp, #16]
 80032a2:	4658      	mov	r0, fp
 80032a4:	f000 fb48 	bl	8003938 <_Bfree>
 80032a8:	9b04      	ldr	r3, [sp, #16]
 80032aa:	4699      	mov	r9, r3
 80032ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80032ae:	1b1a      	subs	r2, r3, r4
 80032b0:	d004      	beq.n	80032bc <_dtoa_r+0x78c>
 80032b2:	4649      	mov	r1, r9
 80032b4:	4658      	mov	r0, fp
 80032b6:	f000 fcb3 	bl	8003c20 <__pow5mult>
 80032ba:	4681      	mov	r9, r0
 80032bc:	2101      	movs	r1, #1
 80032be:	4658      	mov	r0, fp
 80032c0:	f000 fbee 	bl	8003aa0 <__i2b>
 80032c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80032c6:	4604      	mov	r4, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 81cf 	beq.w	800366c <_dtoa_r+0xb3c>
 80032ce:	461a      	mov	r2, r3
 80032d0:	4601      	mov	r1, r0
 80032d2:	4658      	mov	r0, fp
 80032d4:	f000 fca4 	bl	8003c20 <__pow5mult>
 80032d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032da:	2b01      	cmp	r3, #1
 80032dc:	4604      	mov	r4, r0
 80032de:	f300 8095 	bgt.w	800340c <_dtoa_r+0x8dc>
 80032e2:	9b02      	ldr	r3, [sp, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 8087 	bne.w	80033f8 <_dtoa_r+0x8c8>
 80032ea:	9b03      	ldr	r3, [sp, #12]
 80032ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f040 8089 	bne.w	8003408 <_dtoa_r+0x8d8>
 80032f6:	9b03      	ldr	r3, [sp, #12]
 80032f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80032fc:	0d1b      	lsrs	r3, r3, #20
 80032fe:	051b      	lsls	r3, r3, #20
 8003300:	b12b      	cbz	r3, 800330e <_dtoa_r+0x7de>
 8003302:	9b08      	ldr	r3, [sp, #32]
 8003304:	3301      	adds	r3, #1
 8003306:	9308      	str	r3, [sp, #32]
 8003308:	f108 0801 	add.w	r8, r8, #1
 800330c:	2301      	movs	r3, #1
 800330e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003310:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 81b0 	beq.w	8003678 <_dtoa_r+0xb48>
 8003318:	6923      	ldr	r3, [r4, #16]
 800331a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800331e:	6918      	ldr	r0, [r3, #16]
 8003320:	f000 fb72 	bl	8003a08 <__hi0bits>
 8003324:	f1c0 0020 	rsb	r0, r0, #32
 8003328:	9b08      	ldr	r3, [sp, #32]
 800332a:	4418      	add	r0, r3
 800332c:	f010 001f 	ands.w	r0, r0, #31
 8003330:	d077      	beq.n	8003422 <_dtoa_r+0x8f2>
 8003332:	f1c0 0320 	rsb	r3, r0, #32
 8003336:	2b04      	cmp	r3, #4
 8003338:	dd6b      	ble.n	8003412 <_dtoa_r+0x8e2>
 800333a:	9b08      	ldr	r3, [sp, #32]
 800333c:	f1c0 001c 	rsb	r0, r0, #28
 8003340:	4403      	add	r3, r0
 8003342:	4480      	add	r8, r0
 8003344:	4406      	add	r6, r0
 8003346:	9308      	str	r3, [sp, #32]
 8003348:	f1b8 0f00 	cmp.w	r8, #0
 800334c:	dd05      	ble.n	800335a <_dtoa_r+0x82a>
 800334e:	4649      	mov	r1, r9
 8003350:	4642      	mov	r2, r8
 8003352:	4658      	mov	r0, fp
 8003354:	f000 fcbe 	bl	8003cd4 <__lshift>
 8003358:	4681      	mov	r9, r0
 800335a:	9b08      	ldr	r3, [sp, #32]
 800335c:	2b00      	cmp	r3, #0
 800335e:	dd05      	ble.n	800336c <_dtoa_r+0x83c>
 8003360:	4621      	mov	r1, r4
 8003362:	461a      	mov	r2, r3
 8003364:	4658      	mov	r0, fp
 8003366:	f000 fcb5 	bl	8003cd4 <__lshift>
 800336a:	4604      	mov	r4, r0
 800336c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800336e:	2b00      	cmp	r3, #0
 8003370:	d059      	beq.n	8003426 <_dtoa_r+0x8f6>
 8003372:	4621      	mov	r1, r4
 8003374:	4648      	mov	r0, r9
 8003376:	f000 fd19 	bl	8003dac <__mcmp>
 800337a:	2800      	cmp	r0, #0
 800337c:	da53      	bge.n	8003426 <_dtoa_r+0x8f6>
 800337e:	1e7b      	subs	r3, r7, #1
 8003380:	9304      	str	r3, [sp, #16]
 8003382:	4649      	mov	r1, r9
 8003384:	2300      	movs	r3, #0
 8003386:	220a      	movs	r2, #10
 8003388:	4658      	mov	r0, fp
 800338a:	f000 faf7 	bl	800397c <__multadd>
 800338e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003390:	4681      	mov	r9, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8172 	beq.w	800367c <_dtoa_r+0xb4c>
 8003398:	2300      	movs	r3, #0
 800339a:	4629      	mov	r1, r5
 800339c:	220a      	movs	r2, #10
 800339e:	4658      	mov	r0, fp
 80033a0:	f000 faec 	bl	800397c <__multadd>
 80033a4:	9b00      	ldr	r3, [sp, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	4605      	mov	r5, r0
 80033aa:	dc67      	bgt.n	800347c <_dtoa_r+0x94c>
 80033ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	dc41      	bgt.n	8003436 <_dtoa_r+0x906>
 80033b2:	e063      	b.n	800347c <_dtoa_r+0x94c>
 80033b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80033b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80033ba:	e746      	b.n	800324a <_dtoa_r+0x71a>
 80033bc:	9b07      	ldr	r3, [sp, #28]
 80033be:	1e5c      	subs	r4, r3, #1
 80033c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80033c2:	42a3      	cmp	r3, r4
 80033c4:	bfbf      	itttt	lt
 80033c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80033c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80033ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80033cc:	1ae3      	sublt	r3, r4, r3
 80033ce:	bfb4      	ite	lt
 80033d0:	18d2      	addlt	r2, r2, r3
 80033d2:	1b1c      	subge	r4, r3, r4
 80033d4:	9b07      	ldr	r3, [sp, #28]
 80033d6:	bfbc      	itt	lt
 80033d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80033da:	2400      	movlt	r4, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	bfb5      	itete	lt
 80033e0:	eba8 0603 	sublt.w	r6, r8, r3
 80033e4:	9b07      	ldrge	r3, [sp, #28]
 80033e6:	2300      	movlt	r3, #0
 80033e8:	4646      	movge	r6, r8
 80033ea:	e730      	b.n	800324e <_dtoa_r+0x71e>
 80033ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80033ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80033f0:	4646      	mov	r6, r8
 80033f2:	e735      	b.n	8003260 <_dtoa_r+0x730>
 80033f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80033f6:	e75c      	b.n	80032b2 <_dtoa_r+0x782>
 80033f8:	2300      	movs	r3, #0
 80033fa:	e788      	b.n	800330e <_dtoa_r+0x7de>
 80033fc:	3fe00000 	.word	0x3fe00000
 8003400:	40240000 	.word	0x40240000
 8003404:	40140000 	.word	0x40140000
 8003408:	9b02      	ldr	r3, [sp, #8]
 800340a:	e780      	b.n	800330e <_dtoa_r+0x7de>
 800340c:	2300      	movs	r3, #0
 800340e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003410:	e782      	b.n	8003318 <_dtoa_r+0x7e8>
 8003412:	d099      	beq.n	8003348 <_dtoa_r+0x818>
 8003414:	9a08      	ldr	r2, [sp, #32]
 8003416:	331c      	adds	r3, #28
 8003418:	441a      	add	r2, r3
 800341a:	4498      	add	r8, r3
 800341c:	441e      	add	r6, r3
 800341e:	9208      	str	r2, [sp, #32]
 8003420:	e792      	b.n	8003348 <_dtoa_r+0x818>
 8003422:	4603      	mov	r3, r0
 8003424:	e7f6      	b.n	8003414 <_dtoa_r+0x8e4>
 8003426:	9b07      	ldr	r3, [sp, #28]
 8003428:	9704      	str	r7, [sp, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	dc20      	bgt.n	8003470 <_dtoa_r+0x940>
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003432:	2b02      	cmp	r3, #2
 8003434:	dd1e      	ble.n	8003474 <_dtoa_r+0x944>
 8003436:	9b00      	ldr	r3, [sp, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	f47f aec0 	bne.w	80031be <_dtoa_r+0x68e>
 800343e:	4621      	mov	r1, r4
 8003440:	2205      	movs	r2, #5
 8003442:	4658      	mov	r0, fp
 8003444:	f000 fa9a 	bl	800397c <__multadd>
 8003448:	4601      	mov	r1, r0
 800344a:	4604      	mov	r4, r0
 800344c:	4648      	mov	r0, r9
 800344e:	f000 fcad 	bl	8003dac <__mcmp>
 8003452:	2800      	cmp	r0, #0
 8003454:	f77f aeb3 	ble.w	80031be <_dtoa_r+0x68e>
 8003458:	4656      	mov	r6, sl
 800345a:	2331      	movs	r3, #49	@ 0x31
 800345c:	f806 3b01 	strb.w	r3, [r6], #1
 8003460:	9b04      	ldr	r3, [sp, #16]
 8003462:	3301      	adds	r3, #1
 8003464:	9304      	str	r3, [sp, #16]
 8003466:	e6ae      	b.n	80031c6 <_dtoa_r+0x696>
 8003468:	9c07      	ldr	r4, [sp, #28]
 800346a:	9704      	str	r7, [sp, #16]
 800346c:	4625      	mov	r5, r4
 800346e:	e7f3      	b.n	8003458 <_dtoa_r+0x928>
 8003470:	9b07      	ldr	r3, [sp, #28]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 8104 	beq.w	8003684 <_dtoa_r+0xb54>
 800347c:	2e00      	cmp	r6, #0
 800347e:	dd05      	ble.n	800348c <_dtoa_r+0x95c>
 8003480:	4629      	mov	r1, r5
 8003482:	4632      	mov	r2, r6
 8003484:	4658      	mov	r0, fp
 8003486:	f000 fc25 	bl	8003cd4 <__lshift>
 800348a:	4605      	mov	r5, r0
 800348c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800348e:	2b00      	cmp	r3, #0
 8003490:	d05a      	beq.n	8003548 <_dtoa_r+0xa18>
 8003492:	6869      	ldr	r1, [r5, #4]
 8003494:	4658      	mov	r0, fp
 8003496:	f000 fa0f 	bl	80038b8 <_Balloc>
 800349a:	4606      	mov	r6, r0
 800349c:	b928      	cbnz	r0, 80034aa <_dtoa_r+0x97a>
 800349e:	4b84      	ldr	r3, [pc, #528]	@ (80036b0 <_dtoa_r+0xb80>)
 80034a0:	4602      	mov	r2, r0
 80034a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80034a6:	f7ff bb5a 	b.w	8002b5e <_dtoa_r+0x2e>
 80034aa:	692a      	ldr	r2, [r5, #16]
 80034ac:	3202      	adds	r2, #2
 80034ae:	0092      	lsls	r2, r2, #2
 80034b0:	f105 010c 	add.w	r1, r5, #12
 80034b4:	300c      	adds	r0, #12
 80034b6:	f000 fe3d 	bl	8004134 <memcpy>
 80034ba:	2201      	movs	r2, #1
 80034bc:	4631      	mov	r1, r6
 80034be:	4658      	mov	r0, fp
 80034c0:	f000 fc08 	bl	8003cd4 <__lshift>
 80034c4:	f10a 0301 	add.w	r3, sl, #1
 80034c8:	9307      	str	r3, [sp, #28]
 80034ca:	9b00      	ldr	r3, [sp, #0]
 80034cc:	4453      	add	r3, sl
 80034ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80034d0:	9b02      	ldr	r3, [sp, #8]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	462f      	mov	r7, r5
 80034d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80034da:	4605      	mov	r5, r0
 80034dc:	9b07      	ldr	r3, [sp, #28]
 80034de:	4621      	mov	r1, r4
 80034e0:	3b01      	subs	r3, #1
 80034e2:	4648      	mov	r0, r9
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	f7ff fa9a 	bl	8002a1e <quorem>
 80034ea:	4639      	mov	r1, r7
 80034ec:	9002      	str	r0, [sp, #8]
 80034ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80034f2:	4648      	mov	r0, r9
 80034f4:	f000 fc5a 	bl	8003dac <__mcmp>
 80034f8:	462a      	mov	r2, r5
 80034fa:	9008      	str	r0, [sp, #32]
 80034fc:	4621      	mov	r1, r4
 80034fe:	4658      	mov	r0, fp
 8003500:	f000 fc70 	bl	8003de4 <__mdiff>
 8003504:	68c2      	ldr	r2, [r0, #12]
 8003506:	4606      	mov	r6, r0
 8003508:	bb02      	cbnz	r2, 800354c <_dtoa_r+0xa1c>
 800350a:	4601      	mov	r1, r0
 800350c:	4648      	mov	r0, r9
 800350e:	f000 fc4d 	bl	8003dac <__mcmp>
 8003512:	4602      	mov	r2, r0
 8003514:	4631      	mov	r1, r6
 8003516:	4658      	mov	r0, fp
 8003518:	920e      	str	r2, [sp, #56]	@ 0x38
 800351a:	f000 fa0d 	bl	8003938 <_Bfree>
 800351e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003520:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003522:	9e07      	ldr	r6, [sp, #28]
 8003524:	ea43 0102 	orr.w	r1, r3, r2
 8003528:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800352a:	4319      	orrs	r1, r3
 800352c:	d110      	bne.n	8003550 <_dtoa_r+0xa20>
 800352e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003532:	d029      	beq.n	8003588 <_dtoa_r+0xa58>
 8003534:	9b08      	ldr	r3, [sp, #32]
 8003536:	2b00      	cmp	r3, #0
 8003538:	dd02      	ble.n	8003540 <_dtoa_r+0xa10>
 800353a:	9b02      	ldr	r3, [sp, #8]
 800353c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8003540:	9b00      	ldr	r3, [sp, #0]
 8003542:	f883 8000 	strb.w	r8, [r3]
 8003546:	e63f      	b.n	80031c8 <_dtoa_r+0x698>
 8003548:	4628      	mov	r0, r5
 800354a:	e7bb      	b.n	80034c4 <_dtoa_r+0x994>
 800354c:	2201      	movs	r2, #1
 800354e:	e7e1      	b.n	8003514 <_dtoa_r+0x9e4>
 8003550:	9b08      	ldr	r3, [sp, #32]
 8003552:	2b00      	cmp	r3, #0
 8003554:	db04      	blt.n	8003560 <_dtoa_r+0xa30>
 8003556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003558:	430b      	orrs	r3, r1
 800355a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800355c:	430b      	orrs	r3, r1
 800355e:	d120      	bne.n	80035a2 <_dtoa_r+0xa72>
 8003560:	2a00      	cmp	r2, #0
 8003562:	dded      	ble.n	8003540 <_dtoa_r+0xa10>
 8003564:	4649      	mov	r1, r9
 8003566:	2201      	movs	r2, #1
 8003568:	4658      	mov	r0, fp
 800356a:	f000 fbb3 	bl	8003cd4 <__lshift>
 800356e:	4621      	mov	r1, r4
 8003570:	4681      	mov	r9, r0
 8003572:	f000 fc1b 	bl	8003dac <__mcmp>
 8003576:	2800      	cmp	r0, #0
 8003578:	dc03      	bgt.n	8003582 <_dtoa_r+0xa52>
 800357a:	d1e1      	bne.n	8003540 <_dtoa_r+0xa10>
 800357c:	f018 0f01 	tst.w	r8, #1
 8003580:	d0de      	beq.n	8003540 <_dtoa_r+0xa10>
 8003582:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003586:	d1d8      	bne.n	800353a <_dtoa_r+0xa0a>
 8003588:	9a00      	ldr	r2, [sp, #0]
 800358a:	2339      	movs	r3, #57	@ 0x39
 800358c:	7013      	strb	r3, [r2, #0]
 800358e:	4633      	mov	r3, r6
 8003590:	461e      	mov	r6, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003598:	2a39      	cmp	r2, #57	@ 0x39
 800359a:	d052      	beq.n	8003642 <_dtoa_r+0xb12>
 800359c:	3201      	adds	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e612      	b.n	80031c8 <_dtoa_r+0x698>
 80035a2:	2a00      	cmp	r2, #0
 80035a4:	dd07      	ble.n	80035b6 <_dtoa_r+0xa86>
 80035a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80035aa:	d0ed      	beq.n	8003588 <_dtoa_r+0xa58>
 80035ac:	9a00      	ldr	r2, [sp, #0]
 80035ae:	f108 0301 	add.w	r3, r8, #1
 80035b2:	7013      	strb	r3, [r2, #0]
 80035b4:	e608      	b.n	80031c8 <_dtoa_r+0x698>
 80035b6:	9b07      	ldr	r3, [sp, #28]
 80035b8:	9a07      	ldr	r2, [sp, #28]
 80035ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80035be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d028      	beq.n	8003616 <_dtoa_r+0xae6>
 80035c4:	4649      	mov	r1, r9
 80035c6:	2300      	movs	r3, #0
 80035c8:	220a      	movs	r2, #10
 80035ca:	4658      	mov	r0, fp
 80035cc:	f000 f9d6 	bl	800397c <__multadd>
 80035d0:	42af      	cmp	r7, r5
 80035d2:	4681      	mov	r9, r0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	f04f 020a 	mov.w	r2, #10
 80035dc:	4639      	mov	r1, r7
 80035de:	4658      	mov	r0, fp
 80035e0:	d107      	bne.n	80035f2 <_dtoa_r+0xac2>
 80035e2:	f000 f9cb 	bl	800397c <__multadd>
 80035e6:	4607      	mov	r7, r0
 80035e8:	4605      	mov	r5, r0
 80035ea:	9b07      	ldr	r3, [sp, #28]
 80035ec:	3301      	adds	r3, #1
 80035ee:	9307      	str	r3, [sp, #28]
 80035f0:	e774      	b.n	80034dc <_dtoa_r+0x9ac>
 80035f2:	f000 f9c3 	bl	800397c <__multadd>
 80035f6:	4629      	mov	r1, r5
 80035f8:	4607      	mov	r7, r0
 80035fa:	2300      	movs	r3, #0
 80035fc:	220a      	movs	r2, #10
 80035fe:	4658      	mov	r0, fp
 8003600:	f000 f9bc 	bl	800397c <__multadd>
 8003604:	4605      	mov	r5, r0
 8003606:	e7f0      	b.n	80035ea <_dtoa_r+0xaba>
 8003608:	9b00      	ldr	r3, [sp, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	bfcc      	ite	gt
 800360e:	461e      	movgt	r6, r3
 8003610:	2601      	movle	r6, #1
 8003612:	4456      	add	r6, sl
 8003614:	2700      	movs	r7, #0
 8003616:	4649      	mov	r1, r9
 8003618:	2201      	movs	r2, #1
 800361a:	4658      	mov	r0, fp
 800361c:	f000 fb5a 	bl	8003cd4 <__lshift>
 8003620:	4621      	mov	r1, r4
 8003622:	4681      	mov	r9, r0
 8003624:	f000 fbc2 	bl	8003dac <__mcmp>
 8003628:	2800      	cmp	r0, #0
 800362a:	dcb0      	bgt.n	800358e <_dtoa_r+0xa5e>
 800362c:	d102      	bne.n	8003634 <_dtoa_r+0xb04>
 800362e:	f018 0f01 	tst.w	r8, #1
 8003632:	d1ac      	bne.n	800358e <_dtoa_r+0xa5e>
 8003634:	4633      	mov	r3, r6
 8003636:	461e      	mov	r6, r3
 8003638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800363c:	2a30      	cmp	r2, #48	@ 0x30
 800363e:	d0fa      	beq.n	8003636 <_dtoa_r+0xb06>
 8003640:	e5c2      	b.n	80031c8 <_dtoa_r+0x698>
 8003642:	459a      	cmp	sl, r3
 8003644:	d1a4      	bne.n	8003590 <_dtoa_r+0xa60>
 8003646:	9b04      	ldr	r3, [sp, #16]
 8003648:	3301      	adds	r3, #1
 800364a:	9304      	str	r3, [sp, #16]
 800364c:	2331      	movs	r3, #49	@ 0x31
 800364e:	f88a 3000 	strb.w	r3, [sl]
 8003652:	e5b9      	b.n	80031c8 <_dtoa_r+0x698>
 8003654:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003656:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80036b4 <_dtoa_r+0xb84>
 800365a:	b11b      	cbz	r3, 8003664 <_dtoa_r+0xb34>
 800365c:	f10a 0308 	add.w	r3, sl, #8
 8003660:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4650      	mov	r0, sl
 8003666:	b019      	add	sp, #100	@ 0x64
 8003668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800366e:	2b01      	cmp	r3, #1
 8003670:	f77f ae37 	ble.w	80032e2 <_dtoa_r+0x7b2>
 8003674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003676:	930a      	str	r3, [sp, #40]	@ 0x28
 8003678:	2001      	movs	r0, #1
 800367a:	e655      	b.n	8003328 <_dtoa_r+0x7f8>
 800367c:	9b00      	ldr	r3, [sp, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f77f aed6 	ble.w	8003430 <_dtoa_r+0x900>
 8003684:	4656      	mov	r6, sl
 8003686:	4621      	mov	r1, r4
 8003688:	4648      	mov	r0, r9
 800368a:	f7ff f9c8 	bl	8002a1e <quorem>
 800368e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8003692:	f806 8b01 	strb.w	r8, [r6], #1
 8003696:	9b00      	ldr	r3, [sp, #0]
 8003698:	eba6 020a 	sub.w	r2, r6, sl
 800369c:	4293      	cmp	r3, r2
 800369e:	ddb3      	ble.n	8003608 <_dtoa_r+0xad8>
 80036a0:	4649      	mov	r1, r9
 80036a2:	2300      	movs	r3, #0
 80036a4:	220a      	movs	r2, #10
 80036a6:	4658      	mov	r0, fp
 80036a8:	f000 f968 	bl	800397c <__multadd>
 80036ac:	4681      	mov	r9, r0
 80036ae:	e7ea      	b.n	8003686 <_dtoa_r+0xb56>
 80036b0:	0800482f 	.word	0x0800482f
 80036b4:	080047b3 	.word	0x080047b3

080036b8 <_free_r>:
 80036b8:	b538      	push	{r3, r4, r5, lr}
 80036ba:	4605      	mov	r5, r0
 80036bc:	2900      	cmp	r1, #0
 80036be:	d041      	beq.n	8003744 <_free_r+0x8c>
 80036c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036c4:	1f0c      	subs	r4, r1, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	bfb8      	it	lt
 80036ca:	18e4      	addlt	r4, r4, r3
 80036cc:	f000 f8e8 	bl	80038a0 <__malloc_lock>
 80036d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <_free_r+0x90>)
 80036d2:	6813      	ldr	r3, [r2, #0]
 80036d4:	b933      	cbnz	r3, 80036e4 <_free_r+0x2c>
 80036d6:	6063      	str	r3, [r4, #4]
 80036d8:	6014      	str	r4, [r2, #0]
 80036da:	4628      	mov	r0, r5
 80036dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036e0:	f000 b8e4 	b.w	80038ac <__malloc_unlock>
 80036e4:	42a3      	cmp	r3, r4
 80036e6:	d908      	bls.n	80036fa <_free_r+0x42>
 80036e8:	6820      	ldr	r0, [r4, #0]
 80036ea:	1821      	adds	r1, r4, r0
 80036ec:	428b      	cmp	r3, r1
 80036ee:	bf01      	itttt	eq
 80036f0:	6819      	ldreq	r1, [r3, #0]
 80036f2:	685b      	ldreq	r3, [r3, #4]
 80036f4:	1809      	addeq	r1, r1, r0
 80036f6:	6021      	streq	r1, [r4, #0]
 80036f8:	e7ed      	b.n	80036d6 <_free_r+0x1e>
 80036fa:	461a      	mov	r2, r3
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	b10b      	cbz	r3, 8003704 <_free_r+0x4c>
 8003700:	42a3      	cmp	r3, r4
 8003702:	d9fa      	bls.n	80036fa <_free_r+0x42>
 8003704:	6811      	ldr	r1, [r2, #0]
 8003706:	1850      	adds	r0, r2, r1
 8003708:	42a0      	cmp	r0, r4
 800370a:	d10b      	bne.n	8003724 <_free_r+0x6c>
 800370c:	6820      	ldr	r0, [r4, #0]
 800370e:	4401      	add	r1, r0
 8003710:	1850      	adds	r0, r2, r1
 8003712:	4283      	cmp	r3, r0
 8003714:	6011      	str	r1, [r2, #0]
 8003716:	d1e0      	bne.n	80036da <_free_r+0x22>
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	6053      	str	r3, [r2, #4]
 800371e:	4408      	add	r0, r1
 8003720:	6010      	str	r0, [r2, #0]
 8003722:	e7da      	b.n	80036da <_free_r+0x22>
 8003724:	d902      	bls.n	800372c <_free_r+0x74>
 8003726:	230c      	movs	r3, #12
 8003728:	602b      	str	r3, [r5, #0]
 800372a:	e7d6      	b.n	80036da <_free_r+0x22>
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	1821      	adds	r1, r4, r0
 8003730:	428b      	cmp	r3, r1
 8003732:	bf04      	itt	eq
 8003734:	6819      	ldreq	r1, [r3, #0]
 8003736:	685b      	ldreq	r3, [r3, #4]
 8003738:	6063      	str	r3, [r4, #4]
 800373a:	bf04      	itt	eq
 800373c:	1809      	addeq	r1, r1, r0
 800373e:	6021      	streq	r1, [r4, #0]
 8003740:	6054      	str	r4, [r2, #4]
 8003742:	e7ca      	b.n	80036da <_free_r+0x22>
 8003744:	bd38      	pop	{r3, r4, r5, pc}
 8003746:	bf00      	nop
 8003748:	20000338 	.word	0x20000338

0800374c <malloc>:
 800374c:	4b02      	ldr	r3, [pc, #8]	@ (8003758 <malloc+0xc>)
 800374e:	4601      	mov	r1, r0
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	f000 b825 	b.w	80037a0 <_malloc_r>
 8003756:	bf00      	nop
 8003758:	20000010 	.word	0x20000010

0800375c <sbrk_aligned>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	4e0f      	ldr	r6, [pc, #60]	@ (800379c <sbrk_aligned+0x40>)
 8003760:	460c      	mov	r4, r1
 8003762:	6831      	ldr	r1, [r6, #0]
 8003764:	4605      	mov	r5, r0
 8003766:	b911      	cbnz	r1, 800376e <sbrk_aligned+0x12>
 8003768:	f000 fcd4 	bl	8004114 <_sbrk_r>
 800376c:	6030      	str	r0, [r6, #0]
 800376e:	4621      	mov	r1, r4
 8003770:	4628      	mov	r0, r5
 8003772:	f000 fccf 	bl	8004114 <_sbrk_r>
 8003776:	1c43      	adds	r3, r0, #1
 8003778:	d103      	bne.n	8003782 <sbrk_aligned+0x26>
 800377a:	f04f 34ff 	mov.w	r4, #4294967295
 800377e:	4620      	mov	r0, r4
 8003780:	bd70      	pop	{r4, r5, r6, pc}
 8003782:	1cc4      	adds	r4, r0, #3
 8003784:	f024 0403 	bic.w	r4, r4, #3
 8003788:	42a0      	cmp	r0, r4
 800378a:	d0f8      	beq.n	800377e <sbrk_aligned+0x22>
 800378c:	1a21      	subs	r1, r4, r0
 800378e:	4628      	mov	r0, r5
 8003790:	f000 fcc0 	bl	8004114 <_sbrk_r>
 8003794:	3001      	adds	r0, #1
 8003796:	d1f2      	bne.n	800377e <sbrk_aligned+0x22>
 8003798:	e7ef      	b.n	800377a <sbrk_aligned+0x1e>
 800379a:	bf00      	nop
 800379c:	20000334 	.word	0x20000334

080037a0 <_malloc_r>:
 80037a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037a4:	1ccd      	adds	r5, r1, #3
 80037a6:	f025 0503 	bic.w	r5, r5, #3
 80037aa:	3508      	adds	r5, #8
 80037ac:	2d0c      	cmp	r5, #12
 80037ae:	bf38      	it	cc
 80037b0:	250c      	movcc	r5, #12
 80037b2:	2d00      	cmp	r5, #0
 80037b4:	4606      	mov	r6, r0
 80037b6:	db01      	blt.n	80037bc <_malloc_r+0x1c>
 80037b8:	42a9      	cmp	r1, r5
 80037ba:	d904      	bls.n	80037c6 <_malloc_r+0x26>
 80037bc:	230c      	movs	r3, #12
 80037be:	6033      	str	r3, [r6, #0]
 80037c0:	2000      	movs	r0, #0
 80037c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800389c <_malloc_r+0xfc>
 80037ca:	f000 f869 	bl	80038a0 <__malloc_lock>
 80037ce:	f8d8 3000 	ldr.w	r3, [r8]
 80037d2:	461c      	mov	r4, r3
 80037d4:	bb44      	cbnz	r4, 8003828 <_malloc_r+0x88>
 80037d6:	4629      	mov	r1, r5
 80037d8:	4630      	mov	r0, r6
 80037da:	f7ff ffbf 	bl	800375c <sbrk_aligned>
 80037de:	1c43      	adds	r3, r0, #1
 80037e0:	4604      	mov	r4, r0
 80037e2:	d158      	bne.n	8003896 <_malloc_r+0xf6>
 80037e4:	f8d8 4000 	ldr.w	r4, [r8]
 80037e8:	4627      	mov	r7, r4
 80037ea:	2f00      	cmp	r7, #0
 80037ec:	d143      	bne.n	8003876 <_malloc_r+0xd6>
 80037ee:	2c00      	cmp	r4, #0
 80037f0:	d04b      	beq.n	800388a <_malloc_r+0xea>
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	4639      	mov	r1, r7
 80037f6:	4630      	mov	r0, r6
 80037f8:	eb04 0903 	add.w	r9, r4, r3
 80037fc:	f000 fc8a 	bl	8004114 <_sbrk_r>
 8003800:	4581      	cmp	r9, r0
 8003802:	d142      	bne.n	800388a <_malloc_r+0xea>
 8003804:	6821      	ldr	r1, [r4, #0]
 8003806:	1a6d      	subs	r5, r5, r1
 8003808:	4629      	mov	r1, r5
 800380a:	4630      	mov	r0, r6
 800380c:	f7ff ffa6 	bl	800375c <sbrk_aligned>
 8003810:	3001      	adds	r0, #1
 8003812:	d03a      	beq.n	800388a <_malloc_r+0xea>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	442b      	add	r3, r5
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	f8d8 3000 	ldr.w	r3, [r8]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	bb62      	cbnz	r2, 800387c <_malloc_r+0xdc>
 8003822:	f8c8 7000 	str.w	r7, [r8]
 8003826:	e00f      	b.n	8003848 <_malloc_r+0xa8>
 8003828:	6822      	ldr	r2, [r4, #0]
 800382a:	1b52      	subs	r2, r2, r5
 800382c:	d420      	bmi.n	8003870 <_malloc_r+0xd0>
 800382e:	2a0b      	cmp	r2, #11
 8003830:	d917      	bls.n	8003862 <_malloc_r+0xc2>
 8003832:	1961      	adds	r1, r4, r5
 8003834:	42a3      	cmp	r3, r4
 8003836:	6025      	str	r5, [r4, #0]
 8003838:	bf18      	it	ne
 800383a:	6059      	strne	r1, [r3, #4]
 800383c:	6863      	ldr	r3, [r4, #4]
 800383e:	bf08      	it	eq
 8003840:	f8c8 1000 	streq.w	r1, [r8]
 8003844:	5162      	str	r2, [r4, r5]
 8003846:	604b      	str	r3, [r1, #4]
 8003848:	4630      	mov	r0, r6
 800384a:	f000 f82f 	bl	80038ac <__malloc_unlock>
 800384e:	f104 000b 	add.w	r0, r4, #11
 8003852:	1d23      	adds	r3, r4, #4
 8003854:	f020 0007 	bic.w	r0, r0, #7
 8003858:	1ac2      	subs	r2, r0, r3
 800385a:	bf1c      	itt	ne
 800385c:	1a1b      	subne	r3, r3, r0
 800385e:	50a3      	strne	r3, [r4, r2]
 8003860:	e7af      	b.n	80037c2 <_malloc_r+0x22>
 8003862:	6862      	ldr	r2, [r4, #4]
 8003864:	42a3      	cmp	r3, r4
 8003866:	bf0c      	ite	eq
 8003868:	f8c8 2000 	streq.w	r2, [r8]
 800386c:	605a      	strne	r2, [r3, #4]
 800386e:	e7eb      	b.n	8003848 <_malloc_r+0xa8>
 8003870:	4623      	mov	r3, r4
 8003872:	6864      	ldr	r4, [r4, #4]
 8003874:	e7ae      	b.n	80037d4 <_malloc_r+0x34>
 8003876:	463c      	mov	r4, r7
 8003878:	687f      	ldr	r7, [r7, #4]
 800387a:	e7b6      	b.n	80037ea <_malloc_r+0x4a>
 800387c:	461a      	mov	r2, r3
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	42a3      	cmp	r3, r4
 8003882:	d1fb      	bne.n	800387c <_malloc_r+0xdc>
 8003884:	2300      	movs	r3, #0
 8003886:	6053      	str	r3, [r2, #4]
 8003888:	e7de      	b.n	8003848 <_malloc_r+0xa8>
 800388a:	230c      	movs	r3, #12
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	4630      	mov	r0, r6
 8003890:	f000 f80c 	bl	80038ac <__malloc_unlock>
 8003894:	e794      	b.n	80037c0 <_malloc_r+0x20>
 8003896:	6005      	str	r5, [r0, #0]
 8003898:	e7d6      	b.n	8003848 <_malloc_r+0xa8>
 800389a:	bf00      	nop
 800389c:	20000338 	.word	0x20000338

080038a0 <__malloc_lock>:
 80038a0:	4801      	ldr	r0, [pc, #4]	@ (80038a8 <__malloc_lock+0x8>)
 80038a2:	f7ff b8ba 	b.w	8002a1a <__retarget_lock_acquire_recursive>
 80038a6:	bf00      	nop
 80038a8:	20000330 	.word	0x20000330

080038ac <__malloc_unlock>:
 80038ac:	4801      	ldr	r0, [pc, #4]	@ (80038b4 <__malloc_unlock+0x8>)
 80038ae:	f7ff b8b5 	b.w	8002a1c <__retarget_lock_release_recursive>
 80038b2:	bf00      	nop
 80038b4:	20000330 	.word	0x20000330

080038b8 <_Balloc>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	69c6      	ldr	r6, [r0, #28]
 80038bc:	4604      	mov	r4, r0
 80038be:	460d      	mov	r5, r1
 80038c0:	b976      	cbnz	r6, 80038e0 <_Balloc+0x28>
 80038c2:	2010      	movs	r0, #16
 80038c4:	f7ff ff42 	bl	800374c <malloc>
 80038c8:	4602      	mov	r2, r0
 80038ca:	61e0      	str	r0, [r4, #28]
 80038cc:	b920      	cbnz	r0, 80038d8 <_Balloc+0x20>
 80038ce:	4b18      	ldr	r3, [pc, #96]	@ (8003930 <_Balloc+0x78>)
 80038d0:	4818      	ldr	r0, [pc, #96]	@ (8003934 <_Balloc+0x7c>)
 80038d2:	216b      	movs	r1, #107	@ 0x6b
 80038d4:	f000 fc3c 	bl	8004150 <__assert_func>
 80038d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80038dc:	6006      	str	r6, [r0, #0]
 80038de:	60c6      	str	r6, [r0, #12]
 80038e0:	69e6      	ldr	r6, [r4, #28]
 80038e2:	68f3      	ldr	r3, [r6, #12]
 80038e4:	b183      	cbz	r3, 8003908 <_Balloc+0x50>
 80038e6:	69e3      	ldr	r3, [r4, #28]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80038ee:	b9b8      	cbnz	r0, 8003920 <_Balloc+0x68>
 80038f0:	2101      	movs	r1, #1
 80038f2:	fa01 f605 	lsl.w	r6, r1, r5
 80038f6:	1d72      	adds	r2, r6, #5
 80038f8:	0092      	lsls	r2, r2, #2
 80038fa:	4620      	mov	r0, r4
 80038fc:	f000 fc46 	bl	800418c <_calloc_r>
 8003900:	b160      	cbz	r0, 800391c <_Balloc+0x64>
 8003902:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003906:	e00e      	b.n	8003926 <_Balloc+0x6e>
 8003908:	2221      	movs	r2, #33	@ 0x21
 800390a:	2104      	movs	r1, #4
 800390c:	4620      	mov	r0, r4
 800390e:	f000 fc3d 	bl	800418c <_calloc_r>
 8003912:	69e3      	ldr	r3, [r4, #28]
 8003914:	60f0      	str	r0, [r6, #12]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e4      	bne.n	80038e6 <_Balloc+0x2e>
 800391c:	2000      	movs	r0, #0
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	6802      	ldr	r2, [r0, #0]
 8003922:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003926:	2300      	movs	r3, #0
 8003928:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800392c:	e7f7      	b.n	800391e <_Balloc+0x66>
 800392e:	bf00      	nop
 8003930:	080047c0 	.word	0x080047c0
 8003934:	08004840 	.word	0x08004840

08003938 <_Bfree>:
 8003938:	b570      	push	{r4, r5, r6, lr}
 800393a:	69c6      	ldr	r6, [r0, #28]
 800393c:	4605      	mov	r5, r0
 800393e:	460c      	mov	r4, r1
 8003940:	b976      	cbnz	r6, 8003960 <_Bfree+0x28>
 8003942:	2010      	movs	r0, #16
 8003944:	f7ff ff02 	bl	800374c <malloc>
 8003948:	4602      	mov	r2, r0
 800394a:	61e8      	str	r0, [r5, #28]
 800394c:	b920      	cbnz	r0, 8003958 <_Bfree+0x20>
 800394e:	4b09      	ldr	r3, [pc, #36]	@ (8003974 <_Bfree+0x3c>)
 8003950:	4809      	ldr	r0, [pc, #36]	@ (8003978 <_Bfree+0x40>)
 8003952:	218f      	movs	r1, #143	@ 0x8f
 8003954:	f000 fbfc 	bl	8004150 <__assert_func>
 8003958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800395c:	6006      	str	r6, [r0, #0]
 800395e:	60c6      	str	r6, [r0, #12]
 8003960:	b13c      	cbz	r4, 8003972 <_Bfree+0x3a>
 8003962:	69eb      	ldr	r3, [r5, #28]
 8003964:	6862      	ldr	r2, [r4, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800396c:	6021      	str	r1, [r4, #0]
 800396e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	080047c0 	.word	0x080047c0
 8003978:	08004840 	.word	0x08004840

0800397c <__multadd>:
 800397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003980:	690d      	ldr	r5, [r1, #16]
 8003982:	4607      	mov	r7, r0
 8003984:	460c      	mov	r4, r1
 8003986:	461e      	mov	r6, r3
 8003988:	f101 0c14 	add.w	ip, r1, #20
 800398c:	2000      	movs	r0, #0
 800398e:	f8dc 3000 	ldr.w	r3, [ip]
 8003992:	b299      	uxth	r1, r3
 8003994:	fb02 6101 	mla	r1, r2, r1, r6
 8003998:	0c1e      	lsrs	r6, r3, #16
 800399a:	0c0b      	lsrs	r3, r1, #16
 800399c:	fb02 3306 	mla	r3, r2, r6, r3
 80039a0:	b289      	uxth	r1, r1
 80039a2:	3001      	adds	r0, #1
 80039a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80039a8:	4285      	cmp	r5, r0
 80039aa:	f84c 1b04 	str.w	r1, [ip], #4
 80039ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80039b2:	dcec      	bgt.n	800398e <__multadd+0x12>
 80039b4:	b30e      	cbz	r6, 80039fa <__multadd+0x7e>
 80039b6:	68a3      	ldr	r3, [r4, #8]
 80039b8:	42ab      	cmp	r3, r5
 80039ba:	dc19      	bgt.n	80039f0 <__multadd+0x74>
 80039bc:	6861      	ldr	r1, [r4, #4]
 80039be:	4638      	mov	r0, r7
 80039c0:	3101      	adds	r1, #1
 80039c2:	f7ff ff79 	bl	80038b8 <_Balloc>
 80039c6:	4680      	mov	r8, r0
 80039c8:	b928      	cbnz	r0, 80039d6 <__multadd+0x5a>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a00 <__multadd+0x84>)
 80039ce:	480d      	ldr	r0, [pc, #52]	@ (8003a04 <__multadd+0x88>)
 80039d0:	21ba      	movs	r1, #186	@ 0xba
 80039d2:	f000 fbbd 	bl	8004150 <__assert_func>
 80039d6:	6922      	ldr	r2, [r4, #16]
 80039d8:	3202      	adds	r2, #2
 80039da:	f104 010c 	add.w	r1, r4, #12
 80039de:	0092      	lsls	r2, r2, #2
 80039e0:	300c      	adds	r0, #12
 80039e2:	f000 fba7 	bl	8004134 <memcpy>
 80039e6:	4621      	mov	r1, r4
 80039e8:	4638      	mov	r0, r7
 80039ea:	f7ff ffa5 	bl	8003938 <_Bfree>
 80039ee:	4644      	mov	r4, r8
 80039f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80039f4:	3501      	adds	r5, #1
 80039f6:	615e      	str	r6, [r3, #20]
 80039f8:	6125      	str	r5, [r4, #16]
 80039fa:	4620      	mov	r0, r4
 80039fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a00:	0800482f 	.word	0x0800482f
 8003a04:	08004840 	.word	0x08004840

08003a08 <__hi0bits>:
 8003a08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	bf36      	itet	cc
 8003a10:	0403      	lslcc	r3, r0, #16
 8003a12:	2000      	movcs	r0, #0
 8003a14:	2010      	movcc	r0, #16
 8003a16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a1a:	bf3c      	itt	cc
 8003a1c:	021b      	lslcc	r3, r3, #8
 8003a1e:	3008      	addcc	r0, #8
 8003a20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a24:	bf3c      	itt	cc
 8003a26:	011b      	lslcc	r3, r3, #4
 8003a28:	3004      	addcc	r0, #4
 8003a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2e:	bf3c      	itt	cc
 8003a30:	009b      	lslcc	r3, r3, #2
 8003a32:	3002      	addcc	r0, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	db05      	blt.n	8003a44 <__hi0bits+0x3c>
 8003a38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003a3c:	f100 0001 	add.w	r0, r0, #1
 8003a40:	bf08      	it	eq
 8003a42:	2020      	moveq	r0, #32
 8003a44:	4770      	bx	lr

08003a46 <__lo0bits>:
 8003a46:	6803      	ldr	r3, [r0, #0]
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f013 0007 	ands.w	r0, r3, #7
 8003a4e:	d00b      	beq.n	8003a68 <__lo0bits+0x22>
 8003a50:	07d9      	lsls	r1, r3, #31
 8003a52:	d421      	bmi.n	8003a98 <__lo0bits+0x52>
 8003a54:	0798      	lsls	r0, r3, #30
 8003a56:	bf49      	itett	mi
 8003a58:	085b      	lsrmi	r3, r3, #1
 8003a5a:	089b      	lsrpl	r3, r3, #2
 8003a5c:	2001      	movmi	r0, #1
 8003a5e:	6013      	strmi	r3, [r2, #0]
 8003a60:	bf5c      	itt	pl
 8003a62:	6013      	strpl	r3, [r2, #0]
 8003a64:	2002      	movpl	r0, #2
 8003a66:	4770      	bx	lr
 8003a68:	b299      	uxth	r1, r3
 8003a6a:	b909      	cbnz	r1, 8003a70 <__lo0bits+0x2a>
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	2010      	movs	r0, #16
 8003a70:	b2d9      	uxtb	r1, r3
 8003a72:	b909      	cbnz	r1, 8003a78 <__lo0bits+0x32>
 8003a74:	3008      	adds	r0, #8
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	0719      	lsls	r1, r3, #28
 8003a7a:	bf04      	itt	eq
 8003a7c:	091b      	lsreq	r3, r3, #4
 8003a7e:	3004      	addeq	r0, #4
 8003a80:	0799      	lsls	r1, r3, #30
 8003a82:	bf04      	itt	eq
 8003a84:	089b      	lsreq	r3, r3, #2
 8003a86:	3002      	addeq	r0, #2
 8003a88:	07d9      	lsls	r1, r3, #31
 8003a8a:	d403      	bmi.n	8003a94 <__lo0bits+0x4e>
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	f100 0001 	add.w	r0, r0, #1
 8003a92:	d003      	beq.n	8003a9c <__lo0bits+0x56>
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4770      	bx	lr
 8003a98:	2000      	movs	r0, #0
 8003a9a:	4770      	bx	lr
 8003a9c:	2020      	movs	r0, #32
 8003a9e:	4770      	bx	lr

08003aa0 <__i2b>:
 8003aa0:	b510      	push	{r4, lr}
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	f7ff ff07 	bl	80038b8 <_Balloc>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	b928      	cbnz	r0, 8003aba <__i2b+0x1a>
 8003aae:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <__i2b+0x24>)
 8003ab0:	4805      	ldr	r0, [pc, #20]	@ (8003ac8 <__i2b+0x28>)
 8003ab2:	f240 1145 	movw	r1, #325	@ 0x145
 8003ab6:	f000 fb4b 	bl	8004150 <__assert_func>
 8003aba:	2301      	movs	r3, #1
 8003abc:	6144      	str	r4, [r0, #20]
 8003abe:	6103      	str	r3, [r0, #16]
 8003ac0:	bd10      	pop	{r4, pc}
 8003ac2:	bf00      	nop
 8003ac4:	0800482f 	.word	0x0800482f
 8003ac8:	08004840 	.word	0x08004840

08003acc <__multiply>:
 8003acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	690a      	ldr	r2, [r1, #16]
 8003ad4:	6923      	ldr	r3, [r4, #16]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	bfa8      	it	ge
 8003ada:	4623      	movge	r3, r4
 8003adc:	460f      	mov	r7, r1
 8003ade:	bfa4      	itt	ge
 8003ae0:	460c      	movge	r4, r1
 8003ae2:	461f      	movge	r7, r3
 8003ae4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003ae8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003aec:	68a3      	ldr	r3, [r4, #8]
 8003aee:	6861      	ldr	r1, [r4, #4]
 8003af0:	eb0a 0609 	add.w	r6, sl, r9
 8003af4:	42b3      	cmp	r3, r6
 8003af6:	b085      	sub	sp, #20
 8003af8:	bfb8      	it	lt
 8003afa:	3101      	addlt	r1, #1
 8003afc:	f7ff fedc 	bl	80038b8 <_Balloc>
 8003b00:	b930      	cbnz	r0, 8003b10 <__multiply+0x44>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b44      	ldr	r3, [pc, #272]	@ (8003c18 <__multiply+0x14c>)
 8003b06:	4845      	ldr	r0, [pc, #276]	@ (8003c1c <__multiply+0x150>)
 8003b08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003b0c:	f000 fb20 	bl	8004150 <__assert_func>
 8003b10:	f100 0514 	add.w	r5, r0, #20
 8003b14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003b18:	462b      	mov	r3, r5
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	4543      	cmp	r3, r8
 8003b1e:	d321      	bcc.n	8003b64 <__multiply+0x98>
 8003b20:	f107 0114 	add.w	r1, r7, #20
 8003b24:	f104 0214 	add.w	r2, r4, #20
 8003b28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003b2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8003b30:	9302      	str	r3, [sp, #8]
 8003b32:	1b13      	subs	r3, r2, r4
 8003b34:	3b15      	subs	r3, #21
 8003b36:	f023 0303 	bic.w	r3, r3, #3
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	f104 0715 	add.w	r7, r4, #21
 8003b40:	42ba      	cmp	r2, r7
 8003b42:	bf38      	it	cc
 8003b44:	2304      	movcc	r3, #4
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	9b02      	ldr	r3, [sp, #8]
 8003b4a:	9103      	str	r1, [sp, #12]
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	d80c      	bhi.n	8003b6a <__multiply+0x9e>
 8003b50:	2e00      	cmp	r6, #0
 8003b52:	dd03      	ble.n	8003b5c <__multiply+0x90>
 8003b54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d05b      	beq.n	8003c14 <__multiply+0x148>
 8003b5c:	6106      	str	r6, [r0, #16]
 8003b5e:	b005      	add	sp, #20
 8003b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b64:	f843 2b04 	str.w	r2, [r3], #4
 8003b68:	e7d8      	b.n	8003b1c <__multiply+0x50>
 8003b6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8003b6e:	f1ba 0f00 	cmp.w	sl, #0
 8003b72:	d024      	beq.n	8003bbe <__multiply+0xf2>
 8003b74:	f104 0e14 	add.w	lr, r4, #20
 8003b78:	46a9      	mov	r9, r5
 8003b7a:	f04f 0c00 	mov.w	ip, #0
 8003b7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003b82:	f8d9 3000 	ldr.w	r3, [r9]
 8003b86:	fa1f fb87 	uxth.w	fp, r7
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8003b90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8003b94:	f8d9 7000 	ldr.w	r7, [r9]
 8003b98:	4463      	add	r3, ip
 8003b9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003b9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8003ba2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003bac:	4572      	cmp	r2, lr
 8003bae:	f849 3b04 	str.w	r3, [r9], #4
 8003bb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003bb6:	d8e2      	bhi.n	8003b7e <__multiply+0xb2>
 8003bb8:	9b01      	ldr	r3, [sp, #4]
 8003bba:	f845 c003 	str.w	ip, [r5, r3]
 8003bbe:	9b03      	ldr	r3, [sp, #12]
 8003bc0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003bc4:	3104      	adds	r1, #4
 8003bc6:	f1b9 0f00 	cmp.w	r9, #0
 8003bca:	d021      	beq.n	8003c10 <__multiply+0x144>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	f104 0c14 	add.w	ip, r4, #20
 8003bd2:	46ae      	mov	lr, r5
 8003bd4:	f04f 0a00 	mov.w	sl, #0
 8003bd8:	f8bc b000 	ldrh.w	fp, [ip]
 8003bdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8003be0:	fb09 770b 	mla	r7, r9, fp, r7
 8003be4:	4457      	add	r7, sl
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003bec:	f84e 3b04 	str.w	r3, [lr], #4
 8003bf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003bf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003bf8:	f8be 3000 	ldrh.w	r3, [lr]
 8003bfc:	fb09 330a 	mla	r3, r9, sl, r3
 8003c00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003c04:	4562      	cmp	r2, ip
 8003c06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c0a:	d8e5      	bhi.n	8003bd8 <__multiply+0x10c>
 8003c0c:	9f01      	ldr	r7, [sp, #4]
 8003c0e:	51eb      	str	r3, [r5, r7]
 8003c10:	3504      	adds	r5, #4
 8003c12:	e799      	b.n	8003b48 <__multiply+0x7c>
 8003c14:	3e01      	subs	r6, #1
 8003c16:	e79b      	b.n	8003b50 <__multiply+0x84>
 8003c18:	0800482f 	.word	0x0800482f
 8003c1c:	08004840 	.word	0x08004840

08003c20 <__pow5mult>:
 8003c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c24:	4615      	mov	r5, r2
 8003c26:	f012 0203 	ands.w	r2, r2, #3
 8003c2a:	4607      	mov	r7, r0
 8003c2c:	460e      	mov	r6, r1
 8003c2e:	d007      	beq.n	8003c40 <__pow5mult+0x20>
 8003c30:	4c25      	ldr	r4, [pc, #148]	@ (8003cc8 <__pow5mult+0xa8>)
 8003c32:	3a01      	subs	r2, #1
 8003c34:	2300      	movs	r3, #0
 8003c36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003c3a:	f7ff fe9f 	bl	800397c <__multadd>
 8003c3e:	4606      	mov	r6, r0
 8003c40:	10ad      	asrs	r5, r5, #2
 8003c42:	d03d      	beq.n	8003cc0 <__pow5mult+0xa0>
 8003c44:	69fc      	ldr	r4, [r7, #28]
 8003c46:	b97c      	cbnz	r4, 8003c68 <__pow5mult+0x48>
 8003c48:	2010      	movs	r0, #16
 8003c4a:	f7ff fd7f 	bl	800374c <malloc>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	61f8      	str	r0, [r7, #28]
 8003c52:	b928      	cbnz	r0, 8003c60 <__pow5mult+0x40>
 8003c54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <__pow5mult+0xac>)
 8003c56:	481e      	ldr	r0, [pc, #120]	@ (8003cd0 <__pow5mult+0xb0>)
 8003c58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003c5c:	f000 fa78 	bl	8004150 <__assert_func>
 8003c60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003c64:	6004      	str	r4, [r0, #0]
 8003c66:	60c4      	str	r4, [r0, #12]
 8003c68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003c6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003c70:	b94c      	cbnz	r4, 8003c86 <__pow5mult+0x66>
 8003c72:	f240 2171 	movw	r1, #625	@ 0x271
 8003c76:	4638      	mov	r0, r7
 8003c78:	f7ff ff12 	bl	8003aa0 <__i2b>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003c82:	4604      	mov	r4, r0
 8003c84:	6003      	str	r3, [r0, #0]
 8003c86:	f04f 0900 	mov.w	r9, #0
 8003c8a:	07eb      	lsls	r3, r5, #31
 8003c8c:	d50a      	bpl.n	8003ca4 <__pow5mult+0x84>
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4622      	mov	r2, r4
 8003c92:	4638      	mov	r0, r7
 8003c94:	f7ff ff1a 	bl	8003acc <__multiply>
 8003c98:	4631      	mov	r1, r6
 8003c9a:	4680      	mov	r8, r0
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f7ff fe4b 	bl	8003938 <_Bfree>
 8003ca2:	4646      	mov	r6, r8
 8003ca4:	106d      	asrs	r5, r5, #1
 8003ca6:	d00b      	beq.n	8003cc0 <__pow5mult+0xa0>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	b938      	cbnz	r0, 8003cbc <__pow5mult+0x9c>
 8003cac:	4622      	mov	r2, r4
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	f7ff ff0b 	bl	8003acc <__multiply>
 8003cb6:	6020      	str	r0, [r4, #0]
 8003cb8:	f8c0 9000 	str.w	r9, [r0]
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	e7e4      	b.n	8003c8a <__pow5mult+0x6a>
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cc6:	bf00      	nop
 8003cc8:	0800489c 	.word	0x0800489c
 8003ccc:	080047c0 	.word	0x080047c0
 8003cd0:	08004840 	.word	0x08004840

08003cd4 <__lshift>:
 8003cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd8:	460c      	mov	r4, r1
 8003cda:	6849      	ldr	r1, [r1, #4]
 8003cdc:	6923      	ldr	r3, [r4, #16]
 8003cde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003ce2:	68a3      	ldr	r3, [r4, #8]
 8003ce4:	4607      	mov	r7, r0
 8003ce6:	4691      	mov	r9, r2
 8003ce8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003cec:	f108 0601 	add.w	r6, r8, #1
 8003cf0:	42b3      	cmp	r3, r6
 8003cf2:	db0b      	blt.n	8003d0c <__lshift+0x38>
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	f7ff fddf 	bl	80038b8 <_Balloc>
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	b948      	cbnz	r0, 8003d12 <__lshift+0x3e>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	4b28      	ldr	r3, [pc, #160]	@ (8003da4 <__lshift+0xd0>)
 8003d02:	4829      	ldr	r0, [pc, #164]	@ (8003da8 <__lshift+0xd4>)
 8003d04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003d08:	f000 fa22 	bl	8004150 <__assert_func>
 8003d0c:	3101      	adds	r1, #1
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	e7ee      	b.n	8003cf0 <__lshift+0x1c>
 8003d12:	2300      	movs	r3, #0
 8003d14:	f100 0114 	add.w	r1, r0, #20
 8003d18:	f100 0210 	add.w	r2, r0, #16
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	4553      	cmp	r3, sl
 8003d20:	db33      	blt.n	8003d8a <__lshift+0xb6>
 8003d22:	6920      	ldr	r0, [r4, #16]
 8003d24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d28:	f104 0314 	add.w	r3, r4, #20
 8003d2c:	f019 091f 	ands.w	r9, r9, #31
 8003d30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003d34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003d38:	d02b      	beq.n	8003d92 <__lshift+0xbe>
 8003d3a:	f1c9 0e20 	rsb	lr, r9, #32
 8003d3e:	468a      	mov	sl, r1
 8003d40:	2200      	movs	r2, #0
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	fa00 f009 	lsl.w	r0, r0, r9
 8003d48:	4310      	orrs	r0, r2
 8003d4a:	f84a 0b04 	str.w	r0, [sl], #4
 8003d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d52:	459c      	cmp	ip, r3
 8003d54:	fa22 f20e 	lsr.w	r2, r2, lr
 8003d58:	d8f3      	bhi.n	8003d42 <__lshift+0x6e>
 8003d5a:	ebac 0304 	sub.w	r3, ip, r4
 8003d5e:	3b15      	subs	r3, #21
 8003d60:	f023 0303 	bic.w	r3, r3, #3
 8003d64:	3304      	adds	r3, #4
 8003d66:	f104 0015 	add.w	r0, r4, #21
 8003d6a:	4584      	cmp	ip, r0
 8003d6c:	bf38      	it	cc
 8003d6e:	2304      	movcc	r3, #4
 8003d70:	50ca      	str	r2, [r1, r3]
 8003d72:	b10a      	cbz	r2, 8003d78 <__lshift+0xa4>
 8003d74:	f108 0602 	add.w	r6, r8, #2
 8003d78:	3e01      	subs	r6, #1
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	612e      	str	r6, [r5, #16]
 8003d7e:	4621      	mov	r1, r4
 8003d80:	f7ff fdda 	bl	8003938 <_Bfree>
 8003d84:	4628      	mov	r0, r5
 8003d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8003d8e:	3301      	adds	r3, #1
 8003d90:	e7c5      	b.n	8003d1e <__lshift+0x4a>
 8003d92:	3904      	subs	r1, #4
 8003d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d98:	f841 2f04 	str.w	r2, [r1, #4]!
 8003d9c:	459c      	cmp	ip, r3
 8003d9e:	d8f9      	bhi.n	8003d94 <__lshift+0xc0>
 8003da0:	e7ea      	b.n	8003d78 <__lshift+0xa4>
 8003da2:	bf00      	nop
 8003da4:	0800482f 	.word	0x0800482f
 8003da8:	08004840 	.word	0x08004840

08003dac <__mcmp>:
 8003dac:	690a      	ldr	r2, [r1, #16]
 8003dae:	4603      	mov	r3, r0
 8003db0:	6900      	ldr	r0, [r0, #16]
 8003db2:	1a80      	subs	r0, r0, r2
 8003db4:	b530      	push	{r4, r5, lr}
 8003db6:	d10e      	bne.n	8003dd6 <__mcmp+0x2a>
 8003db8:	3314      	adds	r3, #20
 8003dba:	3114      	adds	r1, #20
 8003dbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003dc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003dc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003dc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003dcc:	4295      	cmp	r5, r2
 8003dce:	d003      	beq.n	8003dd8 <__mcmp+0x2c>
 8003dd0:	d205      	bcs.n	8003dde <__mcmp+0x32>
 8003dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd6:	bd30      	pop	{r4, r5, pc}
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	d3f3      	bcc.n	8003dc4 <__mcmp+0x18>
 8003ddc:	e7fb      	b.n	8003dd6 <__mcmp+0x2a>
 8003dde:	2001      	movs	r0, #1
 8003de0:	e7f9      	b.n	8003dd6 <__mcmp+0x2a>
	...

08003de4 <__mdiff>:
 8003de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de8:	4689      	mov	r9, r1
 8003dea:	4606      	mov	r6, r0
 8003dec:	4611      	mov	r1, r2
 8003dee:	4648      	mov	r0, r9
 8003df0:	4614      	mov	r4, r2
 8003df2:	f7ff ffdb 	bl	8003dac <__mcmp>
 8003df6:	1e05      	subs	r5, r0, #0
 8003df8:	d112      	bne.n	8003e20 <__mdiff+0x3c>
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	f7ff fd5b 	bl	80038b8 <_Balloc>
 8003e02:	4602      	mov	r2, r0
 8003e04:	b928      	cbnz	r0, 8003e12 <__mdiff+0x2e>
 8003e06:	4b3f      	ldr	r3, [pc, #252]	@ (8003f04 <__mdiff+0x120>)
 8003e08:	f240 2137 	movw	r1, #567	@ 0x237
 8003e0c:	483e      	ldr	r0, [pc, #248]	@ (8003f08 <__mdiff+0x124>)
 8003e0e:	f000 f99f 	bl	8004150 <__assert_func>
 8003e12:	2301      	movs	r3, #1
 8003e14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003e18:	4610      	mov	r0, r2
 8003e1a:	b003      	add	sp, #12
 8003e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e20:	bfbc      	itt	lt
 8003e22:	464b      	movlt	r3, r9
 8003e24:	46a1      	movlt	r9, r4
 8003e26:	4630      	mov	r0, r6
 8003e28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003e2c:	bfba      	itte	lt
 8003e2e:	461c      	movlt	r4, r3
 8003e30:	2501      	movlt	r5, #1
 8003e32:	2500      	movge	r5, #0
 8003e34:	f7ff fd40 	bl	80038b8 <_Balloc>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	b918      	cbnz	r0, 8003e44 <__mdiff+0x60>
 8003e3c:	4b31      	ldr	r3, [pc, #196]	@ (8003f04 <__mdiff+0x120>)
 8003e3e:	f240 2145 	movw	r1, #581	@ 0x245
 8003e42:	e7e3      	b.n	8003e0c <__mdiff+0x28>
 8003e44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003e48:	6926      	ldr	r6, [r4, #16]
 8003e4a:	60c5      	str	r5, [r0, #12]
 8003e4c:	f109 0310 	add.w	r3, r9, #16
 8003e50:	f109 0514 	add.w	r5, r9, #20
 8003e54:	f104 0e14 	add.w	lr, r4, #20
 8003e58:	f100 0b14 	add.w	fp, r0, #20
 8003e5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8003e60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8003e64:	9301      	str	r3, [sp, #4]
 8003e66:	46d9      	mov	r9, fp
 8003e68:	f04f 0c00 	mov.w	ip, #0
 8003e6c:	9b01      	ldr	r3, [sp, #4]
 8003e6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8003e72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8003e76:	9301      	str	r3, [sp, #4]
 8003e78:	fa1f f38a 	uxth.w	r3, sl
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	b283      	uxth	r3, r0
 8003e80:	1acb      	subs	r3, r1, r3
 8003e82:	0c00      	lsrs	r0, r0, #16
 8003e84:	4463      	add	r3, ip
 8003e86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8003e8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003e94:	4576      	cmp	r6, lr
 8003e96:	f849 3b04 	str.w	r3, [r9], #4
 8003e9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003e9e:	d8e5      	bhi.n	8003e6c <__mdiff+0x88>
 8003ea0:	1b33      	subs	r3, r6, r4
 8003ea2:	3b15      	subs	r3, #21
 8003ea4:	f023 0303 	bic.w	r3, r3, #3
 8003ea8:	3415      	adds	r4, #21
 8003eaa:	3304      	adds	r3, #4
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	bf38      	it	cc
 8003eb0:	2304      	movcc	r3, #4
 8003eb2:	441d      	add	r5, r3
 8003eb4:	445b      	add	r3, fp
 8003eb6:	461e      	mov	r6, r3
 8003eb8:	462c      	mov	r4, r5
 8003eba:	4544      	cmp	r4, r8
 8003ebc:	d30e      	bcc.n	8003edc <__mdiff+0xf8>
 8003ebe:	f108 0103 	add.w	r1, r8, #3
 8003ec2:	1b49      	subs	r1, r1, r5
 8003ec4:	f021 0103 	bic.w	r1, r1, #3
 8003ec8:	3d03      	subs	r5, #3
 8003eca:	45a8      	cmp	r8, r5
 8003ecc:	bf38      	it	cc
 8003ece:	2100      	movcc	r1, #0
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003ed6:	b191      	cbz	r1, 8003efe <__mdiff+0x11a>
 8003ed8:	6117      	str	r7, [r2, #16]
 8003eda:	e79d      	b.n	8003e18 <__mdiff+0x34>
 8003edc:	f854 1b04 	ldr.w	r1, [r4], #4
 8003ee0:	46e6      	mov	lr, ip
 8003ee2:	0c08      	lsrs	r0, r1, #16
 8003ee4:	fa1c fc81 	uxtah	ip, ip, r1
 8003ee8:	4471      	add	r1, lr
 8003eea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8003eee:	b289      	uxth	r1, r1
 8003ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003ef4:	f846 1b04 	str.w	r1, [r6], #4
 8003ef8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003efc:	e7dd      	b.n	8003eba <__mdiff+0xd6>
 8003efe:	3f01      	subs	r7, #1
 8003f00:	e7e7      	b.n	8003ed2 <__mdiff+0xee>
 8003f02:	bf00      	nop
 8003f04:	0800482f 	.word	0x0800482f
 8003f08:	08004840 	.word	0x08004840

08003f0c <__d2b>:
 8003f0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003f10:	460f      	mov	r7, r1
 8003f12:	2101      	movs	r1, #1
 8003f14:	ec59 8b10 	vmov	r8, r9, d0
 8003f18:	4616      	mov	r6, r2
 8003f1a:	f7ff fccd 	bl	80038b8 <_Balloc>
 8003f1e:	4604      	mov	r4, r0
 8003f20:	b930      	cbnz	r0, 8003f30 <__d2b+0x24>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4b23      	ldr	r3, [pc, #140]	@ (8003fb4 <__d2b+0xa8>)
 8003f26:	4824      	ldr	r0, [pc, #144]	@ (8003fb8 <__d2b+0xac>)
 8003f28:	f240 310f 	movw	r1, #783	@ 0x30f
 8003f2c:	f000 f910 	bl	8004150 <__assert_func>
 8003f30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003f34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f38:	b10d      	cbz	r5, 8003f3e <__d2b+0x32>
 8003f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f3e:	9301      	str	r3, [sp, #4]
 8003f40:	f1b8 0300 	subs.w	r3, r8, #0
 8003f44:	d023      	beq.n	8003f8e <__d2b+0x82>
 8003f46:	4668      	mov	r0, sp
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	f7ff fd7c 	bl	8003a46 <__lo0bits>
 8003f4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003f52:	b1d0      	cbz	r0, 8003f8a <__d2b+0x7e>
 8003f54:	f1c0 0320 	rsb	r3, r0, #32
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	40c2      	lsrs	r2, r0
 8003f60:	6163      	str	r3, [r4, #20]
 8003f62:	9201      	str	r2, [sp, #4]
 8003f64:	9b01      	ldr	r3, [sp, #4]
 8003f66:	61a3      	str	r3, [r4, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2201      	moveq	r2, #1
 8003f6e:	2202      	movne	r2, #2
 8003f70:	6122      	str	r2, [r4, #16]
 8003f72:	b1a5      	cbz	r5, 8003f9e <__d2b+0x92>
 8003f74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8003f78:	4405      	add	r5, r0
 8003f7a:	603d      	str	r5, [r7, #0]
 8003f7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8003f80:	6030      	str	r0, [r6, #0]
 8003f82:	4620      	mov	r0, r4
 8003f84:	b003      	add	sp, #12
 8003f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f8a:	6161      	str	r1, [r4, #20]
 8003f8c:	e7ea      	b.n	8003f64 <__d2b+0x58>
 8003f8e:	a801      	add	r0, sp, #4
 8003f90:	f7ff fd59 	bl	8003a46 <__lo0bits>
 8003f94:	9b01      	ldr	r3, [sp, #4]
 8003f96:	6163      	str	r3, [r4, #20]
 8003f98:	3020      	adds	r0, #32
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	e7e8      	b.n	8003f70 <__d2b+0x64>
 8003f9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003fa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8003fa6:	6038      	str	r0, [r7, #0]
 8003fa8:	6918      	ldr	r0, [r3, #16]
 8003faa:	f7ff fd2d 	bl	8003a08 <__hi0bits>
 8003fae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003fb2:	e7e5      	b.n	8003f80 <__d2b+0x74>
 8003fb4:	0800482f 	.word	0x0800482f
 8003fb8:	08004840 	.word	0x08004840

08003fbc <__sflush_r>:
 8003fbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc4:	0716      	lsls	r6, r2, #28
 8003fc6:	4605      	mov	r5, r0
 8003fc8:	460c      	mov	r4, r1
 8003fca:	d454      	bmi.n	8004076 <__sflush_r+0xba>
 8003fcc:	684b      	ldr	r3, [r1, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	dc02      	bgt.n	8003fd8 <__sflush_r+0x1c>
 8003fd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	dd48      	ble.n	800406a <__sflush_r+0xae>
 8003fd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fda:	2e00      	cmp	r6, #0
 8003fdc:	d045      	beq.n	800406a <__sflush_r+0xae>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003fe4:	682f      	ldr	r7, [r5, #0]
 8003fe6:	6a21      	ldr	r1, [r4, #32]
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	d030      	beq.n	800404e <__sflush_r+0x92>
 8003fec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003fee:	89a3      	ldrh	r3, [r4, #12]
 8003ff0:	0759      	lsls	r1, r3, #29
 8003ff2:	d505      	bpl.n	8004000 <__sflush_r+0x44>
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	1ad2      	subs	r2, r2, r3
 8003ff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ffa:	b10b      	cbz	r3, 8004000 <__sflush_r+0x44>
 8003ffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ffe:	1ad2      	subs	r2, r2, r3
 8004000:	2300      	movs	r3, #0
 8004002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004004:	6a21      	ldr	r1, [r4, #32]
 8004006:	4628      	mov	r0, r5
 8004008:	47b0      	blx	r6
 800400a:	1c43      	adds	r3, r0, #1
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	d106      	bne.n	800401e <__sflush_r+0x62>
 8004010:	6829      	ldr	r1, [r5, #0]
 8004012:	291d      	cmp	r1, #29
 8004014:	d82b      	bhi.n	800406e <__sflush_r+0xb2>
 8004016:	4a2a      	ldr	r2, [pc, #168]	@ (80040c0 <__sflush_r+0x104>)
 8004018:	410a      	asrs	r2, r1
 800401a:	07d6      	lsls	r6, r2, #31
 800401c:	d427      	bmi.n	800406e <__sflush_r+0xb2>
 800401e:	2200      	movs	r2, #0
 8004020:	6062      	str	r2, [r4, #4]
 8004022:	04d9      	lsls	r1, r3, #19
 8004024:	6922      	ldr	r2, [r4, #16]
 8004026:	6022      	str	r2, [r4, #0]
 8004028:	d504      	bpl.n	8004034 <__sflush_r+0x78>
 800402a:	1c42      	adds	r2, r0, #1
 800402c:	d101      	bne.n	8004032 <__sflush_r+0x76>
 800402e:	682b      	ldr	r3, [r5, #0]
 8004030:	b903      	cbnz	r3, 8004034 <__sflush_r+0x78>
 8004032:	6560      	str	r0, [r4, #84]	@ 0x54
 8004034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004036:	602f      	str	r7, [r5, #0]
 8004038:	b1b9      	cbz	r1, 800406a <__sflush_r+0xae>
 800403a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800403e:	4299      	cmp	r1, r3
 8004040:	d002      	beq.n	8004048 <__sflush_r+0x8c>
 8004042:	4628      	mov	r0, r5
 8004044:	f7ff fb38 	bl	80036b8 <_free_r>
 8004048:	2300      	movs	r3, #0
 800404a:	6363      	str	r3, [r4, #52]	@ 0x34
 800404c:	e00d      	b.n	800406a <__sflush_r+0xae>
 800404e:	2301      	movs	r3, #1
 8004050:	4628      	mov	r0, r5
 8004052:	47b0      	blx	r6
 8004054:	4602      	mov	r2, r0
 8004056:	1c50      	adds	r0, r2, #1
 8004058:	d1c9      	bne.n	8003fee <__sflush_r+0x32>
 800405a:	682b      	ldr	r3, [r5, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0c6      	beq.n	8003fee <__sflush_r+0x32>
 8004060:	2b1d      	cmp	r3, #29
 8004062:	d001      	beq.n	8004068 <__sflush_r+0xac>
 8004064:	2b16      	cmp	r3, #22
 8004066:	d11e      	bne.n	80040a6 <__sflush_r+0xea>
 8004068:	602f      	str	r7, [r5, #0]
 800406a:	2000      	movs	r0, #0
 800406c:	e022      	b.n	80040b4 <__sflush_r+0xf8>
 800406e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004072:	b21b      	sxth	r3, r3
 8004074:	e01b      	b.n	80040ae <__sflush_r+0xf2>
 8004076:	690f      	ldr	r7, [r1, #16]
 8004078:	2f00      	cmp	r7, #0
 800407a:	d0f6      	beq.n	800406a <__sflush_r+0xae>
 800407c:	0793      	lsls	r3, r2, #30
 800407e:	680e      	ldr	r6, [r1, #0]
 8004080:	bf08      	it	eq
 8004082:	694b      	ldreq	r3, [r1, #20]
 8004084:	600f      	str	r7, [r1, #0]
 8004086:	bf18      	it	ne
 8004088:	2300      	movne	r3, #0
 800408a:	eba6 0807 	sub.w	r8, r6, r7
 800408e:	608b      	str	r3, [r1, #8]
 8004090:	f1b8 0f00 	cmp.w	r8, #0
 8004094:	dde9      	ble.n	800406a <__sflush_r+0xae>
 8004096:	6a21      	ldr	r1, [r4, #32]
 8004098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800409a:	4643      	mov	r3, r8
 800409c:	463a      	mov	r2, r7
 800409e:	4628      	mov	r0, r5
 80040a0:	47b0      	blx	r6
 80040a2:	2800      	cmp	r0, #0
 80040a4:	dc08      	bgt.n	80040b8 <__sflush_r+0xfc>
 80040a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ae:	81a3      	strh	r3, [r4, #12]
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040b8:	4407      	add	r7, r0
 80040ba:	eba8 0800 	sub.w	r8, r8, r0
 80040be:	e7e7      	b.n	8004090 <__sflush_r+0xd4>
 80040c0:	dfbffffe 	.word	0xdfbffffe

080040c4 <_fflush_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	690b      	ldr	r3, [r1, #16]
 80040c8:	4605      	mov	r5, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	b913      	cbnz	r3, 80040d4 <_fflush_r+0x10>
 80040ce:	2500      	movs	r5, #0
 80040d0:	4628      	mov	r0, r5
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	b118      	cbz	r0, 80040de <_fflush_r+0x1a>
 80040d6:	6a03      	ldr	r3, [r0, #32]
 80040d8:	b90b      	cbnz	r3, 80040de <_fflush_r+0x1a>
 80040da:	f7fe fba7 	bl	800282c <__sinit>
 80040de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0f3      	beq.n	80040ce <_fflush_r+0xa>
 80040e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040e8:	07d0      	lsls	r0, r2, #31
 80040ea:	d404      	bmi.n	80040f6 <_fflush_r+0x32>
 80040ec:	0599      	lsls	r1, r3, #22
 80040ee:	d402      	bmi.n	80040f6 <_fflush_r+0x32>
 80040f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040f2:	f7fe fc92 	bl	8002a1a <__retarget_lock_acquire_recursive>
 80040f6:	4628      	mov	r0, r5
 80040f8:	4621      	mov	r1, r4
 80040fa:	f7ff ff5f 	bl	8003fbc <__sflush_r>
 80040fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004100:	07da      	lsls	r2, r3, #31
 8004102:	4605      	mov	r5, r0
 8004104:	d4e4      	bmi.n	80040d0 <_fflush_r+0xc>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	059b      	lsls	r3, r3, #22
 800410a:	d4e1      	bmi.n	80040d0 <_fflush_r+0xc>
 800410c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800410e:	f7fe fc85 	bl	8002a1c <__retarget_lock_release_recursive>
 8004112:	e7dd      	b.n	80040d0 <_fflush_r+0xc>

08004114 <_sbrk_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4d06      	ldr	r5, [pc, #24]	@ (8004130 <_sbrk_r+0x1c>)
 8004118:	2300      	movs	r3, #0
 800411a:	4604      	mov	r4, r0
 800411c:	4608      	mov	r0, r1
 800411e:	602b      	str	r3, [r5, #0]
 8004120:	f7fd fe02 	bl	8001d28 <_sbrk>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d102      	bne.n	800412e <_sbrk_r+0x1a>
 8004128:	682b      	ldr	r3, [r5, #0]
 800412a:	b103      	cbz	r3, 800412e <_sbrk_r+0x1a>
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	2000032c 	.word	0x2000032c

08004134 <memcpy>:
 8004134:	440a      	add	r2, r1
 8004136:	4291      	cmp	r1, r2
 8004138:	f100 33ff 	add.w	r3, r0, #4294967295
 800413c:	d100      	bne.n	8004140 <memcpy+0xc>
 800413e:	4770      	bx	lr
 8004140:	b510      	push	{r4, lr}
 8004142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800414a:	4291      	cmp	r1, r2
 800414c:	d1f9      	bne.n	8004142 <memcpy+0xe>
 800414e:	bd10      	pop	{r4, pc}

08004150 <__assert_func>:
 8004150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004152:	4614      	mov	r4, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4b09      	ldr	r3, [pc, #36]	@ (800417c <__assert_func+0x2c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4605      	mov	r5, r0
 800415c:	68d8      	ldr	r0, [r3, #12]
 800415e:	b954      	cbnz	r4, 8004176 <__assert_func+0x26>
 8004160:	4b07      	ldr	r3, [pc, #28]	@ (8004180 <__assert_func+0x30>)
 8004162:	461c      	mov	r4, r3
 8004164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004168:	9100      	str	r1, [sp, #0]
 800416a:	462b      	mov	r3, r5
 800416c:	4905      	ldr	r1, [pc, #20]	@ (8004184 <__assert_func+0x34>)
 800416e:	f000 f841 	bl	80041f4 <fiprintf>
 8004172:	f000 f851 	bl	8004218 <abort>
 8004176:	4b04      	ldr	r3, [pc, #16]	@ (8004188 <__assert_func+0x38>)
 8004178:	e7f4      	b.n	8004164 <__assert_func+0x14>
 800417a:	bf00      	nop
 800417c:	20000010 	.word	0x20000010
 8004180:	080049dd 	.word	0x080049dd
 8004184:	080049af 	.word	0x080049af
 8004188:	080049a2 	.word	0x080049a2

0800418c <_calloc_r>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	fba1 5402 	umull	r5, r4, r1, r2
 8004192:	b93c      	cbnz	r4, 80041a4 <_calloc_r+0x18>
 8004194:	4629      	mov	r1, r5
 8004196:	f7ff fb03 	bl	80037a0 <_malloc_r>
 800419a:	4606      	mov	r6, r0
 800419c:	b928      	cbnz	r0, 80041aa <_calloc_r+0x1e>
 800419e:	2600      	movs	r6, #0
 80041a0:	4630      	mov	r0, r6
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	220c      	movs	r2, #12
 80041a6:	6002      	str	r2, [r0, #0]
 80041a8:	e7f9      	b.n	800419e <_calloc_r+0x12>
 80041aa:	462a      	mov	r2, r5
 80041ac:	4621      	mov	r1, r4
 80041ae:	f7fe fbb6 	bl	800291e <memset>
 80041b2:	e7f5      	b.n	80041a0 <_calloc_r+0x14>

080041b4 <__ascii_mbtowc>:
 80041b4:	b082      	sub	sp, #8
 80041b6:	b901      	cbnz	r1, 80041ba <__ascii_mbtowc+0x6>
 80041b8:	a901      	add	r1, sp, #4
 80041ba:	b142      	cbz	r2, 80041ce <__ascii_mbtowc+0x1a>
 80041bc:	b14b      	cbz	r3, 80041d2 <__ascii_mbtowc+0x1e>
 80041be:	7813      	ldrb	r3, [r2, #0]
 80041c0:	600b      	str	r3, [r1, #0]
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	1e10      	subs	r0, r2, #0
 80041c6:	bf18      	it	ne
 80041c8:	2001      	movne	r0, #1
 80041ca:	b002      	add	sp, #8
 80041cc:	4770      	bx	lr
 80041ce:	4610      	mov	r0, r2
 80041d0:	e7fb      	b.n	80041ca <__ascii_mbtowc+0x16>
 80041d2:	f06f 0001 	mvn.w	r0, #1
 80041d6:	e7f8      	b.n	80041ca <__ascii_mbtowc+0x16>

080041d8 <__ascii_wctomb>:
 80041d8:	4603      	mov	r3, r0
 80041da:	4608      	mov	r0, r1
 80041dc:	b141      	cbz	r1, 80041f0 <__ascii_wctomb+0x18>
 80041de:	2aff      	cmp	r2, #255	@ 0xff
 80041e0:	d904      	bls.n	80041ec <__ascii_wctomb+0x14>
 80041e2:	228a      	movs	r2, #138	@ 0x8a
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ea:	4770      	bx	lr
 80041ec:	700a      	strb	r2, [r1, #0]
 80041ee:	2001      	movs	r0, #1
 80041f0:	4770      	bx	lr
	...

080041f4 <fiprintf>:
 80041f4:	b40e      	push	{r1, r2, r3}
 80041f6:	b503      	push	{r0, r1, lr}
 80041f8:	4601      	mov	r1, r0
 80041fa:	ab03      	add	r3, sp, #12
 80041fc:	4805      	ldr	r0, [pc, #20]	@ (8004214 <fiprintf+0x20>)
 80041fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004202:	6800      	ldr	r0, [r0, #0]
 8004204:	9301      	str	r3, [sp, #4]
 8004206:	f000 f837 	bl	8004278 <_vfiprintf_r>
 800420a:	b002      	add	sp, #8
 800420c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004210:	b003      	add	sp, #12
 8004212:	4770      	bx	lr
 8004214:	20000010 	.word	0x20000010

08004218 <abort>:
 8004218:	b508      	push	{r3, lr}
 800421a:	2006      	movs	r0, #6
 800421c:	f000 fa00 	bl	8004620 <raise>
 8004220:	2001      	movs	r0, #1
 8004222:	f7fd fd09 	bl	8001c38 <_exit>

08004226 <__sfputc_r>:
 8004226:	6893      	ldr	r3, [r2, #8]
 8004228:	3b01      	subs	r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	b410      	push	{r4}
 800422e:	6093      	str	r3, [r2, #8]
 8004230:	da08      	bge.n	8004244 <__sfputc_r+0x1e>
 8004232:	6994      	ldr	r4, [r2, #24]
 8004234:	42a3      	cmp	r3, r4
 8004236:	db01      	blt.n	800423c <__sfputc_r+0x16>
 8004238:	290a      	cmp	r1, #10
 800423a:	d103      	bne.n	8004244 <__sfputc_r+0x1e>
 800423c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004240:	f000 b932 	b.w	80044a8 <__swbuf_r>
 8004244:	6813      	ldr	r3, [r2, #0]
 8004246:	1c58      	adds	r0, r3, #1
 8004248:	6010      	str	r0, [r2, #0]
 800424a:	7019      	strb	r1, [r3, #0]
 800424c:	4608      	mov	r0, r1
 800424e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004252:	4770      	bx	lr

08004254 <__sfputs_r>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	4606      	mov	r6, r0
 8004258:	460f      	mov	r7, r1
 800425a:	4614      	mov	r4, r2
 800425c:	18d5      	adds	r5, r2, r3
 800425e:	42ac      	cmp	r4, r5
 8004260:	d101      	bne.n	8004266 <__sfputs_r+0x12>
 8004262:	2000      	movs	r0, #0
 8004264:	e007      	b.n	8004276 <__sfputs_r+0x22>
 8004266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800426a:	463a      	mov	r2, r7
 800426c:	4630      	mov	r0, r6
 800426e:	f7ff ffda 	bl	8004226 <__sfputc_r>
 8004272:	1c43      	adds	r3, r0, #1
 8004274:	d1f3      	bne.n	800425e <__sfputs_r+0xa>
 8004276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004278 <_vfiprintf_r>:
 8004278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427c:	460d      	mov	r5, r1
 800427e:	b09d      	sub	sp, #116	@ 0x74
 8004280:	4614      	mov	r4, r2
 8004282:	4698      	mov	r8, r3
 8004284:	4606      	mov	r6, r0
 8004286:	b118      	cbz	r0, 8004290 <_vfiprintf_r+0x18>
 8004288:	6a03      	ldr	r3, [r0, #32]
 800428a:	b90b      	cbnz	r3, 8004290 <_vfiprintf_r+0x18>
 800428c:	f7fe face 	bl	800282c <__sinit>
 8004290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004292:	07d9      	lsls	r1, r3, #31
 8004294:	d405      	bmi.n	80042a2 <_vfiprintf_r+0x2a>
 8004296:	89ab      	ldrh	r3, [r5, #12]
 8004298:	059a      	lsls	r2, r3, #22
 800429a:	d402      	bmi.n	80042a2 <_vfiprintf_r+0x2a>
 800429c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800429e:	f7fe fbbc 	bl	8002a1a <__retarget_lock_acquire_recursive>
 80042a2:	89ab      	ldrh	r3, [r5, #12]
 80042a4:	071b      	lsls	r3, r3, #28
 80042a6:	d501      	bpl.n	80042ac <_vfiprintf_r+0x34>
 80042a8:	692b      	ldr	r3, [r5, #16]
 80042aa:	b99b      	cbnz	r3, 80042d4 <_vfiprintf_r+0x5c>
 80042ac:	4629      	mov	r1, r5
 80042ae:	4630      	mov	r0, r6
 80042b0:	f000 f938 	bl	8004524 <__swsetup_r>
 80042b4:	b170      	cbz	r0, 80042d4 <_vfiprintf_r+0x5c>
 80042b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042b8:	07dc      	lsls	r4, r3, #31
 80042ba:	d504      	bpl.n	80042c6 <_vfiprintf_r+0x4e>
 80042bc:	f04f 30ff 	mov.w	r0, #4294967295
 80042c0:	b01d      	add	sp, #116	@ 0x74
 80042c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c6:	89ab      	ldrh	r3, [r5, #12]
 80042c8:	0598      	lsls	r0, r3, #22
 80042ca:	d4f7      	bmi.n	80042bc <_vfiprintf_r+0x44>
 80042cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042ce:	f7fe fba5 	bl	8002a1c <__retarget_lock_release_recursive>
 80042d2:	e7f3      	b.n	80042bc <_vfiprintf_r+0x44>
 80042d4:	2300      	movs	r3, #0
 80042d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d8:	2320      	movs	r3, #32
 80042da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042de:	f8cd 800c 	str.w	r8, [sp, #12]
 80042e2:	2330      	movs	r3, #48	@ 0x30
 80042e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004494 <_vfiprintf_r+0x21c>
 80042e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042ec:	f04f 0901 	mov.w	r9, #1
 80042f0:	4623      	mov	r3, r4
 80042f2:	469a      	mov	sl, r3
 80042f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f8:	b10a      	cbz	r2, 80042fe <_vfiprintf_r+0x86>
 80042fa:	2a25      	cmp	r2, #37	@ 0x25
 80042fc:	d1f9      	bne.n	80042f2 <_vfiprintf_r+0x7a>
 80042fe:	ebba 0b04 	subs.w	fp, sl, r4
 8004302:	d00b      	beq.n	800431c <_vfiprintf_r+0xa4>
 8004304:	465b      	mov	r3, fp
 8004306:	4622      	mov	r2, r4
 8004308:	4629      	mov	r1, r5
 800430a:	4630      	mov	r0, r6
 800430c:	f7ff ffa2 	bl	8004254 <__sfputs_r>
 8004310:	3001      	adds	r0, #1
 8004312:	f000 80a7 	beq.w	8004464 <_vfiprintf_r+0x1ec>
 8004316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004318:	445a      	add	r2, fp
 800431a:	9209      	str	r2, [sp, #36]	@ 0x24
 800431c:	f89a 3000 	ldrb.w	r3, [sl]
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 809f 	beq.w	8004464 <_vfiprintf_r+0x1ec>
 8004326:	2300      	movs	r3, #0
 8004328:	f04f 32ff 	mov.w	r2, #4294967295
 800432c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004330:	f10a 0a01 	add.w	sl, sl, #1
 8004334:	9304      	str	r3, [sp, #16]
 8004336:	9307      	str	r3, [sp, #28]
 8004338:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800433c:	931a      	str	r3, [sp, #104]	@ 0x68
 800433e:	4654      	mov	r4, sl
 8004340:	2205      	movs	r2, #5
 8004342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004346:	4853      	ldr	r0, [pc, #332]	@ (8004494 <_vfiprintf_r+0x21c>)
 8004348:	f7fb ff42 	bl	80001d0 <memchr>
 800434c:	9a04      	ldr	r2, [sp, #16]
 800434e:	b9d8      	cbnz	r0, 8004388 <_vfiprintf_r+0x110>
 8004350:	06d1      	lsls	r1, r2, #27
 8004352:	bf44      	itt	mi
 8004354:	2320      	movmi	r3, #32
 8004356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800435a:	0713      	lsls	r3, r2, #28
 800435c:	bf44      	itt	mi
 800435e:	232b      	movmi	r3, #43	@ 0x2b
 8004360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004364:	f89a 3000 	ldrb.w	r3, [sl]
 8004368:	2b2a      	cmp	r3, #42	@ 0x2a
 800436a:	d015      	beq.n	8004398 <_vfiprintf_r+0x120>
 800436c:	9a07      	ldr	r2, [sp, #28]
 800436e:	4654      	mov	r4, sl
 8004370:	2000      	movs	r0, #0
 8004372:	f04f 0c0a 	mov.w	ip, #10
 8004376:	4621      	mov	r1, r4
 8004378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800437c:	3b30      	subs	r3, #48	@ 0x30
 800437e:	2b09      	cmp	r3, #9
 8004380:	d94b      	bls.n	800441a <_vfiprintf_r+0x1a2>
 8004382:	b1b0      	cbz	r0, 80043b2 <_vfiprintf_r+0x13a>
 8004384:	9207      	str	r2, [sp, #28]
 8004386:	e014      	b.n	80043b2 <_vfiprintf_r+0x13a>
 8004388:	eba0 0308 	sub.w	r3, r0, r8
 800438c:	fa09 f303 	lsl.w	r3, r9, r3
 8004390:	4313      	orrs	r3, r2
 8004392:	9304      	str	r3, [sp, #16]
 8004394:	46a2      	mov	sl, r4
 8004396:	e7d2      	b.n	800433e <_vfiprintf_r+0xc6>
 8004398:	9b03      	ldr	r3, [sp, #12]
 800439a:	1d19      	adds	r1, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	9103      	str	r1, [sp, #12]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	bfbb      	ittet	lt
 80043a4:	425b      	neglt	r3, r3
 80043a6:	f042 0202 	orrlt.w	r2, r2, #2
 80043aa:	9307      	strge	r3, [sp, #28]
 80043ac:	9307      	strlt	r3, [sp, #28]
 80043ae:	bfb8      	it	lt
 80043b0:	9204      	strlt	r2, [sp, #16]
 80043b2:	7823      	ldrb	r3, [r4, #0]
 80043b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80043b6:	d10a      	bne.n	80043ce <_vfiprintf_r+0x156>
 80043b8:	7863      	ldrb	r3, [r4, #1]
 80043ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80043bc:	d132      	bne.n	8004424 <_vfiprintf_r+0x1ac>
 80043be:	9b03      	ldr	r3, [sp, #12]
 80043c0:	1d1a      	adds	r2, r3, #4
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	9203      	str	r2, [sp, #12]
 80043c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043ca:	3402      	adds	r4, #2
 80043cc:	9305      	str	r3, [sp, #20]
 80043ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80044a4 <_vfiprintf_r+0x22c>
 80043d2:	7821      	ldrb	r1, [r4, #0]
 80043d4:	2203      	movs	r2, #3
 80043d6:	4650      	mov	r0, sl
 80043d8:	f7fb fefa 	bl	80001d0 <memchr>
 80043dc:	b138      	cbz	r0, 80043ee <_vfiprintf_r+0x176>
 80043de:	9b04      	ldr	r3, [sp, #16]
 80043e0:	eba0 000a 	sub.w	r0, r0, sl
 80043e4:	2240      	movs	r2, #64	@ 0x40
 80043e6:	4082      	lsls	r2, r0
 80043e8:	4313      	orrs	r3, r2
 80043ea:	3401      	adds	r4, #1
 80043ec:	9304      	str	r3, [sp, #16]
 80043ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f2:	4829      	ldr	r0, [pc, #164]	@ (8004498 <_vfiprintf_r+0x220>)
 80043f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043f8:	2206      	movs	r2, #6
 80043fa:	f7fb fee9 	bl	80001d0 <memchr>
 80043fe:	2800      	cmp	r0, #0
 8004400:	d03f      	beq.n	8004482 <_vfiprintf_r+0x20a>
 8004402:	4b26      	ldr	r3, [pc, #152]	@ (800449c <_vfiprintf_r+0x224>)
 8004404:	bb1b      	cbnz	r3, 800444e <_vfiprintf_r+0x1d6>
 8004406:	9b03      	ldr	r3, [sp, #12]
 8004408:	3307      	adds	r3, #7
 800440a:	f023 0307 	bic.w	r3, r3, #7
 800440e:	3308      	adds	r3, #8
 8004410:	9303      	str	r3, [sp, #12]
 8004412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004414:	443b      	add	r3, r7
 8004416:	9309      	str	r3, [sp, #36]	@ 0x24
 8004418:	e76a      	b.n	80042f0 <_vfiprintf_r+0x78>
 800441a:	fb0c 3202 	mla	r2, ip, r2, r3
 800441e:	460c      	mov	r4, r1
 8004420:	2001      	movs	r0, #1
 8004422:	e7a8      	b.n	8004376 <_vfiprintf_r+0xfe>
 8004424:	2300      	movs	r3, #0
 8004426:	3401      	adds	r4, #1
 8004428:	9305      	str	r3, [sp, #20]
 800442a:	4619      	mov	r1, r3
 800442c:	f04f 0c0a 	mov.w	ip, #10
 8004430:	4620      	mov	r0, r4
 8004432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004436:	3a30      	subs	r2, #48	@ 0x30
 8004438:	2a09      	cmp	r2, #9
 800443a:	d903      	bls.n	8004444 <_vfiprintf_r+0x1cc>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0c6      	beq.n	80043ce <_vfiprintf_r+0x156>
 8004440:	9105      	str	r1, [sp, #20]
 8004442:	e7c4      	b.n	80043ce <_vfiprintf_r+0x156>
 8004444:	fb0c 2101 	mla	r1, ip, r1, r2
 8004448:	4604      	mov	r4, r0
 800444a:	2301      	movs	r3, #1
 800444c:	e7f0      	b.n	8004430 <_vfiprintf_r+0x1b8>
 800444e:	ab03      	add	r3, sp, #12
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	462a      	mov	r2, r5
 8004454:	4b12      	ldr	r3, [pc, #72]	@ (80044a0 <_vfiprintf_r+0x228>)
 8004456:	a904      	add	r1, sp, #16
 8004458:	4630      	mov	r0, r6
 800445a:	f7fd fda3 	bl	8001fa4 <_printf_float>
 800445e:	4607      	mov	r7, r0
 8004460:	1c78      	adds	r0, r7, #1
 8004462:	d1d6      	bne.n	8004412 <_vfiprintf_r+0x19a>
 8004464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004466:	07d9      	lsls	r1, r3, #31
 8004468:	d405      	bmi.n	8004476 <_vfiprintf_r+0x1fe>
 800446a:	89ab      	ldrh	r3, [r5, #12]
 800446c:	059a      	lsls	r2, r3, #22
 800446e:	d402      	bmi.n	8004476 <_vfiprintf_r+0x1fe>
 8004470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004472:	f7fe fad3 	bl	8002a1c <__retarget_lock_release_recursive>
 8004476:	89ab      	ldrh	r3, [r5, #12]
 8004478:	065b      	lsls	r3, r3, #25
 800447a:	f53f af1f 	bmi.w	80042bc <_vfiprintf_r+0x44>
 800447e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004480:	e71e      	b.n	80042c0 <_vfiprintf_r+0x48>
 8004482:	ab03      	add	r3, sp, #12
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	462a      	mov	r2, r5
 8004488:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <_vfiprintf_r+0x228>)
 800448a:	a904      	add	r1, sp, #16
 800448c:	4630      	mov	r0, r6
 800448e:	f7fe f821 	bl	80024d4 <_printf_i>
 8004492:	e7e4      	b.n	800445e <_vfiprintf_r+0x1e6>
 8004494:	08004adf 	.word	0x08004adf
 8004498:	08004ae9 	.word	0x08004ae9
 800449c:	08001fa5 	.word	0x08001fa5
 80044a0:	08004255 	.word	0x08004255
 80044a4:	08004ae5 	.word	0x08004ae5

080044a8 <__swbuf_r>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	460e      	mov	r6, r1
 80044ac:	4614      	mov	r4, r2
 80044ae:	4605      	mov	r5, r0
 80044b0:	b118      	cbz	r0, 80044ba <__swbuf_r+0x12>
 80044b2:	6a03      	ldr	r3, [r0, #32]
 80044b4:	b90b      	cbnz	r3, 80044ba <__swbuf_r+0x12>
 80044b6:	f7fe f9b9 	bl	800282c <__sinit>
 80044ba:	69a3      	ldr	r3, [r4, #24]
 80044bc:	60a3      	str	r3, [r4, #8]
 80044be:	89a3      	ldrh	r3, [r4, #12]
 80044c0:	071a      	lsls	r2, r3, #28
 80044c2:	d501      	bpl.n	80044c8 <__swbuf_r+0x20>
 80044c4:	6923      	ldr	r3, [r4, #16]
 80044c6:	b943      	cbnz	r3, 80044da <__swbuf_r+0x32>
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f82a 	bl	8004524 <__swsetup_r>
 80044d0:	b118      	cbz	r0, 80044da <__swbuf_r+0x32>
 80044d2:	f04f 37ff 	mov.w	r7, #4294967295
 80044d6:	4638      	mov	r0, r7
 80044d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	6922      	ldr	r2, [r4, #16]
 80044de:	1a98      	subs	r0, r3, r2
 80044e0:	6963      	ldr	r3, [r4, #20]
 80044e2:	b2f6      	uxtb	r6, r6
 80044e4:	4283      	cmp	r3, r0
 80044e6:	4637      	mov	r7, r6
 80044e8:	dc05      	bgt.n	80044f6 <__swbuf_r+0x4e>
 80044ea:	4621      	mov	r1, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	f7ff fde9 	bl	80040c4 <_fflush_r>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d1ed      	bne.n	80044d2 <__swbuf_r+0x2a>
 80044f6:	68a3      	ldr	r3, [r4, #8]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	60a3      	str	r3, [r4, #8]
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	6022      	str	r2, [r4, #0]
 8004502:	701e      	strb	r6, [r3, #0]
 8004504:	6962      	ldr	r2, [r4, #20]
 8004506:	1c43      	adds	r3, r0, #1
 8004508:	429a      	cmp	r2, r3
 800450a:	d004      	beq.n	8004516 <__swbuf_r+0x6e>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	07db      	lsls	r3, r3, #31
 8004510:	d5e1      	bpl.n	80044d6 <__swbuf_r+0x2e>
 8004512:	2e0a      	cmp	r6, #10
 8004514:	d1df      	bne.n	80044d6 <__swbuf_r+0x2e>
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f7ff fdd3 	bl	80040c4 <_fflush_r>
 800451e:	2800      	cmp	r0, #0
 8004520:	d0d9      	beq.n	80044d6 <__swbuf_r+0x2e>
 8004522:	e7d6      	b.n	80044d2 <__swbuf_r+0x2a>

08004524 <__swsetup_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4b29      	ldr	r3, [pc, #164]	@ (80045cc <__swsetup_r+0xa8>)
 8004528:	4605      	mov	r5, r0
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	460c      	mov	r4, r1
 800452e:	b118      	cbz	r0, 8004538 <__swsetup_r+0x14>
 8004530:	6a03      	ldr	r3, [r0, #32]
 8004532:	b90b      	cbnz	r3, 8004538 <__swsetup_r+0x14>
 8004534:	f7fe f97a 	bl	800282c <__sinit>
 8004538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800453c:	0719      	lsls	r1, r3, #28
 800453e:	d422      	bmi.n	8004586 <__swsetup_r+0x62>
 8004540:	06da      	lsls	r2, r3, #27
 8004542:	d407      	bmi.n	8004554 <__swsetup_r+0x30>
 8004544:	2209      	movs	r2, #9
 8004546:	602a      	str	r2, [r5, #0]
 8004548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	f04f 30ff 	mov.w	r0, #4294967295
 8004552:	e033      	b.n	80045bc <__swsetup_r+0x98>
 8004554:	0758      	lsls	r0, r3, #29
 8004556:	d512      	bpl.n	800457e <__swsetup_r+0x5a>
 8004558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800455a:	b141      	cbz	r1, 800456e <__swsetup_r+0x4a>
 800455c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004560:	4299      	cmp	r1, r3
 8004562:	d002      	beq.n	800456a <__swsetup_r+0x46>
 8004564:	4628      	mov	r0, r5
 8004566:	f7ff f8a7 	bl	80036b8 <_free_r>
 800456a:	2300      	movs	r3, #0
 800456c:	6363      	str	r3, [r4, #52]	@ 0x34
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	2300      	movs	r3, #0
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	b94b      	cbnz	r3, 800459e <__swsetup_r+0x7a>
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004594:	d003      	beq.n	800459e <__swsetup_r+0x7a>
 8004596:	4621      	mov	r1, r4
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f883 	bl	80046a4 <__smakebuf_r>
 800459e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045a2:	f013 0201 	ands.w	r2, r3, #1
 80045a6:	d00a      	beq.n	80045be <__swsetup_r+0x9a>
 80045a8:	2200      	movs	r2, #0
 80045aa:	60a2      	str	r2, [r4, #8]
 80045ac:	6962      	ldr	r2, [r4, #20]
 80045ae:	4252      	negs	r2, r2
 80045b0:	61a2      	str	r2, [r4, #24]
 80045b2:	6922      	ldr	r2, [r4, #16]
 80045b4:	b942      	cbnz	r2, 80045c8 <__swsetup_r+0xa4>
 80045b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80045ba:	d1c5      	bne.n	8004548 <__swsetup_r+0x24>
 80045bc:	bd38      	pop	{r3, r4, r5, pc}
 80045be:	0799      	lsls	r1, r3, #30
 80045c0:	bf58      	it	pl
 80045c2:	6962      	ldrpl	r2, [r4, #20]
 80045c4:	60a2      	str	r2, [r4, #8]
 80045c6:	e7f4      	b.n	80045b2 <__swsetup_r+0x8e>
 80045c8:	2000      	movs	r0, #0
 80045ca:	e7f7      	b.n	80045bc <__swsetup_r+0x98>
 80045cc:	20000010 	.word	0x20000010

080045d0 <_raise_r>:
 80045d0:	291f      	cmp	r1, #31
 80045d2:	b538      	push	{r3, r4, r5, lr}
 80045d4:	4605      	mov	r5, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	d904      	bls.n	80045e4 <_raise_r+0x14>
 80045da:	2316      	movs	r3, #22
 80045dc:	6003      	str	r3, [r0, #0]
 80045de:	f04f 30ff 	mov.w	r0, #4294967295
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80045e6:	b112      	cbz	r2, 80045ee <_raise_r+0x1e>
 80045e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045ec:	b94b      	cbnz	r3, 8004602 <_raise_r+0x32>
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f830 	bl	8004654 <_getpid_r>
 80045f4:	4622      	mov	r2, r4
 80045f6:	4601      	mov	r1, r0
 80045f8:	4628      	mov	r0, r5
 80045fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045fe:	f000 b817 	b.w	8004630 <_kill_r>
 8004602:	2b01      	cmp	r3, #1
 8004604:	d00a      	beq.n	800461c <_raise_r+0x4c>
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	d103      	bne.n	8004612 <_raise_r+0x42>
 800460a:	2316      	movs	r3, #22
 800460c:	6003      	str	r3, [r0, #0]
 800460e:	2001      	movs	r0, #1
 8004610:	e7e7      	b.n	80045e2 <_raise_r+0x12>
 8004612:	2100      	movs	r1, #0
 8004614:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004618:	4620      	mov	r0, r4
 800461a:	4798      	blx	r3
 800461c:	2000      	movs	r0, #0
 800461e:	e7e0      	b.n	80045e2 <_raise_r+0x12>

08004620 <raise>:
 8004620:	4b02      	ldr	r3, [pc, #8]	@ (800462c <raise+0xc>)
 8004622:	4601      	mov	r1, r0
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f7ff bfd3 	b.w	80045d0 <_raise_r>
 800462a:	bf00      	nop
 800462c:	20000010 	.word	0x20000010

08004630 <_kill_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4d07      	ldr	r5, [pc, #28]	@ (8004650 <_kill_r+0x20>)
 8004634:	2300      	movs	r3, #0
 8004636:	4604      	mov	r4, r0
 8004638:	4608      	mov	r0, r1
 800463a:	4611      	mov	r1, r2
 800463c:	602b      	str	r3, [r5, #0]
 800463e:	f7fd faeb 	bl	8001c18 <_kill>
 8004642:	1c43      	adds	r3, r0, #1
 8004644:	d102      	bne.n	800464c <_kill_r+0x1c>
 8004646:	682b      	ldr	r3, [r5, #0]
 8004648:	b103      	cbz	r3, 800464c <_kill_r+0x1c>
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	bd38      	pop	{r3, r4, r5, pc}
 800464e:	bf00      	nop
 8004650:	2000032c 	.word	0x2000032c

08004654 <_getpid_r>:
 8004654:	f7fd bad8 	b.w	8001c08 <_getpid>

08004658 <__swhatbuf_r>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	460c      	mov	r4, r1
 800465c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004660:	2900      	cmp	r1, #0
 8004662:	b096      	sub	sp, #88	@ 0x58
 8004664:	4615      	mov	r5, r2
 8004666:	461e      	mov	r6, r3
 8004668:	da0d      	bge.n	8004686 <__swhatbuf_r+0x2e>
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004670:	f04f 0100 	mov.w	r1, #0
 8004674:	bf14      	ite	ne
 8004676:	2340      	movne	r3, #64	@ 0x40
 8004678:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800467c:	2000      	movs	r0, #0
 800467e:	6031      	str	r1, [r6, #0]
 8004680:	602b      	str	r3, [r5, #0]
 8004682:	b016      	add	sp, #88	@ 0x58
 8004684:	bd70      	pop	{r4, r5, r6, pc}
 8004686:	466a      	mov	r2, sp
 8004688:	f000 f848 	bl	800471c <_fstat_r>
 800468c:	2800      	cmp	r0, #0
 800468e:	dbec      	blt.n	800466a <__swhatbuf_r+0x12>
 8004690:	9901      	ldr	r1, [sp, #4]
 8004692:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004696:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800469a:	4259      	negs	r1, r3
 800469c:	4159      	adcs	r1, r3
 800469e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046a2:	e7eb      	b.n	800467c <__swhatbuf_r+0x24>

080046a4 <__smakebuf_r>:
 80046a4:	898b      	ldrh	r3, [r1, #12]
 80046a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046a8:	079d      	lsls	r5, r3, #30
 80046aa:	4606      	mov	r6, r0
 80046ac:	460c      	mov	r4, r1
 80046ae:	d507      	bpl.n	80046c0 <__smakebuf_r+0x1c>
 80046b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	6123      	str	r3, [r4, #16]
 80046b8:	2301      	movs	r3, #1
 80046ba:	6163      	str	r3, [r4, #20]
 80046bc:	b003      	add	sp, #12
 80046be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046c0:	ab01      	add	r3, sp, #4
 80046c2:	466a      	mov	r2, sp
 80046c4:	f7ff ffc8 	bl	8004658 <__swhatbuf_r>
 80046c8:	9f00      	ldr	r7, [sp, #0]
 80046ca:	4605      	mov	r5, r0
 80046cc:	4639      	mov	r1, r7
 80046ce:	4630      	mov	r0, r6
 80046d0:	f7ff f866 	bl	80037a0 <_malloc_r>
 80046d4:	b948      	cbnz	r0, 80046ea <__smakebuf_r+0x46>
 80046d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046da:	059a      	lsls	r2, r3, #22
 80046dc:	d4ee      	bmi.n	80046bc <__smakebuf_r+0x18>
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	f043 0302 	orr.w	r3, r3, #2
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	e7e2      	b.n	80046b0 <__smakebuf_r+0xc>
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	6020      	str	r0, [r4, #0]
 80046ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046f2:	81a3      	strh	r3, [r4, #12]
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80046fa:	b15b      	cbz	r3, 8004714 <__smakebuf_r+0x70>
 80046fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004700:	4630      	mov	r0, r6
 8004702:	f000 f81d 	bl	8004740 <_isatty_r>
 8004706:	b128      	cbz	r0, 8004714 <__smakebuf_r+0x70>
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	f023 0303 	bic.w	r3, r3, #3
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	81a3      	strh	r3, [r4, #12]
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	431d      	orrs	r5, r3
 8004718:	81a5      	strh	r5, [r4, #12]
 800471a:	e7cf      	b.n	80046bc <__smakebuf_r+0x18>

0800471c <_fstat_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	4d07      	ldr	r5, [pc, #28]	@ (800473c <_fstat_r+0x20>)
 8004720:	2300      	movs	r3, #0
 8004722:	4604      	mov	r4, r0
 8004724:	4608      	mov	r0, r1
 8004726:	4611      	mov	r1, r2
 8004728:	602b      	str	r3, [r5, #0]
 800472a:	f7fd fad5 	bl	8001cd8 <_fstat>
 800472e:	1c43      	adds	r3, r0, #1
 8004730:	d102      	bne.n	8004738 <_fstat_r+0x1c>
 8004732:	682b      	ldr	r3, [r5, #0]
 8004734:	b103      	cbz	r3, 8004738 <_fstat_r+0x1c>
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	bd38      	pop	{r3, r4, r5, pc}
 800473a:	bf00      	nop
 800473c:	2000032c 	.word	0x2000032c

08004740 <_isatty_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d06      	ldr	r5, [pc, #24]	@ (800475c <_isatty_r+0x1c>)
 8004744:	2300      	movs	r3, #0
 8004746:	4604      	mov	r4, r0
 8004748:	4608      	mov	r0, r1
 800474a:	602b      	str	r3, [r5, #0]
 800474c:	f7fd fad4 	bl	8001cf8 <_isatty>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_isatty_r+0x1a>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_isatty_r+0x1a>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	2000032c 	.word	0x2000032c

08004760 <_init>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr

0800476c <_fini>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr
