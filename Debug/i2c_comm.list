
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08005e68  08005e68  00006e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006218  08006218  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006218  08006218  00007218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006220  08006220  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006220  08006220  00007220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006224  08006224  00007224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006228  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200001d4  080063fc  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  080063fc  00008464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b651  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ca  00000000  00000000  00013855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  00015d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000837  00000000  00000000  00016820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d5b6  00000000  00000000  00017057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9bf  00000000  00000000  0003460d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a55ed  00000000  00000000  00042fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e85b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c70  00000000  00000000  000e85fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000ec26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e50 	.word	0x08005e50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08005e50 	.word	0x08005e50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	@ (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f92b 	bl	8000e14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f002 f884 	bl	8002cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f943 	bl	8000e7e <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f90b 	bl	8000e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	20000000 	.word	0x20000000

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000004 	.word	0x20000004
 8000c58:	200001f0 	.word	0x200001f0

08000c5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200001f0 	.word	0x200001f0

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	@ (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	@ (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	@ 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000de0:	d301      	bcc.n	8000de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00f      	b.n	8000e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <SysTick_Config+0x40>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dee:	210f      	movs	r1, #15
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f7ff ff8e 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df8:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <SysTick_Config+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <SysTick_Config+0x40>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f7ff ff29 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
 8000e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3c:	f7ff ff3e 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	6978      	ldr	r0, [r7, #20]
 8000e48:	f7ff ff8e 	bl	8000d68 <NVIC_EncodePriority>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	bf00      	nop
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff31 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa2 	bl	8000dd0 <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b084      	sub	sp, #16
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e037      	b.n	8000f1c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2202      	movs	r2, #2
 8000eb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000ec2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f8b4 	bl	800106c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	2204      	movs	r2, #4
 8000f42:	409a      	lsls	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d024      	beq.n	8000f96 <HAL_DMA_IRQHandler+0x72>
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	f003 0304 	and.w	r3, r3, #4
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d01f      	beq.n	8000f96 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0320 	and.w	r3, r3, #32
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d107      	bne.n	8000f74 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0204 	bic.w	r2, r2, #4
 8000f72:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f82:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d06a      	beq.n	8001062 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000f94:	e065      	b.n	8001062 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d02c      	beq.n	8001000 <HAL_DMA_IRQHandler+0xdc>
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d027      	beq.n	8001000 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0320 	and.w	r3, r3, #32
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 020a 	bic.w	r2, r2, #10
 8000fcc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fde:	2102      	movs	r1, #2
 8000fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d035      	beq.n	8001062 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ffe:	e030      	b.n	8001062 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	2208      	movs	r2, #8
 8001006:	409a      	lsls	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4013      	ands	r3, r2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d028      	beq.n	8001062 <HAL_DMA_IRQHandler+0x13e>
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d023      	beq.n	8001062 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 020e 	bic.w	r2, r2, #14
 8001028:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2201      	movs	r2, #1
 8001044:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001054:	2b00      	cmp	r3, #0
 8001056:	d004      	beq.n	8001062 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	4798      	blx	r3
    }
  }
}
 8001060:	e7ff      	b.n	8001062 <HAL_DMA_IRQHandler+0x13e>
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <DMA_CalcBaseAndBitshift+0x34>)
 800107c:	4413      	add	r3, r2
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <DMA_CalcBaseAndBitshift+0x38>)
 8001080:	fba2 2303 	umull	r2, r3, r2, r3
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	009a      	lsls	r2, r3, #2
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a06      	ldr	r2, [pc, #24]	@ (80010a8 <DMA_CalcBaseAndBitshift+0x3c>)
 8001090:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	bffdfff8 	.word	0xbffdfff8
 80010a4:	cccccccd 	.word	0xcccccccd
 80010a8:	40020000 	.word	0x40020000

080010ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ba:	e14e      	b.n	800135a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2101      	movs	r1, #1
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8140 	beq.w	8001354 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d005      	beq.n	80010ec <HAL_GPIO_Init+0x40>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d130      	bne.n	800114e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	2203      	movs	r2, #3
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001122:	2201      	movs	r2, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	f003 0201 	and.w	r2, r3, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b03      	cmp	r3, #3
 8001158:	d017      	beq.n	800118a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d123      	bne.n	80011de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	08da      	lsrs	r2, r3, #3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3208      	adds	r2, #8
 80011d8:	6939      	ldr	r1, [r7, #16]
 80011da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 0203 	and.w	r2, r3, #3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 809a 	beq.w	8001354 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001220:	4b55      	ldr	r3, [pc, #340]	@ (8001378 <HAL_GPIO_Init+0x2cc>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a54      	ldr	r2, [pc, #336]	@ (8001378 <HAL_GPIO_Init+0x2cc>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b52      	ldr	r3, [pc, #328]	@ (8001378 <HAL_GPIO_Init+0x2cc>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001238:	4a50      	ldr	r2, [pc, #320]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001262:	d013      	beq.n	800128c <HAL_GPIO_Init+0x1e0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a46      	ldr	r2, [pc, #280]	@ (8001380 <HAL_GPIO_Init+0x2d4>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d00d      	beq.n	8001288 <HAL_GPIO_Init+0x1dc>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a45      	ldr	r2, [pc, #276]	@ (8001384 <HAL_GPIO_Init+0x2d8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d007      	beq.n	8001284 <HAL_GPIO_Init+0x1d8>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a44      	ldr	r2, [pc, #272]	@ (8001388 <HAL_GPIO_Init+0x2dc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_GPIO_Init+0x1d4>
 800127c:	2303      	movs	r3, #3
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x1e2>
 8001280:	2305      	movs	r3, #5
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x1e2>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x1e2>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x1e2>
 800128c:	2300      	movs	r3, #0
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800129e:	4937      	ldr	r1, [pc, #220]	@ (800137c <HAL_GPIO_Init+0x2d0>)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ac:	4b37      	ldr	r3, [pc, #220]	@ (800138c <HAL_GPIO_Init+0x2e0>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d0:	4a2e      	ldr	r2, [pc, #184]	@ (800138c <HAL_GPIO_Init+0x2e0>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_GPIO_Init+0x2e0>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	43db      	mvns	r3, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4013      	ands	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012fa:	4a24      	ldr	r2, [pc, #144]	@ (800138c <HAL_GPIO_Init+0x2e0>)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001300:	4b22      	ldr	r3, [pc, #136]	@ (800138c <HAL_GPIO_Init+0x2e0>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001324:	4a19      	ldr	r2, [pc, #100]	@ (800138c <HAL_GPIO_Init+0x2e0>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132a:	4b18      	ldr	r3, [pc, #96]	@ (800138c <HAL_GPIO_Init+0x2e0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800134e:	4a0f      	ldr	r2, [pc, #60]	@ (800138c <HAL_GPIO_Init+0x2e0>)
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f aea9 	bne.w	80010bc <HAL_GPIO_Init+0x10>
  }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	40021000 	.word	0x40021000
 800137c:	40010000 	.word	0x40010000
 8001380:	48000400 	.word	0x48000400
 8001384:	48000800 	.word	0x48000800
 8001388:	48000c00 	.word	0x48000c00
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001424 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d002      	beq.n	80013c0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d003      	beq.n	80013c6 <HAL_RCC_GetSysClockFreq+0x36>
 80013be:	e026      	b.n	800140e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013c0:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 80013c2:	613b      	str	r3, [r7, #16]
      break;
 80013c4:	e026      	b.n	8001414 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4a17      	ldr	r2, [pc, #92]	@ (800142c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80013d4:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <HAL_RCC_GetSysClockFreq+0x94>)
 80013d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e004      	b.n	8001408 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a0c      	ldr	r2, [pc, #48]	@ (8001434 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
      break;
 800140c:	e002      	b.n	8001414 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_RCC_GetSysClockFreq+0x98>)
 8001410:	613b      	str	r3, [r7, #16]
      break;
 8001412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001414:	693b      	ldr	r3, [r7, #16]
}
 8001416:	4618      	mov	r0, r3
 8001418:	371c      	adds	r7, #28
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	007a1200 	.word	0x007a1200
 800142c:	08005e80 	.word	0x08005e80
 8001430:	08005e90 	.word	0x08005e90
 8001434:	003d0900 	.word	0x003d0900

08001438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <HAL_RCC_GetHCLKFreq+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001456:	f7ff ffef 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 800145a:	4601      	mov	r1, r0
 800145c:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001464:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001468:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	fa92 f2a2 	rbit	r2, r2
 8001470:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	fab2 f282 	clz	r2, r2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	40d3      	lsrs	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_RCC_GetPCLK1Freq+0x40>)
 800147e:	5cd3      	ldrb	r3, [r2, r3]
 8001480:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40021000 	.word	0x40021000
 8001490:	08005ea0 	.word	0x08005ea0

08001494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800149a:	f7ff ffcd 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 800149e:	4601      	mov	r1, r0
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80014a8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80014ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	fa92 f2a2 	rbit	r2, r2
 80014b4:	603a      	str	r2, [r7, #0]
  return result;
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	fab2 f282 	clz	r2, r2
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	40d3      	lsrs	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40021000 	.word	0x40021000
 80014d4:	08005ea0 	.word	0x08005ea0

080014d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e040      	b.n	800156c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f001 fd9e 	bl	800303c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	@ 0x24
 8001504:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f9e8 	bl	80018f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f8af 	bl	8001688 <UART_SetConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e01b      	b.n	800156c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0201 	orr.w	r2, r2, #1
 8001562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 fa67 	bl	8001a38 <UART_CheckIdleState>
 800156a:	4603      	mov	r3, r0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4613      	mov	r3, r2
 8001582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001588:	2b20      	cmp	r3, #32
 800158a:	d177      	bne.n	800167c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_UART_Transmit+0x24>
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e070      	b.n	800167e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2221      	movs	r2, #33	@ 0x21
 80015a8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015aa:	f7ff fb57 	bl	8000c5c <HAL_GetTick>
 80015ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	88fa      	ldrh	r2, [r7, #6]
 80015b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	88fa      	ldrh	r2, [r7, #6]
 80015bc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015c8:	d108      	bne.n	80015dc <HAL_UART_Transmit+0x68>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d104      	bne.n	80015dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	e003      	b.n	80015e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80015e4:	e02f      	b.n	8001646 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2200      	movs	r2, #0
 80015ee:	2180      	movs	r1, #128	@ 0x80
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 fac9 	bl	8001b88 <UART_WaitOnFlagUntilTimeout>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d004      	beq.n	8001606 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2220      	movs	r2, #32
 8001600:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e03b      	b.n	800167e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10b      	bne.n	8001624 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	881a      	ldrh	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001618:	b292      	uxth	r2, r2
 800161a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	3302      	adds	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	e007      	b.n	8001634 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800164c:	b29b      	uxth	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1c9      	bne.n	80015e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2200      	movs	r2, #0
 800165a:	2140      	movs	r1, #64	@ 0x40
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 fa93 	bl	8001b88 <UART_WaitOnFlagUntilTimeout>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2220      	movs	r2, #32
 800166c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e005      	b.n	800167e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2220      	movs	r2, #32
 8001676:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	e000      	b.n	800167e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800167c:	2302      	movs	r3, #2
  }
}
 800167e:	4618      	mov	r0, r3
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b8a      	ldr	r3, [pc, #552]	@ (80018dc <UART_SetConfig+0x254>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	6979      	ldr	r1, [r7, #20]
 80016bc:	430b      	orrs	r3, r1
 80016be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a78      	ldr	r2, [pc, #480]	@ (80018e0 <UART_SetConfig+0x258>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d120      	bne.n	8001746 <UART_SetConfig+0xbe>
 8001704:	4b77      	ldr	r3, [pc, #476]	@ (80018e4 <UART_SetConfig+0x25c>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b03      	cmp	r3, #3
 800170e:	d817      	bhi.n	8001740 <UART_SetConfig+0xb8>
 8001710:	a201      	add	r2, pc, #4	@ (adr r2, 8001718 <UART_SetConfig+0x90>)
 8001712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001716:	bf00      	nop
 8001718:	08001729 	.word	0x08001729
 800171c:	08001735 	.word	0x08001735
 8001720:	0800173b 	.word	0x0800173b
 8001724:	0800172f 	.word	0x0800172f
 8001728:	2300      	movs	r3, #0
 800172a:	77fb      	strb	r3, [r7, #31]
 800172c:	e01d      	b.n	800176a <UART_SetConfig+0xe2>
 800172e:	2302      	movs	r3, #2
 8001730:	77fb      	strb	r3, [r7, #31]
 8001732:	e01a      	b.n	800176a <UART_SetConfig+0xe2>
 8001734:	2304      	movs	r3, #4
 8001736:	77fb      	strb	r3, [r7, #31]
 8001738:	e017      	b.n	800176a <UART_SetConfig+0xe2>
 800173a:	2308      	movs	r3, #8
 800173c:	77fb      	strb	r3, [r7, #31]
 800173e:	e014      	b.n	800176a <UART_SetConfig+0xe2>
 8001740:	2310      	movs	r3, #16
 8001742:	77fb      	strb	r3, [r7, #31]
 8001744:	e011      	b.n	800176a <UART_SetConfig+0xe2>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a67      	ldr	r2, [pc, #412]	@ (80018e8 <UART_SetConfig+0x260>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d102      	bne.n	8001756 <UART_SetConfig+0xce>
 8001750:	2300      	movs	r3, #0
 8001752:	77fb      	strb	r3, [r7, #31]
 8001754:	e009      	b.n	800176a <UART_SetConfig+0xe2>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a64      	ldr	r2, [pc, #400]	@ (80018ec <UART_SetConfig+0x264>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d102      	bne.n	8001766 <UART_SetConfig+0xde>
 8001760:	2300      	movs	r3, #0
 8001762:	77fb      	strb	r3, [r7, #31]
 8001764:	e001      	b.n	800176a <UART_SetConfig+0xe2>
 8001766:	2310      	movs	r3, #16
 8001768:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001772:	d15a      	bne.n	800182a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	2b08      	cmp	r3, #8
 8001778:	d827      	bhi.n	80017ca <UART_SetConfig+0x142>
 800177a:	a201      	add	r2, pc, #4	@ (adr r2, 8001780 <UART_SetConfig+0xf8>)
 800177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001780:	080017a5 	.word	0x080017a5
 8001784:	080017ad 	.word	0x080017ad
 8001788:	080017b5 	.word	0x080017b5
 800178c:	080017cb 	.word	0x080017cb
 8001790:	080017bb 	.word	0x080017bb
 8001794:	080017cb 	.word	0x080017cb
 8001798:	080017cb 	.word	0x080017cb
 800179c:	080017cb 	.word	0x080017cb
 80017a0:	080017c3 	.word	0x080017c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017a4:	f7ff fe54 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 80017a8:	61b8      	str	r0, [r7, #24]
        break;
 80017aa:	e013      	b.n	80017d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80017ac:	f7ff fe72 	bl	8001494 <HAL_RCC_GetPCLK2Freq>
 80017b0:	61b8      	str	r0, [r7, #24]
        break;
 80017b2:	e00f      	b.n	80017d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80017b4:	4b4e      	ldr	r3, [pc, #312]	@ (80018f0 <UART_SetConfig+0x268>)
 80017b6:	61bb      	str	r3, [r7, #24]
        break;
 80017b8:	e00c      	b.n	80017d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017ba:	f7ff fde9 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 80017be:	61b8      	str	r0, [r7, #24]
        break;
 80017c0:	e008      	b.n	80017d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80017c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017c6:	61bb      	str	r3, [r7, #24]
        break;
 80017c8:	e004      	b.n	80017d4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	77bb      	strb	r3, [r7, #30]
        break;
 80017d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d074      	beq.n	80018c4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	005a      	lsls	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	441a      	add	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	d916      	bls.n	8001824 <UART_SetConfig+0x19c>
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fc:	d212      	bcs.n	8001824 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	b29b      	uxth	r3, r3
 8001802:	f023 030f 	bic.w	r3, r3, #15
 8001806:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	085b      	lsrs	r3, r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	b29a      	uxth	r2, r3
 8001814:	89fb      	ldrh	r3, [r7, #14]
 8001816:	4313      	orrs	r3, r2
 8001818:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	89fa      	ldrh	r2, [r7, #14]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	e04f      	b.n	80018c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	77bb      	strb	r3, [r7, #30]
 8001828:	e04c      	b.n	80018c4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800182a:	7ffb      	ldrb	r3, [r7, #31]
 800182c:	2b08      	cmp	r3, #8
 800182e:	d828      	bhi.n	8001882 <UART_SetConfig+0x1fa>
 8001830:	a201      	add	r2, pc, #4	@ (adr r2, 8001838 <UART_SetConfig+0x1b0>)
 8001832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001836:	bf00      	nop
 8001838:	0800185d 	.word	0x0800185d
 800183c:	08001865 	.word	0x08001865
 8001840:	0800186d 	.word	0x0800186d
 8001844:	08001883 	.word	0x08001883
 8001848:	08001873 	.word	0x08001873
 800184c:	08001883 	.word	0x08001883
 8001850:	08001883 	.word	0x08001883
 8001854:	08001883 	.word	0x08001883
 8001858:	0800187b 	.word	0x0800187b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800185c:	f7ff fdf8 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 8001860:	61b8      	str	r0, [r7, #24]
        break;
 8001862:	e013      	b.n	800188c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001864:	f7ff fe16 	bl	8001494 <HAL_RCC_GetPCLK2Freq>
 8001868:	61b8      	str	r0, [r7, #24]
        break;
 800186a:	e00f      	b.n	800188c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800186c:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <UART_SetConfig+0x268>)
 800186e:	61bb      	str	r3, [r7, #24]
        break;
 8001870:	e00c      	b.n	800188c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001872:	f7ff fd8d 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 8001876:	61b8      	str	r0, [r7, #24]
        break;
 8001878:	e008      	b.n	800188c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800187a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800187e:	61bb      	str	r3, [r7, #24]
        break;
 8001880:	e004      	b.n	800188c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	77bb      	strb	r3, [r7, #30]
        break;
 800188a:	bf00      	nop
    }

    if (pclk != 0U)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d018      	beq.n	80018c4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	085a      	lsrs	r2, r3, #1
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	441a      	add	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d909      	bls.n	80018c0 <UART_SetConfig+0x238>
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b2:	d205      	bcs.n	80018c0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	e001      	b.n	80018c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80018d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	efff69f3 	.word	0xefff69f3
 80018e0:	40013800 	.word	0x40013800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40004400 	.word	0x40004400
 80018ec:	40004800 	.word	0x40004800
 80018f0:	007a1200 	.word	0x007a1200

080018f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d00a      	beq.n	800191e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00a      	beq.n	8001962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00a      	beq.n	8001984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00a      	beq.n	80019a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00a      	beq.n	80019c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01a      	beq.n	8001a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019f2:	d10a      	bne.n	8001a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00a      	beq.n	8001a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	605a      	str	r2, [r3, #4]
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b098      	sub	sp, #96	@ 0x60
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001a48:	f7ff f908 	bl	8000c5c <HAL_GetTick>
 8001a4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d12e      	bne.n	8001aba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a64:	2200      	movs	r2, #0
 8001a66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f88c 	bl	8001b88 <UART_WaitOnFlagUntilTimeout>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d021      	beq.n	8001aba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a7e:	e853 3f00 	ldrex	r3, [r3]
 8001a82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a9c:	e841 2300 	strex	r3, r2, [r1]
 8001aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e6      	bne.n	8001a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e062      	b.n	8001b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d149      	bne.n	8001b5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ac8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f856 	bl	8001b88 <UART_WaitOnFlagUntilTimeout>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d03c      	beq.n	8001b5c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	e853 3f00 	ldrex	r3, [r3]
 8001aee:	623b      	str	r3, [r7, #32]
   return(result);
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b08:	e841 2300 	strex	r3, r2, [r1]
 8001b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e6      	bne.n	8001ae2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3308      	adds	r3, #8
 8001b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	e853 3f00 	ldrex	r3, [r3]
 8001b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	3308      	adds	r3, #8
 8001b32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b34:	61fa      	str	r2, [r7, #28]
 8001b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b38:	69b9      	ldr	r1, [r7, #24]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	e841 2300 	strex	r3, r2, [r1]
 8001b40:	617b      	str	r3, [r7, #20]
   return(result);
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e5      	bne.n	8001b14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e011      	b.n	8001b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3758      	adds	r7, #88	@ 0x58
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b98:	e04f      	b.n	8001c3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d04b      	beq.n	8001c3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba2:	f7ff f85b 	bl	8000c5c <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d302      	bcc.n	8001bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e04e      	b.n	8001c5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d037      	beq.n	8001c3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b80      	cmp	r3, #128	@ 0x80
 8001bce:	d034      	beq.n	8001c3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b40      	cmp	r3, #64	@ 0x40
 8001bd4:	d031      	beq.n	8001c3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d110      	bne.n	8001c06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f838 	bl	8001c62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e029      	b.n	8001c5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c14:	d111      	bne.n	8001c3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f81e 	bl	8001c62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e00f      	b.n	8001c5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69da      	ldr	r2, [r3, #28]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4013      	ands	r3, r2
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d0a0      	beq.n	8001b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b095      	sub	sp, #84	@ 0x54
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c72:	e853 3f00 	ldrex	r3, [r3]
 8001c76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c90:	e841 2300 	strex	r3, r2, [r1]
 8001c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e6      	bne.n	8001c6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3308      	adds	r3, #8
 8001ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	e853 3f00 	ldrex	r3, [r3]
 8001caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f023 0301 	bic.w	r3, r3, #1
 8001cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3308      	adds	r3, #8
 8001cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cc4:	e841 2300 	strex	r3, r2, [r1]
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1e5      	bne.n	8001c9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d118      	bne.n	8001d0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	e853 3f00 	ldrex	r3, [r3]
 8001ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f023 0310 	bic.w	r3, r3, #16
 8001cec:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cfa:	6979      	ldr	r1, [r7, #20]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	e841 2300 	strex	r3, r2, [r1]
 8001d02:	613b      	str	r3, [r7, #16]
   return(result);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e6      	bne.n	8001cd8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8001d1e:	bf00      	nop
 8001d20:	3754      	adds	r7, #84	@ 0x54
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b089      	sub	sp, #36	@ 0x24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	613b      	str	r3, [r7, #16]
  return result;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2103      	movs	r1, #3
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	401a      	ands	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	61bb      	str	r3, [r7, #24]
  return result;
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	fa01 f303 	lsl.w	r3, r1, r3
 8001d76:	431a      	orrs	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	601a      	str	r2, [r3, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	3724      	adds	r7, #36	@ 0x24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	fb01 f303 	mul.w	r3, r1, r3
 8001da6:	431a      	orrs	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	@ 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	613b      	str	r3, [r7, #16]
  return result;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	fab3 f383 	clz	r3, r3
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2103      	movs	r1, #3
 8001de0:	fa01 f303 	lsl.w	r3, r1, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	401a      	ands	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	61bb      	str	r3, [r7, #24]
  return result;
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	431a      	orrs	r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001e0a:	bf00      	nop
 8001e0c:	3724      	adds	r7, #36	@ 0x24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b089      	sub	sp, #36	@ 0x24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	613b      	str	r3, [r7, #16]
  return result;
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	fab3 f383 	clz	r3, r3
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	401a      	ands	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	61bb      	str	r3, [r7, #24]
  return result;
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	431a      	orrs	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	60da      	str	r2, [r3, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3724      	adds	r7, #36	@ 0x24
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	@ 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	613b      	str	r3, [r7, #16]
  return result;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	61bb      	str	r3, [r7, #24]
  return result;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001ec6:	bf00      	nop
 8001ec8:	3724      	adds	r7, #36	@ 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b089      	sub	sp, #36	@ 0x24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	613b      	str	r3, [r7, #16]
  return result;
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	210f      	movs	r1, #15
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa93 f3a3 	rbit	r3, r3
 8001f10:	61bb      	str	r3, [r7, #24]
  return result;
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	431a      	orrs	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001f28:	bf00      	nop
 8001f2a:	3724      	adds	r7, #36	@ 0x24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	613b      	str	r3, [r7, #16]
  return result;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001f56:	e051      	b.n	8001ffc <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d043      	beq.n	8001ff6 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d003      	beq.n	8001f7e <LL_GPIO_Init+0x4a>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d10e      	bne.n	8001f9c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	461a      	mov	r2, r3
 8001f84:	69b9      	ldr	r1, [r7, #24]
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ff16 	bl	8001db8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	461a      	mov	r2, r3
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fef6 	bl	8001d88 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff36 	bl	8001e16 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d11a      	bne.n	8001fe8 <LL_GPIO_Init+0xb4>
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	60bb      	str	r3, [r7, #8]
  return result;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b07      	cmp	r3, #7
 8001fc8:	d807      	bhi.n	8001fda <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	69b9      	ldr	r1, [r7, #24]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff4e 	bl	8001e74 <LL_GPIO_SetAFPin_0_7>
 8001fd8:	e006      	b.n	8001fe8 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	69b9      	ldr	r1, [r7, #24]
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff75 	bl	8001ed2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	461a      	mov	r2, r3
 8001fee:	69b9      	ldr	r1, [r7, #24]
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff fe9a 	bl	8001d2a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1a6      	bne.n	8001f58 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	601a      	str	r2, [r3, #0]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 0201 	bic.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	0219      	lsls	r1, r3, #8
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	430b      	orrs	r3, r1
 8002070:	431a      	orrs	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	601a      	str	r2, [r3, #0]
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	68b9      	ldr	r1, [r7, #8]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	430a      	orrs	r2, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	609a      	str	r2, [r3, #8]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	609a      	str	r2, [r3, #8]
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	611a      	str	r2, [r3, #16]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	605a      	str	r2, [r3, #4]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff65 	bl	8002034 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	461a      	mov	r2, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff6d 	bl	8002054 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4619      	mov	r1, r3
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff ffb6 	bl	80020f2 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff ff44 	bl	8002014 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ffa0 	bl	80020d2 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	461a      	mov	r2, r3
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ff70 	bl	8002082 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff ff81 	bl	80020b2 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffa9 	bl	800210e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	4619      	mov	r1, r3
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffb6 	bl	8002134 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80021dc:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <LL_mDelay+0x48>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80021e2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ea:	d00c      	beq.n	8002206 <LL_mDelay+0x32>
  {
    Delay++;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3301      	adds	r3, #1
 80021f0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80021f2:	e008      	b.n	8002206 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80021f4:	4b09      	ldr	r3, [pc, #36]	@ (800221c <LL_mDelay+0x48>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <LL_mDelay+0x32>
    {
      Delay--;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f3      	bne.n	80021f4 <LL_mDelay+0x20>
    }
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e010 	.word	0xe000e010

08002220 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <LL_SetSystemCoreClock+0x1c>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000008 	.word	0x20000008

08002240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <MX_DMA_Init+0x48>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	4a0f      	ldr	r2, [pc, #60]	@ (8002288 <MX_DMA_Init+0x48>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6153      	str	r3, [r2, #20]
 8002252:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <MX_DMA_Init+0x48>)
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	607b      	str	r3, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	2010      	movs	r0, #16
 8002264:	f7fe fde1 	bl	8000e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002268:	2010      	movs	r0, #16
 800226a:	f7fe fdfa 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800226e:	2200      	movs	r2, #0
 8002270:	2100      	movs	r1, #0
 8002272:	2011      	movs	r0, #17
 8002274:	f7fe fdd9 	bl	8000e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002278:	2011      	movs	r0, #17
 800227a:	f7fe fdf2 	bl	8000e62 <HAL_NVIC_EnableIRQ>

}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000

0800228c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	4907      	ldr	r1, [pc, #28]	@ (80022b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4313      	orrs	r3, r2
 800229e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4013      	ands	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022aa:	68fb      	ldr	r3, [r7, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000

080022bc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80022c0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80022c4:	f7ff ffe2 	bl	800228c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80022c8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80022cc:	f7ff ffde 	bl	800228c <LL_AHB1_GRP1_EnableClock>

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <__NVIC_GetPriorityGrouping>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d8:	4b04      	ldr	r3, [pc, #16]	@ (80022ec <__NVIC_GetPriorityGrouping+0x18>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	f003 0307 	and.w	r3, r3, #7
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <__NVIC_EnableIRQ>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	db0b      	blt.n	800231a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	f003 021f 	and.w	r2, r3, #31
 8002308:	4907      	ldr	r1, [pc, #28]	@ (8002328 <__NVIC_EnableIRQ+0x38>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	095b      	lsrs	r3, r3, #5
 8002310:	2001      	movs	r0, #1
 8002312:	fa00 f202 	lsl.w	r2, r0, r2
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	e000e100 	.word	0xe000e100

0800232c <__NVIC_SetPriority>:
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	6039      	str	r1, [r7, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	db0a      	blt.n	8002356 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	490c      	ldr	r1, [pc, #48]	@ (8002378 <__NVIC_SetPriority+0x4c>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	0112      	lsls	r2, r2, #4
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	440b      	add	r3, r1
 8002350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002354:	e00a      	b.n	800236c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4908      	ldr	r1, [pc, #32]	@ (800237c <__NVIC_SetPriority+0x50>)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	3b04      	subs	r3, #4
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	440b      	add	r3, r1
 800236a:	761a      	strb	r2, [r3, #24]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <NVIC_EncodePriority>:
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	@ 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f1c3 0307 	rsb	r3, r3, #7
 800239a:	2b04      	cmp	r3, #4
 800239c:	bf28      	it	cs
 800239e:	2304      	movcs	r3, #4
 80023a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d902      	bls.n	80023b0 <NVIC_EncodePriority+0x30>
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3b03      	subs	r3, #3
 80023ae:	e000      	b.n	80023b2 <NVIC_EncodePriority+0x32>
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43da      	mvns	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	401a      	ands	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d8:	4313      	orrs	r3, r2
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3724      	adds	r7, #36	@ 0x24
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_I2C_EnableClockStretching>:
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_I2C_DisableGeneralCall>:
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	601a      	str	r2, [r3, #0]
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_I2C_SetOwnAddress2>:
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800243a:	f023 0306 	bic.w	r3, r3, #6
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	430a      	orrs	r2, r1
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	60da      	str	r2, [r3, #12]
}
 800244a:	bf00      	nop
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <LL_I2C_DisableOwnAddress2>:
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	60da      	str	r2, [r3, #12]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_I2C_EnableIT_RX>:
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f043 0204 	orr.w	r2, r3, #4
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	601a      	str	r2, [r3, #0]
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <LL_I2C_DisableIT_RX>:
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0204 	bic.w	r2, r3, #4
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	601a      	str	r2, [r3, #0]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_I2C_IsActiveFlag_TXIS>:
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d101      	bne.n	80024ce <LL_I2C_IsActiveFlag_TXIS+0x18>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_I2C_IsActiveFlag_RXNE>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d101      	bne.n	80024f4 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_I2C_IsActiveFlag_STOP>:
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b20      	cmp	r3, #32
 8002514:	d101      	bne.n	800251a <LL_I2C_IsActiveFlag_STOP+0x18>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <LL_I2C_IsActiveFlag_STOP+0x1a>
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_I2C_ClearFlag_NACK>:
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f043 0210 	orr.w	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	61da      	str	r2, [r3, #28]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_I2C_ClearFlag_STOP>:
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	61da      	str	r2, [r3, #28]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_I2C_EnableAutoEndMode>:
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	605a      	str	r2, [r3, #4]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80025a2:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	041b      	lsls	r3, r3, #16
 80025a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80025ac:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	0d5b      	lsrs	r3, r3, #21
 80025c4:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <LL_I2C_HandleTransfer+0x5c>)
 80025ca:	430b      	orrs	r3, r1
 80025cc:	43db      	mvns	r3, r3
 80025ce:	401a      	ands	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 80025d8:	bf00      	nop
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	03ff7bff 	.word	0x03ff7bff

080025e8 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	b2db      	uxtb	r3, r3
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_AHB1_GRP1_EnableClock>:
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002628:	4b08      	ldr	r3, [pc, #32]	@ (800264c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	4907      	ldr	r1, [pc, #28]	@ (800264c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4313      	orrs	r3, r2
 8002632:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4013      	ands	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800263e:	68fb      	ldr	r3, [r7, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40021000 	.word	0x40021000

08002650 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002658:	4b08      	ldr	r3, [pc, #32]	@ (800267c <LL_APB1_GRP1_EnableClock+0x2c>)
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	4907      	ldr	r1, [pc, #28]	@ (800267c <LL_APB1_GRP1_EnableClock+0x2c>)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4313      	orrs	r3, r2
 8002662:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	40021000 	.word	0x40021000

08002680 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	@ 0x38
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002686:	f107 031c 	add.w	r3, r7, #28
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	615a      	str	r2, [r3, #20]
 8002698:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
 80026a8:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80026aa:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80026ae:	f7ff ffb7 	bl	8002620 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80026b2:	23c0      	movs	r3, #192	@ 0xc0
 80026b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026b6:	2302      	movs	r3, #2
 80026b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80026be:	2301      	movs	r3, #1
 80026c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80026c2:	2301      	movs	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80026c6:	2304      	movs	r3, #4
 80026c8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	4619      	mov	r1, r3
 80026ce:	4820      	ldr	r0, [pc, #128]	@ (8002750 <MX_I2C1_Init+0xd0>)
 80026d0:	f7ff fc30 	bl	8001f34 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80026d4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80026d8:	f7ff ffba 	bl	8002650 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80026dc:	f7ff fdfa 	bl	80022d4 <__NVIC_GetPriorityGrouping>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fe4a 	bl	8002380 <NVIC_EncodePriority>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4619      	mov	r1, r3
 80026f0:	201f      	movs	r0, #31
 80026f2:	f7ff fe1b 	bl	800232c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026f6:	201f      	movs	r0, #31
 80026f8:	f7ff fdfa 	bl	80022f0 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80026fc:	4815      	ldr	r0, [pc, #84]	@ (8002754 <MX_I2C1_Init+0xd4>)
 80026fe:	f7ff ff33 	bl	8002568 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002702:	4814      	ldr	r0, [pc, #80]	@ (8002754 <MX_I2C1_Init+0xd4>)
 8002704:	f7ff fea7 	bl	8002456 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002708:	4812      	ldr	r0, [pc, #72]	@ (8002754 <MX_I2C1_Init+0xd4>)
 800270a:	f7ff fe7c 	bl	8002406 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800270e:	4811      	ldr	r0, [pc, #68]	@ (8002754 <MX_I2C1_Init+0xd4>)
 8002710:	f7ff fe69 	bl	80023e6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8002718:	4b0f      	ldr	r3, [pc, #60]	@ (8002758 <MX_I2C1_Init+0xd8>)
 800271a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8002724:	2302      	movs	r3, #2
 8002726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002728:	2300      	movs	r3, #0
 800272a:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800272c:	2300      	movs	r3, #0
 800272e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002730:	f107 031c 	add.w	r3, r7, #28
 8002734:	4619      	mov	r1, r3
 8002736:	4807      	ldr	r0, [pc, #28]	@ (8002754 <MX_I2C1_Init+0xd4>)
 8002738:	f7ff fd0f 	bl	800215a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	4804      	ldr	r0, [pc, #16]	@ (8002754 <MX_I2C1_Init+0xd4>)
 8002742:	f7ff fe70 	bl	8002426 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	3738      	adds	r7, #56	@ 0x38
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	48000400 	.word	0x48000400
 8002754:	40005400 	.word	0x40005400
 8002758:	2000090e 	.word	0x2000090e

0800275c <i2c_master_read_byte>:

uint8_t i2c_master_read_byte(uint8_t slave_address, uint8_t register_address)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af02      	add	r7, sp, #8
 8002762:	4603      	mov	r3, r0
 8002764:	460a      	mov	r2, r1
 8002766:	71fb      	strb	r3, [r7, #7]
 8002768:	4613      	mov	r3, r2
 800276a:	71bb      	strb	r3, [r7, #6]
	// Enable It from I2C
	LL_I2C_EnableIT_RX(I2C1);
 800276c:	4825      	ldr	r0, [pc, #148]	@ (8002804 <i2c_master_read_byte+0xa8>)
 800276e:	f7ff fe82 	bl	8002476 <LL_I2C_EnableIT_RX>
	// Initialize communication
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002772:	79f9      	ldrb	r1, [r7, #7]
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <i2c_master_read_byte+0xac>)
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2301      	movs	r3, #1
 8002780:	2200      	movs	r2, #0
 8002782:	4820      	ldr	r0, [pc, #128]	@ (8002804 <i2c_master_read_byte+0xa8>)
 8002784:	f7ff ff00 	bl	8002588 <LL_I2C_HandleTransfer>
	// Send register address
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002788:	e00a      	b.n	80027a0 <i2c_master_read_byte+0x44>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800278a:	481e      	ldr	r0, [pc, #120]	@ (8002804 <i2c_master_read_byte+0xa8>)
 800278c:	f7ff fe93 	bl	80024b6 <LL_I2C_IsActiveFlag_TXIS>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <i2c_master_read_byte+0x44>
		{
			LL_I2C_TransmitData8(I2C1, register_address);
 8002796:	79bb      	ldrb	r3, [r7, #6]
 8002798:	4619      	mov	r1, r3
 800279a:	481a      	ldr	r0, [pc, #104]	@ (8002804 <i2c_master_read_byte+0xa8>)
 800279c:	f7ff ff31 	bl	8002602 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80027a0:	4818      	ldr	r0, [pc, #96]	@ (8002804 <i2c_master_read_byte+0xa8>)
 80027a2:	f7ff feae 	bl	8002502 <LL_I2C_IsActiveFlag_STOP>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0ee      	beq.n	800278a <i2c_master_read_byte+0x2e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80027ac:	4815      	ldr	r0, [pc, #84]	@ (8002804 <i2c_master_read_byte+0xa8>)
 80027ae:	f7ff fecb 	bl	8002548 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80027b2:	bf00      	nop
 80027b4:	4813      	ldr	r0, [pc, #76]	@ (8002804 <i2c_master_read_byte+0xa8>)
 80027b6:	f7ff fea4 	bl	8002502 <LL_I2C_IsActiveFlag_STOP>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f9      	bne.n	80027b4 <i2c_master_read_byte+0x58>

	// Receive data from slave device
	LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80027c0:	79f9      	ldrb	r1, [r7, #7]
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <i2c_master_read_byte+0xb0>)
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2301      	movs	r3, #1
 80027ce:	2200      	movs	r2, #0
 80027d0:	480c      	ldr	r0, [pc, #48]	@ (8002804 <i2c_master_read_byte+0xa8>)
 80027d2:	f7ff fed9 	bl	8002588 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80027d6:	bf00      	nop
 80027d8:	480a      	ldr	r0, [pc, #40]	@ (8002804 <i2c_master_read_byte+0xa8>)
 80027da:	f7ff fe92 	bl	8002502 <LL_I2C_IsActiveFlag_STOP>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f9      	beq.n	80027d8 <i2c_master_read_byte+0x7c>

	//End of transfer
	LL_I2C_DisableIT_RX(I2C1);
 80027e4:	4807      	ldr	r0, [pc, #28]	@ (8002804 <i2c_master_read_byte+0xa8>)
 80027e6:	f7ff fe56 	bl	8002496 <LL_I2C_DisableIT_RX>
	LL_I2C_ClearFlag_STOP(I2C1);
 80027ea:	4806      	ldr	r0, [pc, #24]	@ (8002804 <i2c_master_read_byte+0xa8>)
 80027ec:	f7ff feac 	bl	8002548 <LL_I2C_ClearFlag_STOP>
	LL_I2C_ClearFlag_NACK(I2C1);
 80027f0:	4804      	ldr	r0, [pc, #16]	@ (8002804 <i2c_master_read_byte+0xa8>)
 80027f2:	f7ff fe99 	bl	8002528 <LL_I2C_ClearFlag_NACK>

	return i2c_rx_data;
 80027f6:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <i2c_master_read_byte+0xb4>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40005400 	.word	0x40005400
 8002808:	80002000 	.word	0x80002000
 800280c:	80002400 	.word	0x80002400
 8002810:	200001f4 	.word	0x200001f4

08002814 <i2c_master_read>:

void i2c_master_read(uint8_t *buffer, uint8_t length, uint8_t register_address, uint8_t slave_address)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b087      	sub	sp, #28
 8002818:	af02      	add	r7, sp, #8
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4603      	mov	r3, r0
 8002824:	70fb      	strb	r3, [r7, #3]
 8002826:	460b      	mov	r3, r1
 8002828:	70bb      	strb	r3, [r7, #2]
 800282a:	4613      	mov	r3, r2
 800282c:	707b      	strb	r3, [r7, #1]
    // Enable RX interrupt
    LL_I2C_EnableIT_RX(I2C1);
 800282e:	482d      	ldr	r0, [pc, #180]	@ (80028e4 <i2c_master_read+0xd0>)
 8002830:	f7ff fe21 	bl	8002476 <LL_I2C_EnableIT_RX>

    // Initialize communication by sending the register address
    LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8002834:	7879      	ldrb	r1, [r7, #1]
 8002836:	4b2c      	ldr	r3, [pc, #176]	@ (80028e8 <i2c_master_read+0xd4>)
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2301      	movs	r3, #1
 8002842:	2200      	movs	r2, #0
 8002844:	4827      	ldr	r0, [pc, #156]	@ (80028e4 <i2c_master_read+0xd0>)
 8002846:	f7ff fe9f 	bl	8002588 <LL_I2C_HandleTransfer>

    // Send the register address
    while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800284a:	e00a      	b.n	8002862 <i2c_master_read+0x4e>
    {
        if (LL_I2C_IsActiveFlag_TXIS(I2C1))
 800284c:	4825      	ldr	r0, [pc, #148]	@ (80028e4 <i2c_master_read+0xd0>)
 800284e:	f7ff fe32 	bl	80024b6 <LL_I2C_IsActiveFlag_TXIS>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <i2c_master_read+0x4e>
        {
            LL_I2C_TransmitData8(I2C1, register_address);
 8002858:	78bb      	ldrb	r3, [r7, #2]
 800285a:	4619      	mov	r1, r3
 800285c:	4821      	ldr	r0, [pc, #132]	@ (80028e4 <i2c_master_read+0xd0>)
 800285e:	f7ff fed0 	bl	8002602 <LL_I2C_TransmitData8>
    while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8002862:	4820      	ldr	r0, [pc, #128]	@ (80028e4 <i2c_master_read+0xd0>)
 8002864:	f7ff fe4d 	bl	8002502 <LL_I2C_IsActiveFlag_STOP>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0ee      	beq.n	800284c <i2c_master_read+0x38>
        }
    }
    LL_I2C_ClearFlag_STOP(I2C1);
 800286e:	481d      	ldr	r0, [pc, #116]	@ (80028e4 <i2c_master_read+0xd0>)
 8002870:	f7ff fe6a 	bl	8002548 <LL_I2C_ClearFlag_STOP>

    // Wait until STOP flag is cleared
    while (LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8002874:	bf00      	nop
 8002876:	481b      	ldr	r0, [pc, #108]	@ (80028e4 <i2c_master_read+0xd0>)
 8002878:	f7ff fe43 	bl	8002502 <LL_I2C_IsActiveFlag_STOP>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f9      	bne.n	8002876 <i2c_master_read+0x62>

    // Read data from the slave device
    LL_I2C_HandleTransfer(I2C1, slave_address, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8002882:	7879      	ldrb	r1, [r7, #1]
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <i2c_master_read+0xd8>)
 8002888:	9201      	str	r2, [sp, #4]
 800288a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800288e:	9200      	str	r2, [sp, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	4814      	ldr	r0, [pc, #80]	@ (80028e4 <i2c_master_read+0xd0>)
 8002894:	f7ff fe78 	bl	8002588 <LL_I2C_HandleTransfer>

    // Read each byte into the buffer
    for (uint8_t i = 0; i < length; i++)
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e00a      	b.n	80028b4 <i2c_master_read+0xa0>
    {
        // Read received data and store it in the buffer
    	buffer[i] = LL_I2C_ReceiveData8(I2C1);
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	18d4      	adds	r4, r2, r3
 80028a4:	480f      	ldr	r0, [pc, #60]	@ (80028e4 <i2c_master_read+0xd0>)
 80028a6:	f7ff fe9f 	bl	80025e8 <LL_I2C_ReceiveData8>
 80028aa:	4603      	mov	r3, r0
 80028ac:	7023      	strb	r3, [r4, #0]
    for (uint8_t i = 0; i < length; i++)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	3301      	adds	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3f0      	bcc.n	800289e <i2c_master_read+0x8a>
    }

    // Wait until STOP flag is set, indicating the end of the transfer
    while (!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80028bc:	bf00      	nop
 80028be:	4809      	ldr	r0, [pc, #36]	@ (80028e4 <i2c_master_read+0xd0>)
 80028c0:	f7ff fe1f 	bl	8002502 <LL_I2C_IsActiveFlag_STOP>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f9      	beq.n	80028be <i2c_master_read+0xaa>

    // Clear any remaining flags
    LL_I2C_ClearFlag_STOP(I2C1);
 80028ca:	4806      	ldr	r0, [pc, #24]	@ (80028e4 <i2c_master_read+0xd0>)
 80028cc:	f7ff fe3c 	bl	8002548 <LL_I2C_ClearFlag_STOP>
    LL_I2C_ClearFlag_NACK(I2C1);
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <i2c_master_read+0xd0>)
 80028d2:	f7ff fe29 	bl	8002528 <LL_I2C_ClearFlag_NACK>

    // Disable RX interrupt
    LL_I2C_DisableIT_RX(I2C1);
 80028d6:	4803      	ldr	r0, [pc, #12]	@ (80028e4 <i2c_master_read+0xd0>)
 80028d8:	f7ff fddd 	bl	8002496 <LL_I2C_DisableIT_RX>

}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	40005400 	.word	0x40005400
 80028e8:	80002000 	.word	0x80002000
 80028ec:	80002400 	.word	0x80002400

080028f0 <I2C1_EV_IRQHandler>:



void I2C1_EV_IRQHandler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
	// Check RXNE flag value in ISR register
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80028f4:	4807      	ldr	r0, [pc, #28]	@ (8002914 <I2C1_EV_IRQHandler+0x24>)
 80028f6:	f7ff fdf1 	bl	80024dc <LL_I2C_IsActiveFlag_RXNE>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <I2C1_EV_IRQHandler+0x1e>
	{
		// Call function Master Reception Callback
		i2c_rx_data = LL_I2C_ReceiveData8(I2C1);
 8002900:	4804      	ldr	r0, [pc, #16]	@ (8002914 <I2C1_EV_IRQHandler+0x24>)
 8002902:	f7ff fe71 	bl	80025e8 <LL_I2C_ReceiveData8>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	4b03      	ldr	r3, [pc, #12]	@ (8002918 <I2C1_EV_IRQHandler+0x28>)
 800290c:	701a      	strb	r2, [r3, #0]
	}
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40005400 	.word	0x40005400
 8002918:	200001f4 	.word	0x200001f4

0800291c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <LL_RCC_HSI_Enable+0x1c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a04      	ldr	r2, [pc, #16]	@ (8002938 <LL_RCC_HSI_Enable+0x1c>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000

0800293c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <LL_RCC_HSI_IsReady+0x20>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	40021000 	.word	0x40021000

08002960 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002968:	4b07      	ldr	r3, [pc, #28]	@ (8002988 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4904      	ldr	r1, [pc, #16]	@ (8002988 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000

0800298c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <LL_RCC_SetSysClkSource+0x24>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 0203 	bic.w	r2, r3, #3
 800299c:	4904      	ldr	r1, [pc, #16]	@ (80029b0 <LL_RCC_SetSysClkSource+0x24>)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	40021000 	.word	0x40021000

080029b4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80029b8:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <LL_RCC_GetSysClkSource+0x18>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000

080029d0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <LL_RCC_SetAHBPrescaler+0x24>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e0:	4904      	ldr	r1, [pc, #16]	@ (80029f4 <LL_RCC_SetAHBPrescaler+0x24>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40021000 	.word	0x40021000

080029f8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002a00:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a08:	4904      	ldr	r1, [pc, #16]	@ (8002a1c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	40021000 	.word	0x40021000

08002a20 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002a28:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a30:	4904      	ldr	r1, [pc, #16]	@ (8002a44 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	40021000 	.word	0x40021000

08002a48 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8002a50:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <LL_RCC_SetI2CClockSource+0x2c>)
 8002a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	0e1b      	lsrs	r3, r3, #24
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002a62:	4904      	ldr	r1, [pc, #16]	@ (8002a74 <LL_RCC_SetI2CClockSource+0x2c>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40021000 	.word	0x40021000

08002a78 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002a80:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <LL_FLASH_SetLatency+0x24>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 0207 	bic.w	r2, r3, #7
 8002a88:	4904      	ldr	r1, [pc, #16]	@ (8002a9c <LL_FLASH_SetLatency+0x24>)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40022000 	.word	0x40022000

08002aa0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002aa4:	4b04      	ldr	r3, [pc, #16]	@ (8002ab8 <LL_FLASH_GetLatency+0x18>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40022000 	.word	0x40022000

08002abc <read_array>:




void read_array(uint8_t *data, uint8_t reg, uint8_t length)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 0);
 8002acc:	78b9      	ldrb	r1, [r7, #2]
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <read_array+0x30>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	4603      	mov	r3, r0
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f7ff fe99 	bl	8002814 <i2c_master_read>
}
 8002ae2:	bf00      	nop
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000005 	.word	0x20000005

08002af0 <get_acc>:

void get_acc(float* x, float* y, float* z)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
	int16_t xx, yy, zz;

	read_array(data, LSM6DS0_ADDRESS_X, 6);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2206      	movs	r2, #6
 8002b02:	2128      	movs	r1, #40	@ 0x28
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff ffd9 	bl	8002abc <read_array>

	xx = ((uint16_t)data[1])<<8|data[0];
 8002b0a:	7d7b      	ldrb	r3, [r7, #21]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	b21a      	sxth	r2, r3
 8002b10:	7d3b      	ldrb	r3, [r7, #20]
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	4313      	orrs	r3, r2
 8002b16:	83fb      	strh	r3, [r7, #30]
	yy = ((uint16_t)data[2])<<8|data[2];
 8002b18:	7dbb      	ldrb	r3, [r7, #22]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	0212      	lsls	r2, r2, #8
 8002b1e:	4413      	add	r3, r2
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	83bb      	strh	r3, [r7, #28]
	zz = ((uint16_t)data[3])<<8|data[4];
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	b21a      	sxth	r2, r3
 8002b2a:	7e3b      	ldrb	r3, [r7, #24]
 8002b2c:	b21b      	sxth	r3, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	837b      	strh	r3, [r7, #26]

	*x = (xx>>4)/1000.0f;
 8002b32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b36:	111b      	asrs	r3, r3, #4
 8002b38:	b21b      	sxth	r3, r3
 8002b3a:	ee07 3a90 	vmov	s15, r3
 8002b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b42:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8002b94 <get_acc+0xa4>
 8002b46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy>>4)/1000.0f;
 8002b50:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b54:	111b      	asrs	r3, r3, #4
 8002b56:	b21b      	sxth	r3, r3
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b60:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002b94 <get_acc+0xa4>
 8002b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz>>4)/1000.0f;
 8002b6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b72:	111b      	asrs	r3, r3, #4
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b7e:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8002b94 <get_acc+0xa4>
 8002b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	edc3 7a00 	vstr	s15, [r3]
}
 8002b8c:	bf00      	nop
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	447a0000 	.word	0x447a0000

08002b98 <lsm6ds0_init>:

uint8_t lsm6ds0_init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
	uint8_t status = 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	71fb      	strb	r3, [r7, #7]
	LL_mDelay(100);
 8002ba2:	2064      	movs	r0, #100	@ 0x64
 8002ba4:	f7ff fb16 	bl	80021d4 <LL_mDelay>

	if(i2c_master_read_byte(LSM6DS0_DEVICE_ADDRESS, LSM6DS0_WHO_AM_I_ADDRES) == LSM6DS0_WHO_AM_I_VALUE)
 8002ba8:	210f      	movs	r1, #15
 8002baa:	206a      	movs	r0, #106	@ 0x6a
 8002bac:	f7ff fdd6 	bl	800275c <i2c_master_read_byte>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b68      	cmp	r3, #104	@ 0x68
 8002bb4:	d102      	bne.n	8002bbc <lsm6ds0_init+0x24>
	{
		status = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	71fb      	strb	r3, [r7, #7]
 8002bba:	e00b      	b.n	8002bd4 <lsm6ds0_init+0x3c>
	}
	else
	{
		if(i2c_master_read_byte(LSM6DS0_DEVICE_ADDRESS_1, LSM6DS0_WHO_AM_I_ADDRES) == LSM6DS0_WHO_AM_I_VALUE)
 8002bbc:	210f      	movs	r1, #15
 8002bbe:	206b      	movs	r0, #107	@ 0x6b
 8002bc0:	f7ff fdcc 	bl	800275c <i2c_master_read_byte>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b68      	cmp	r3, #104	@ 0x68
 8002bc8:	d102      	bne.n	8002bd0 <lsm6ds0_init+0x38>
		{
			status = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	71fb      	strb	r3, [r7, #7]
 8002bce:	e001      	b.n	8002bd4 <lsm6ds0_init+0x3c>
		}
		else
		{
			status = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	71fb      	strb	r3, [r7, #7]
		}
	}
}
 8002bd4:	bf00      	nop
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <main>:

int main(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
  HAL_Init();
 8002be6:	f7fd ffdf 	bl	8000ba8 <HAL_Init>

  SystemClock_Config();
 8002bea:	f000 f82d 	bl	8002c48 <SystemClock_Config>

  MX_GPIO_Init();
 8002bee:	f7ff fb65 	bl	80022bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002bf2:	f7ff fb25 	bl	8002240 <MX_DMA_Init>
  MX_I2C1_Init();
 8002bf6:	f7ff fd43 	bl	8002680 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002bfa:	f000 f9ef 	bl	8002fdc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lsm6ds0_init();
 8002bfe:	f7ff ffcb 	bl	8002b98 <lsm6ds0_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   while (1) {
   // Main loop
	   get_acc(&acc[0], &acc[1], &acc[2]);
 8002c02:	4a0d      	ldr	r2, [pc, #52]	@ (8002c38 <main+0x58>)
 8002c04:	490d      	ldr	r1, [pc, #52]	@ (8002c3c <main+0x5c>)
 8002c06:	480e      	ldr	r0, [pc, #56]	@ (8002c40 <main+0x60>)
 8002c08:	f7ff ff72 	bl	8002af0 <get_acc>
	   char buffer[20]; // Buffer to hold the string representation of the acceleration
	   sprintf(buffer, "Acceleration Z: %0.4f\r\n", acc[0]); // Format the string
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <main+0x60>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fd fc99 	bl	8000548 <__aeabi_f2d>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	1d38      	adds	r0, r7, #4
 8002c1c:	4909      	ldr	r1, [pc, #36]	@ (8002c44 <main+0x64>)
 8002c1e:	f000 ffe9 	bl	8003bf4 <siprintf>
	   USART2_SendString(buffer);
 8002c22:	1d3b      	adds	r3, r7, #4
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f9c3 	bl	8002fb0 <USART2_SendString>
	   LL_mDelay(2000);
 8002c2a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002c2e:	f7ff fad1 	bl	80021d4 <LL_mDelay>
   while (1) {
 8002c32:	bf00      	nop
 8002c34:	e7e5      	b.n	8002c02 <main+0x22>
 8002c36:	bf00      	nop
 8002c38:	20000200 	.word	0x20000200
 8002c3c:	200001fc 	.word	0x200001fc
 8002c40:	200001f8 	.word	0x200001f8
 8002c44:	08005e68 	.word	0x08005e68

08002c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7ff ff13 	bl	8002a78 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002c52:	bf00      	nop
 8002c54:	f7ff ff24 	bl	8002aa0 <LL_FLASH_GetLatency>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1fa      	bne.n	8002c54 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8002c5e:	f7ff fe5d 	bl	800291c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002c62:	bf00      	nop
 8002c64:	f7ff fe6a 	bl	800293c <LL_RCC_HSI_IsReady>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d1fa      	bne.n	8002c64 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002c6e:	2010      	movs	r0, #16
 8002c70:	f7ff fe76 	bl	8002960 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7ff feab 	bl	80029d0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7ff febc 	bl	80029f8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7ff fecd 	bl	8002a20 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7ff fe80 	bl	800298c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002c8c:	bf00      	nop
 8002c8e:	f7ff fe91 	bl	80029b4 <LL_RCC_GetSysClkSource>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1fa      	bne.n	8002c8e <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 8002c98:	4808      	ldr	r0, [pc, #32]	@ (8002cbc <SystemClock_Config+0x74>)
 8002c9a:	f7ff fac1 	bl	8002220 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fd ff98 	bl	8000bd4 <HAL_InitTick>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002caa:	f000 f809 	bl	8002cc0 <Error_Handler>
  }
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002cae:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002cb2:	f7ff fec9 	bl	8002a48 <LL_RCC_SetI2CClockSource>
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	007a1200 	.word	0x007a1200

08002cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	4a0e      	ldr	r2, [pc, #56]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	6193      	str	r3, [r2, #24]
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d14 <HAL_MspInit+0x44>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	61d3      	str	r3, [r2, #28]
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_MspInit+0x44>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2a:	bf00      	nop
 8002d2c:	e7fd      	b.n	8002d2a <HardFault_Handler+0x4>

08002d2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d32:	bf00      	nop
 8002d34:	e7fd      	b.n	8002d32 <MemManage_Handler+0x4>

08002d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3a:	bf00      	nop
 8002d3c:	e7fd      	b.n	8002d3a <BusFault_Handler+0x4>

08002d3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d42:	bf00      	nop
 8002d44:	e7fd      	b.n	8002d42 <UsageFault_Handler+0x4>

08002d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d74:	f7fd ff5e 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d80:	4802      	ldr	r0, [pc, #8]	@ (8002d8c <DMA1_Channel6_IRQHandler+0x10>)
 8002d82:	f7fe f8cf 	bl	8000f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000290 	.word	0x20000290

08002d90 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002d94:	4802      	ldr	r0, [pc, #8]	@ (8002da0 <DMA1_Channel7_IRQHandler+0x10>)
 8002d96:	f7fe f8c5 	bl	8000f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200002d4 	.word	0x200002d4

08002da4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
	return 1;
 8002da8:	2301      	movs	r3, #1
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_kill>:

int _kill(int pid, int sig)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dbe:	f000 ffcf 	bl	8003d60 <__errno>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2216      	movs	r2, #22
 8002dc6:	601a      	str	r2, [r3, #0]
	return -1;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_exit>:

void _exit (int status)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ffe7 	bl	8002db4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002de6:	bf00      	nop
 8002de8:	e7fd      	b.n	8002de6 <_exit+0x12>

08002dea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e00a      	b.n	8002e12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002dfc:	f3af 8000 	nop.w
 8002e00:	4601      	mov	r1, r0
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	60ba      	str	r2, [r7, #8]
 8002e08:	b2ca      	uxtb	r2, r1
 8002e0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	dbf0      	blt.n	8002dfc <_read+0x12>
	}

return len;
 8002e1a:	687b      	ldr	r3, [r7, #4]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e009      	b.n	8002e4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	60ba      	str	r2, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3301      	adds	r3, #1
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	dbf1      	blt.n	8002e36 <_write+0x12>
	}
	return len;
 8002e52:	687b      	ldr	r3, [r7, #4]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_close>:

int _close(int file)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	return -1;
 8002e64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e84:	605a      	str	r2, [r3, #4]
	return 0;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <_isatty>:

int _isatty(int file)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	return 1;
 8002e9c:	2301      	movs	r3, #1
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
	return 0;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void* _sbrk(int incr)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <_sbrk+0x50>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <_sbrk+0x16>
		heap_end = &end;
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <_sbrk+0x50>)
 8002ed6:	4a10      	ldr	r2, [pc, #64]	@ (8002f18 <_sbrk+0x54>)
 8002ed8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <_sbrk+0x50>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <_sbrk+0x50>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	466a      	mov	r2, sp
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d907      	bls.n	8002efe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002eee:	f000 ff37 	bl	8003d60 <__errno>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	220c      	movs	r2, #12
 8002ef6:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8002efc:	e006      	b.n	8002f0c <_sbrk+0x48>
	}

	heap_end += incr;
 8002efe:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <_sbrk+0x50>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	4a03      	ldr	r2, [pc, #12]	@ (8002f14 <_sbrk+0x50>)
 8002f08:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000204 	.word	0x20000204
 8002f18:	20000468 	.word	0x20000468

08002f1c <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f20:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa0 <SystemInit+0x84>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	4a1e      	ldr	r2, [pc, #120]	@ (8002fa0 <SystemInit+0x84>)
 8002f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f30:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa4 <SystemInit+0x88>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a1b      	ldr	r2, [pc, #108]	@ (8002fa4 <SystemInit+0x88>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002f3c:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <SystemInit+0x88>)
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4918      	ldr	r1, [pc, #96]	@ (8002fa4 <SystemInit+0x88>)
 8002f42:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <SystemInit+0x8c>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f48:	4b16      	ldr	r3, [pc, #88]	@ (8002fa4 <SystemInit+0x88>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a15      	ldr	r2, [pc, #84]	@ (8002fa4 <SystemInit+0x88>)
 8002f4e:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f58:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <SystemInit+0x88>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a11      	ldr	r2, [pc, #68]	@ (8002fa4 <SystemInit+0x88>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f64:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <SystemInit+0x88>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa4 <SystemInit+0x88>)
 8002f6a:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8002f6e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <SystemInit+0x88>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	4a0b      	ldr	r2, [pc, #44]	@ (8002fa4 <SystemInit+0x88>)
 8002f76:	f023 030f 	bic.w	r3, r3, #15
 8002f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <SystemInit+0x88>)
 8002f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f80:	4908      	ldr	r1, [pc, #32]	@ (8002fa4 <SystemInit+0x88>)
 8002f82:	4b0a      	ldr	r3, [pc, #40]	@ (8002fac <SystemInit+0x90>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <SystemInit+0x88>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f8e:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <SystemInit+0x84>)
 8002f90:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f94:	609a      	str	r2, [r3, #8]
#endif
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000ed00 	.word	0xe000ed00
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	f87fc00c 	.word	0xf87fc00c
 8002fac:	ff00fccc 	.word	0xff00fccc

08002fb0 <USART2_SendString>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */


void USART2_SendString(const char *str) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
    // Transmit the string data over USART2
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fd f959 	bl	8000270 <strlen>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4803      	ldr	r0, [pc, #12]	@ (8002fd8 <USART2_SendString+0x28>)
 8002fca:	f7fe fad3 	bl	8001574 <HAL_UART_Transmit>
}
 8002fce:	bf00      	nop
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000208 	.word	0x20000208

08002fdc <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fe0:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 8002fe2:	4a15      	ldr	r2, [pc, #84]	@ (8003038 <MX_USART2_UART_Init+0x5c>)
 8002fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002fe6:	4b13      	ldr	r3, [pc, #76]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 8002fe8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fee:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 8003002:	220c      	movs	r2, #12
 8003004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003006:	4b0b      	ldr	r3, [pc, #44]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800300c:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003012:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 8003014:	2200      	movs	r2, #0
 8003016:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 800301a:	2200      	movs	r2, #0
 800301c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800301e:	4805      	ldr	r0, [pc, #20]	@ (8003034 <MX_USART2_UART_Init+0x58>)
 8003020:	f7fe fa5a 	bl	80014d8 <HAL_UART_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800302a:	f7ff fe49 	bl	8002cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20000208 	.word	0x20000208
 8003038:	40004400 	.word	0x40004400

0800303c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	@ 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a3f      	ldr	r2, [pc, #252]	@ (8003158 <HAL_UART_MspInit+0x11c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d177      	bne.n	800314e <HAL_UART_MspInit+0x112>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800305e:	4b3f      	ldr	r3, [pc, #252]	@ (800315c <HAL_UART_MspInit+0x120>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4a3e      	ldr	r2, [pc, #248]	@ (800315c <HAL_UART_MspInit+0x120>)
 8003064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003068:	61d3      	str	r3, [r2, #28]
 800306a:	4b3c      	ldr	r3, [pc, #240]	@ (800315c <HAL_UART_MspInit+0x120>)
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003076:	4b39      	ldr	r3, [pc, #228]	@ (800315c <HAL_UART_MspInit+0x120>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	4a38      	ldr	r2, [pc, #224]	@ (800315c <HAL_UART_MspInit+0x120>)
 800307c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003080:	6153      	str	r3, [r2, #20]
 8003082:	4b36      	ldr	r3, [pc, #216]	@ (800315c <HAL_UART_MspInit+0x120>)
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800308e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030a0:	2307      	movs	r3, #7
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4619      	mov	r1, r3
 80030aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030ae:	f7fd fffd 	bl	80010ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80030b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003164 <HAL_UART_MspInit+0x128>)
 80030b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030b8:	4b29      	ldr	r3, [pc, #164]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030be:	4b28      	ldr	r3, [pc, #160]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030c4:	4b26      	ldr	r3, [pc, #152]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030c6:	2280      	movs	r2, #128	@ 0x80
 80030c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ca:	4b25      	ldr	r3, [pc, #148]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d0:	4b23      	ldr	r3, [pc, #140]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80030d6:	4b22      	ldr	r3, [pc, #136]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80030dc:	4b20      	ldr	r3, [pc, #128]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030de:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80030e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030e4:	481e      	ldr	r0, [pc, #120]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030e6:	f7fd fed6 	bl	8000e96 <HAL_DMA_Init>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80030f0:	f7ff fde6 	bl	8002cc0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80030fa:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <HAL_UART_MspInit+0x124>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003100:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 8003102:	4a1a      	ldr	r2, [pc, #104]	@ (800316c <HAL_UART_MspInit+0x130>)
 8003104:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003106:	4b18      	ldr	r3, [pc, #96]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 8003108:	2210      	movs	r2, #16
 800310a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800310c:	4b16      	ldr	r3, [pc, #88]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003112:	4b15      	ldr	r3, [pc, #84]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 8003114:	2280      	movs	r2, #128	@ 0x80
 8003116:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003118:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800311e:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003124:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800312a:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 800312c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003130:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003132:	480d      	ldr	r0, [pc, #52]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 8003134:	f7fd feaf 	bl	8000e96 <HAL_DMA_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 800313e:	f7ff fdbf 	bl	8002cc0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a08      	ldr	r2, [pc, #32]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 8003146:	671a      	str	r2, [r3, #112]	@ 0x70
 8003148:	4a07      	ldr	r2, [pc, #28]	@ (8003168 <HAL_UART_MspInit+0x12c>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800314e:	bf00      	nop
 8003150:	3728      	adds	r7, #40	@ 0x28
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40004400 	.word	0x40004400
 800315c:	40021000 	.word	0x40021000
 8003160:	20000290 	.word	0x20000290
 8003164:	4002006c 	.word	0x4002006c
 8003168:	200002d4 	.word	0x200002d4
 800316c:	40020080 	.word	0x40020080

08003170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003174:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003176:	e003      	b.n	8003180 <LoopCopyDataInit>

08003178 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003178:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800317a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800317c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800317e:	3104      	adds	r1, #4

08003180 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003180:	480b      	ldr	r0, [pc, #44]	@ (80031b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003184:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003186:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003188:	d3f6      	bcc.n	8003178 <CopyDataInit>
	ldr	r2, =_sbss
 800318a:	4a0b      	ldr	r2, [pc, #44]	@ (80031b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800318c:	e002      	b.n	8003194 <LoopFillZerobss>

0800318e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800318e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003190:	f842 3b04 	str.w	r3, [r2], #4

08003194 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003194:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <LoopForever+0x16>)
	cmp	r2, r3
 8003196:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003198:	d3f9      	bcc.n	800318e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800319a:	f7ff febf 	bl	8002f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319e:	f000 fde5 	bl	8003d6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031a2:	f7ff fd1d 	bl	8002be0 <main>

080031a6 <LoopForever>:

LoopForever:
    b LoopForever
 80031a6:	e7fe      	b.n	80031a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031a8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80031ac:	08006228 	.word	0x08006228
	ldr	r0, =_sdata
 80031b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80031b4:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 80031b8:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 80031bc:	20000464 	.word	0x20000464

080031c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80031c0:	e7fe      	b.n	80031c0 <ADC1_2_IRQHandler>

080031c2 <__cvt>:
 80031c2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031c6:	ec57 6b10 	vmov	r6, r7, d0
 80031ca:	2f00      	cmp	r7, #0
 80031cc:	460c      	mov	r4, r1
 80031ce:	4619      	mov	r1, r3
 80031d0:	463b      	mov	r3, r7
 80031d2:	bfbb      	ittet	lt
 80031d4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80031d8:	461f      	movlt	r7, r3
 80031da:	2300      	movge	r3, #0
 80031dc:	232d      	movlt	r3, #45	@ 0x2d
 80031de:	700b      	strb	r3, [r1, #0]
 80031e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031e2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80031e6:	4691      	mov	r9, r2
 80031e8:	f023 0820 	bic.w	r8, r3, #32
 80031ec:	bfbc      	itt	lt
 80031ee:	4632      	movlt	r2, r6
 80031f0:	4616      	movlt	r6, r2
 80031f2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80031f6:	d005      	beq.n	8003204 <__cvt+0x42>
 80031f8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80031fc:	d100      	bne.n	8003200 <__cvt+0x3e>
 80031fe:	3401      	adds	r4, #1
 8003200:	2102      	movs	r1, #2
 8003202:	e000      	b.n	8003206 <__cvt+0x44>
 8003204:	2103      	movs	r1, #3
 8003206:	ab03      	add	r3, sp, #12
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	ab02      	add	r3, sp, #8
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	ec47 6b10 	vmov	d0, r6, r7
 8003212:	4653      	mov	r3, sl
 8003214:	4622      	mov	r2, r4
 8003216:	f000 fe5b 	bl	8003ed0 <_dtoa_r>
 800321a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800321e:	4605      	mov	r5, r0
 8003220:	d119      	bne.n	8003256 <__cvt+0x94>
 8003222:	f019 0f01 	tst.w	r9, #1
 8003226:	d00e      	beq.n	8003246 <__cvt+0x84>
 8003228:	eb00 0904 	add.w	r9, r0, r4
 800322c:	2200      	movs	r2, #0
 800322e:	2300      	movs	r3, #0
 8003230:	4630      	mov	r0, r6
 8003232:	4639      	mov	r1, r7
 8003234:	f7fd fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 8003238:	b108      	cbz	r0, 800323e <__cvt+0x7c>
 800323a:	f8cd 900c 	str.w	r9, [sp, #12]
 800323e:	2230      	movs	r2, #48	@ 0x30
 8003240:	9b03      	ldr	r3, [sp, #12]
 8003242:	454b      	cmp	r3, r9
 8003244:	d31e      	bcc.n	8003284 <__cvt+0xc2>
 8003246:	9b03      	ldr	r3, [sp, #12]
 8003248:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800324a:	1b5b      	subs	r3, r3, r5
 800324c:	4628      	mov	r0, r5
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	b004      	add	sp, #16
 8003252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003256:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800325a:	eb00 0904 	add.w	r9, r0, r4
 800325e:	d1e5      	bne.n	800322c <__cvt+0x6a>
 8003260:	7803      	ldrb	r3, [r0, #0]
 8003262:	2b30      	cmp	r3, #48	@ 0x30
 8003264:	d10a      	bne.n	800327c <__cvt+0xba>
 8003266:	2200      	movs	r2, #0
 8003268:	2300      	movs	r3, #0
 800326a:	4630      	mov	r0, r6
 800326c:	4639      	mov	r1, r7
 800326e:	f7fd fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003272:	b918      	cbnz	r0, 800327c <__cvt+0xba>
 8003274:	f1c4 0401 	rsb	r4, r4, #1
 8003278:	f8ca 4000 	str.w	r4, [sl]
 800327c:	f8da 3000 	ldr.w	r3, [sl]
 8003280:	4499      	add	r9, r3
 8003282:	e7d3      	b.n	800322c <__cvt+0x6a>
 8003284:	1c59      	adds	r1, r3, #1
 8003286:	9103      	str	r1, [sp, #12]
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e7d9      	b.n	8003240 <__cvt+0x7e>

0800328c <__exponent>:
 800328c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800328e:	2900      	cmp	r1, #0
 8003290:	bfba      	itte	lt
 8003292:	4249      	neglt	r1, r1
 8003294:	232d      	movlt	r3, #45	@ 0x2d
 8003296:	232b      	movge	r3, #43	@ 0x2b
 8003298:	2909      	cmp	r1, #9
 800329a:	7002      	strb	r2, [r0, #0]
 800329c:	7043      	strb	r3, [r0, #1]
 800329e:	dd29      	ble.n	80032f4 <__exponent+0x68>
 80032a0:	f10d 0307 	add.w	r3, sp, #7
 80032a4:	461d      	mov	r5, r3
 80032a6:	270a      	movs	r7, #10
 80032a8:	461a      	mov	r2, r3
 80032aa:	fbb1 f6f7 	udiv	r6, r1, r7
 80032ae:	fb07 1416 	mls	r4, r7, r6, r1
 80032b2:	3430      	adds	r4, #48	@ 0x30
 80032b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80032b8:	460c      	mov	r4, r1
 80032ba:	2c63      	cmp	r4, #99	@ 0x63
 80032bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80032c0:	4631      	mov	r1, r6
 80032c2:	dcf1      	bgt.n	80032a8 <__exponent+0x1c>
 80032c4:	3130      	adds	r1, #48	@ 0x30
 80032c6:	1e94      	subs	r4, r2, #2
 80032c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80032cc:	1c41      	adds	r1, r0, #1
 80032ce:	4623      	mov	r3, r4
 80032d0:	42ab      	cmp	r3, r5
 80032d2:	d30a      	bcc.n	80032ea <__exponent+0x5e>
 80032d4:	f10d 0309 	add.w	r3, sp, #9
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	42ac      	cmp	r4, r5
 80032dc:	bf88      	it	hi
 80032de:	2300      	movhi	r3, #0
 80032e0:	3302      	adds	r3, #2
 80032e2:	4403      	add	r3, r0
 80032e4:	1a18      	subs	r0, r3, r0
 80032e6:	b003      	add	sp, #12
 80032e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80032ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80032f2:	e7ed      	b.n	80032d0 <__exponent+0x44>
 80032f4:	2330      	movs	r3, #48	@ 0x30
 80032f6:	3130      	adds	r1, #48	@ 0x30
 80032f8:	7083      	strb	r3, [r0, #2]
 80032fa:	70c1      	strb	r1, [r0, #3]
 80032fc:	1d03      	adds	r3, r0, #4
 80032fe:	e7f1      	b.n	80032e4 <__exponent+0x58>

08003300 <_printf_float>:
 8003300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003304:	b08d      	sub	sp, #52	@ 0x34
 8003306:	460c      	mov	r4, r1
 8003308:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800330c:	4616      	mov	r6, r2
 800330e:	461f      	mov	r7, r3
 8003310:	4605      	mov	r5, r0
 8003312:	f000 fcdb 	bl	8003ccc <_localeconv_r>
 8003316:	6803      	ldr	r3, [r0, #0]
 8003318:	9304      	str	r3, [sp, #16]
 800331a:	4618      	mov	r0, r3
 800331c:	f7fc ffa8 	bl	8000270 <strlen>
 8003320:	2300      	movs	r3, #0
 8003322:	930a      	str	r3, [sp, #40]	@ 0x28
 8003324:	f8d8 3000 	ldr.w	r3, [r8]
 8003328:	9005      	str	r0, [sp, #20]
 800332a:	3307      	adds	r3, #7
 800332c:	f023 0307 	bic.w	r3, r3, #7
 8003330:	f103 0208 	add.w	r2, r3, #8
 8003334:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003338:	f8d4 b000 	ldr.w	fp, [r4]
 800333c:	f8c8 2000 	str.w	r2, [r8]
 8003340:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003344:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003348:	9307      	str	r3, [sp, #28]
 800334a:	f8cd 8018 	str.w	r8, [sp, #24]
 800334e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003356:	4b9c      	ldr	r3, [pc, #624]	@ (80035c8 <_printf_float+0x2c8>)
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	f7fd fbe6 	bl	8000b2c <__aeabi_dcmpun>
 8003360:	bb70      	cbnz	r0, 80033c0 <_printf_float+0xc0>
 8003362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003366:	4b98      	ldr	r3, [pc, #608]	@ (80035c8 <_printf_float+0x2c8>)
 8003368:	f04f 32ff 	mov.w	r2, #4294967295
 800336c:	f7fd fbc0 	bl	8000af0 <__aeabi_dcmple>
 8003370:	bb30      	cbnz	r0, 80033c0 <_printf_float+0xc0>
 8003372:	2200      	movs	r2, #0
 8003374:	2300      	movs	r3, #0
 8003376:	4640      	mov	r0, r8
 8003378:	4649      	mov	r1, r9
 800337a:	f7fd fbaf 	bl	8000adc <__aeabi_dcmplt>
 800337e:	b110      	cbz	r0, 8003386 <_printf_float+0x86>
 8003380:	232d      	movs	r3, #45	@ 0x2d
 8003382:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003386:	4a91      	ldr	r2, [pc, #580]	@ (80035cc <_printf_float+0x2cc>)
 8003388:	4b91      	ldr	r3, [pc, #580]	@ (80035d0 <_printf_float+0x2d0>)
 800338a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800338e:	bf94      	ite	ls
 8003390:	4690      	movls	r8, r2
 8003392:	4698      	movhi	r8, r3
 8003394:	2303      	movs	r3, #3
 8003396:	6123      	str	r3, [r4, #16]
 8003398:	f02b 0304 	bic.w	r3, fp, #4
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	f04f 0900 	mov.w	r9, #0
 80033a2:	9700      	str	r7, [sp, #0]
 80033a4:	4633      	mov	r3, r6
 80033a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80033a8:	4621      	mov	r1, r4
 80033aa:	4628      	mov	r0, r5
 80033ac:	f000 f9d2 	bl	8003754 <_printf_common>
 80033b0:	3001      	adds	r0, #1
 80033b2:	f040 808d 	bne.w	80034d0 <_printf_float+0x1d0>
 80033b6:	f04f 30ff 	mov.w	r0, #4294967295
 80033ba:	b00d      	add	sp, #52	@ 0x34
 80033bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033c0:	4642      	mov	r2, r8
 80033c2:	464b      	mov	r3, r9
 80033c4:	4640      	mov	r0, r8
 80033c6:	4649      	mov	r1, r9
 80033c8:	f7fd fbb0 	bl	8000b2c <__aeabi_dcmpun>
 80033cc:	b140      	cbz	r0, 80033e0 <_printf_float+0xe0>
 80033ce:	464b      	mov	r3, r9
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bfbc      	itt	lt
 80033d4:	232d      	movlt	r3, #45	@ 0x2d
 80033d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80033da:	4a7e      	ldr	r2, [pc, #504]	@ (80035d4 <_printf_float+0x2d4>)
 80033dc:	4b7e      	ldr	r3, [pc, #504]	@ (80035d8 <_printf_float+0x2d8>)
 80033de:	e7d4      	b.n	800338a <_printf_float+0x8a>
 80033e0:	6863      	ldr	r3, [r4, #4]
 80033e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80033e6:	9206      	str	r2, [sp, #24]
 80033e8:	1c5a      	adds	r2, r3, #1
 80033ea:	d13b      	bne.n	8003464 <_printf_float+0x164>
 80033ec:	2306      	movs	r3, #6
 80033ee:	6063      	str	r3, [r4, #4]
 80033f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80033f4:	2300      	movs	r3, #0
 80033f6:	6022      	str	r2, [r4, #0]
 80033f8:	9303      	str	r3, [sp, #12]
 80033fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80033fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003400:	ab09      	add	r3, sp, #36	@ 0x24
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	6861      	ldr	r1, [r4, #4]
 8003406:	ec49 8b10 	vmov	d0, r8, r9
 800340a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800340e:	4628      	mov	r0, r5
 8003410:	f7ff fed7 	bl	80031c2 <__cvt>
 8003414:	9b06      	ldr	r3, [sp, #24]
 8003416:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003418:	2b47      	cmp	r3, #71	@ 0x47
 800341a:	4680      	mov	r8, r0
 800341c:	d129      	bne.n	8003472 <_printf_float+0x172>
 800341e:	1cc8      	adds	r0, r1, #3
 8003420:	db02      	blt.n	8003428 <_printf_float+0x128>
 8003422:	6863      	ldr	r3, [r4, #4]
 8003424:	4299      	cmp	r1, r3
 8003426:	dd41      	ble.n	80034ac <_printf_float+0x1ac>
 8003428:	f1aa 0a02 	sub.w	sl, sl, #2
 800342c:	fa5f fa8a 	uxtb.w	sl, sl
 8003430:	3901      	subs	r1, #1
 8003432:	4652      	mov	r2, sl
 8003434:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003438:	9109      	str	r1, [sp, #36]	@ 0x24
 800343a:	f7ff ff27 	bl	800328c <__exponent>
 800343e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003440:	1813      	adds	r3, r2, r0
 8003442:	2a01      	cmp	r2, #1
 8003444:	4681      	mov	r9, r0
 8003446:	6123      	str	r3, [r4, #16]
 8003448:	dc02      	bgt.n	8003450 <_printf_float+0x150>
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	07d2      	lsls	r2, r2, #31
 800344e:	d501      	bpl.n	8003454 <_printf_float+0x154>
 8003450:	3301      	adds	r3, #1
 8003452:	6123      	str	r3, [r4, #16]
 8003454:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0a2      	beq.n	80033a2 <_printf_float+0xa2>
 800345c:	232d      	movs	r3, #45	@ 0x2d
 800345e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003462:	e79e      	b.n	80033a2 <_printf_float+0xa2>
 8003464:	9a06      	ldr	r2, [sp, #24]
 8003466:	2a47      	cmp	r2, #71	@ 0x47
 8003468:	d1c2      	bne.n	80033f0 <_printf_float+0xf0>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1c0      	bne.n	80033f0 <_printf_float+0xf0>
 800346e:	2301      	movs	r3, #1
 8003470:	e7bd      	b.n	80033ee <_printf_float+0xee>
 8003472:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003476:	d9db      	bls.n	8003430 <_printf_float+0x130>
 8003478:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800347c:	d118      	bne.n	80034b0 <_printf_float+0x1b0>
 800347e:	2900      	cmp	r1, #0
 8003480:	6863      	ldr	r3, [r4, #4]
 8003482:	dd0b      	ble.n	800349c <_printf_float+0x19c>
 8003484:	6121      	str	r1, [r4, #16]
 8003486:	b913      	cbnz	r3, 800348e <_printf_float+0x18e>
 8003488:	6822      	ldr	r2, [r4, #0]
 800348a:	07d0      	lsls	r0, r2, #31
 800348c:	d502      	bpl.n	8003494 <_printf_float+0x194>
 800348e:	3301      	adds	r3, #1
 8003490:	440b      	add	r3, r1
 8003492:	6123      	str	r3, [r4, #16]
 8003494:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003496:	f04f 0900 	mov.w	r9, #0
 800349a:	e7db      	b.n	8003454 <_printf_float+0x154>
 800349c:	b913      	cbnz	r3, 80034a4 <_printf_float+0x1a4>
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	07d2      	lsls	r2, r2, #31
 80034a2:	d501      	bpl.n	80034a8 <_printf_float+0x1a8>
 80034a4:	3302      	adds	r3, #2
 80034a6:	e7f4      	b.n	8003492 <_printf_float+0x192>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e7f2      	b.n	8003492 <_printf_float+0x192>
 80034ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80034b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034b2:	4299      	cmp	r1, r3
 80034b4:	db05      	blt.n	80034c2 <_printf_float+0x1c2>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	6121      	str	r1, [r4, #16]
 80034ba:	07d8      	lsls	r0, r3, #31
 80034bc:	d5ea      	bpl.n	8003494 <_printf_float+0x194>
 80034be:	1c4b      	adds	r3, r1, #1
 80034c0:	e7e7      	b.n	8003492 <_printf_float+0x192>
 80034c2:	2900      	cmp	r1, #0
 80034c4:	bfd4      	ite	le
 80034c6:	f1c1 0202 	rsble	r2, r1, #2
 80034ca:	2201      	movgt	r2, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	e7e0      	b.n	8003492 <_printf_float+0x192>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	055a      	lsls	r2, r3, #21
 80034d4:	d407      	bmi.n	80034e6 <_printf_float+0x1e6>
 80034d6:	6923      	ldr	r3, [r4, #16]
 80034d8:	4642      	mov	r2, r8
 80034da:	4631      	mov	r1, r6
 80034dc:	4628      	mov	r0, r5
 80034de:	47b8      	blx	r7
 80034e0:	3001      	adds	r0, #1
 80034e2:	d12b      	bne.n	800353c <_printf_float+0x23c>
 80034e4:	e767      	b.n	80033b6 <_printf_float+0xb6>
 80034e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80034ea:	f240 80dd 	bls.w	80036a8 <_printf_float+0x3a8>
 80034ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80034f2:	2200      	movs	r2, #0
 80034f4:	2300      	movs	r3, #0
 80034f6:	f7fd fae7 	bl	8000ac8 <__aeabi_dcmpeq>
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d033      	beq.n	8003566 <_printf_float+0x266>
 80034fe:	4a37      	ldr	r2, [pc, #220]	@ (80035dc <_printf_float+0x2dc>)
 8003500:	2301      	movs	r3, #1
 8003502:	4631      	mov	r1, r6
 8003504:	4628      	mov	r0, r5
 8003506:	47b8      	blx	r7
 8003508:	3001      	adds	r0, #1
 800350a:	f43f af54 	beq.w	80033b6 <_printf_float+0xb6>
 800350e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003512:	4543      	cmp	r3, r8
 8003514:	db02      	blt.n	800351c <_printf_float+0x21c>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	07d8      	lsls	r0, r3, #31
 800351a:	d50f      	bpl.n	800353c <_printf_float+0x23c>
 800351c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003520:	4631      	mov	r1, r6
 8003522:	4628      	mov	r0, r5
 8003524:	47b8      	blx	r7
 8003526:	3001      	adds	r0, #1
 8003528:	f43f af45 	beq.w	80033b6 <_printf_float+0xb6>
 800352c:	f04f 0900 	mov.w	r9, #0
 8003530:	f108 38ff 	add.w	r8, r8, #4294967295
 8003534:	f104 0a1a 	add.w	sl, r4, #26
 8003538:	45c8      	cmp	r8, r9
 800353a:	dc09      	bgt.n	8003550 <_printf_float+0x250>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	079b      	lsls	r3, r3, #30
 8003540:	f100 8103 	bmi.w	800374a <_printf_float+0x44a>
 8003544:	68e0      	ldr	r0, [r4, #12]
 8003546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003548:	4298      	cmp	r0, r3
 800354a:	bfb8      	it	lt
 800354c:	4618      	movlt	r0, r3
 800354e:	e734      	b.n	80033ba <_printf_float+0xba>
 8003550:	2301      	movs	r3, #1
 8003552:	4652      	mov	r2, sl
 8003554:	4631      	mov	r1, r6
 8003556:	4628      	mov	r0, r5
 8003558:	47b8      	blx	r7
 800355a:	3001      	adds	r0, #1
 800355c:	f43f af2b 	beq.w	80033b6 <_printf_float+0xb6>
 8003560:	f109 0901 	add.w	r9, r9, #1
 8003564:	e7e8      	b.n	8003538 <_printf_float+0x238>
 8003566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003568:	2b00      	cmp	r3, #0
 800356a:	dc39      	bgt.n	80035e0 <_printf_float+0x2e0>
 800356c:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <_printf_float+0x2dc>)
 800356e:	2301      	movs	r3, #1
 8003570:	4631      	mov	r1, r6
 8003572:	4628      	mov	r0, r5
 8003574:	47b8      	blx	r7
 8003576:	3001      	adds	r0, #1
 8003578:	f43f af1d 	beq.w	80033b6 <_printf_float+0xb6>
 800357c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003580:	ea59 0303 	orrs.w	r3, r9, r3
 8003584:	d102      	bne.n	800358c <_printf_float+0x28c>
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	07d9      	lsls	r1, r3, #31
 800358a:	d5d7      	bpl.n	800353c <_printf_float+0x23c>
 800358c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003590:	4631      	mov	r1, r6
 8003592:	4628      	mov	r0, r5
 8003594:	47b8      	blx	r7
 8003596:	3001      	adds	r0, #1
 8003598:	f43f af0d 	beq.w	80033b6 <_printf_float+0xb6>
 800359c:	f04f 0a00 	mov.w	sl, #0
 80035a0:	f104 0b1a 	add.w	fp, r4, #26
 80035a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035a6:	425b      	negs	r3, r3
 80035a8:	4553      	cmp	r3, sl
 80035aa:	dc01      	bgt.n	80035b0 <_printf_float+0x2b0>
 80035ac:	464b      	mov	r3, r9
 80035ae:	e793      	b.n	80034d8 <_printf_float+0x1d8>
 80035b0:	2301      	movs	r3, #1
 80035b2:	465a      	mov	r2, fp
 80035b4:	4631      	mov	r1, r6
 80035b6:	4628      	mov	r0, r5
 80035b8:	47b8      	blx	r7
 80035ba:	3001      	adds	r0, #1
 80035bc:	f43f aefb 	beq.w	80033b6 <_printf_float+0xb6>
 80035c0:	f10a 0a01 	add.w	sl, sl, #1
 80035c4:	e7ee      	b.n	80035a4 <_printf_float+0x2a4>
 80035c6:	bf00      	nop
 80035c8:	7fefffff 	.word	0x7fefffff
 80035cc:	08005ea8 	.word	0x08005ea8
 80035d0:	08005eac 	.word	0x08005eac
 80035d4:	08005eb0 	.word	0x08005eb0
 80035d8:	08005eb4 	.word	0x08005eb4
 80035dc:	08005eb8 	.word	0x08005eb8
 80035e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80035e6:	4553      	cmp	r3, sl
 80035e8:	bfa8      	it	ge
 80035ea:	4653      	movge	r3, sl
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	4699      	mov	r9, r3
 80035f0:	dc36      	bgt.n	8003660 <_printf_float+0x360>
 80035f2:	f04f 0b00 	mov.w	fp, #0
 80035f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035fa:	f104 021a 	add.w	r2, r4, #26
 80035fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003600:	9306      	str	r3, [sp, #24]
 8003602:	eba3 0309 	sub.w	r3, r3, r9
 8003606:	455b      	cmp	r3, fp
 8003608:	dc31      	bgt.n	800366e <_printf_float+0x36e>
 800360a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800360c:	459a      	cmp	sl, r3
 800360e:	dc3a      	bgt.n	8003686 <_printf_float+0x386>
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	07da      	lsls	r2, r3, #31
 8003614:	d437      	bmi.n	8003686 <_printf_float+0x386>
 8003616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003618:	ebaa 0903 	sub.w	r9, sl, r3
 800361c:	9b06      	ldr	r3, [sp, #24]
 800361e:	ebaa 0303 	sub.w	r3, sl, r3
 8003622:	4599      	cmp	r9, r3
 8003624:	bfa8      	it	ge
 8003626:	4699      	movge	r9, r3
 8003628:	f1b9 0f00 	cmp.w	r9, #0
 800362c:	dc33      	bgt.n	8003696 <_printf_float+0x396>
 800362e:	f04f 0800 	mov.w	r8, #0
 8003632:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003636:	f104 0b1a 	add.w	fp, r4, #26
 800363a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800363c:	ebaa 0303 	sub.w	r3, sl, r3
 8003640:	eba3 0309 	sub.w	r3, r3, r9
 8003644:	4543      	cmp	r3, r8
 8003646:	f77f af79 	ble.w	800353c <_printf_float+0x23c>
 800364a:	2301      	movs	r3, #1
 800364c:	465a      	mov	r2, fp
 800364e:	4631      	mov	r1, r6
 8003650:	4628      	mov	r0, r5
 8003652:	47b8      	blx	r7
 8003654:	3001      	adds	r0, #1
 8003656:	f43f aeae 	beq.w	80033b6 <_printf_float+0xb6>
 800365a:	f108 0801 	add.w	r8, r8, #1
 800365e:	e7ec      	b.n	800363a <_printf_float+0x33a>
 8003660:	4642      	mov	r2, r8
 8003662:	4631      	mov	r1, r6
 8003664:	4628      	mov	r0, r5
 8003666:	47b8      	blx	r7
 8003668:	3001      	adds	r0, #1
 800366a:	d1c2      	bne.n	80035f2 <_printf_float+0x2f2>
 800366c:	e6a3      	b.n	80033b6 <_printf_float+0xb6>
 800366e:	2301      	movs	r3, #1
 8003670:	4631      	mov	r1, r6
 8003672:	4628      	mov	r0, r5
 8003674:	9206      	str	r2, [sp, #24]
 8003676:	47b8      	blx	r7
 8003678:	3001      	adds	r0, #1
 800367a:	f43f ae9c 	beq.w	80033b6 <_printf_float+0xb6>
 800367e:	9a06      	ldr	r2, [sp, #24]
 8003680:	f10b 0b01 	add.w	fp, fp, #1
 8003684:	e7bb      	b.n	80035fe <_printf_float+0x2fe>
 8003686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800368a:	4631      	mov	r1, r6
 800368c:	4628      	mov	r0, r5
 800368e:	47b8      	blx	r7
 8003690:	3001      	adds	r0, #1
 8003692:	d1c0      	bne.n	8003616 <_printf_float+0x316>
 8003694:	e68f      	b.n	80033b6 <_printf_float+0xb6>
 8003696:	9a06      	ldr	r2, [sp, #24]
 8003698:	464b      	mov	r3, r9
 800369a:	4442      	add	r2, r8
 800369c:	4631      	mov	r1, r6
 800369e:	4628      	mov	r0, r5
 80036a0:	47b8      	blx	r7
 80036a2:	3001      	adds	r0, #1
 80036a4:	d1c3      	bne.n	800362e <_printf_float+0x32e>
 80036a6:	e686      	b.n	80033b6 <_printf_float+0xb6>
 80036a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80036ac:	f1ba 0f01 	cmp.w	sl, #1
 80036b0:	dc01      	bgt.n	80036b6 <_printf_float+0x3b6>
 80036b2:	07db      	lsls	r3, r3, #31
 80036b4:	d536      	bpl.n	8003724 <_printf_float+0x424>
 80036b6:	2301      	movs	r3, #1
 80036b8:	4642      	mov	r2, r8
 80036ba:	4631      	mov	r1, r6
 80036bc:	4628      	mov	r0, r5
 80036be:	47b8      	blx	r7
 80036c0:	3001      	adds	r0, #1
 80036c2:	f43f ae78 	beq.w	80033b6 <_printf_float+0xb6>
 80036c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036ca:	4631      	mov	r1, r6
 80036cc:	4628      	mov	r0, r5
 80036ce:	47b8      	blx	r7
 80036d0:	3001      	adds	r0, #1
 80036d2:	f43f ae70 	beq.w	80033b6 <_printf_float+0xb6>
 80036d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80036da:	2200      	movs	r2, #0
 80036dc:	2300      	movs	r3, #0
 80036de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80036e2:	f7fd f9f1 	bl	8000ac8 <__aeabi_dcmpeq>
 80036e6:	b9c0      	cbnz	r0, 800371a <_printf_float+0x41a>
 80036e8:	4653      	mov	r3, sl
 80036ea:	f108 0201 	add.w	r2, r8, #1
 80036ee:	4631      	mov	r1, r6
 80036f0:	4628      	mov	r0, r5
 80036f2:	47b8      	blx	r7
 80036f4:	3001      	adds	r0, #1
 80036f6:	d10c      	bne.n	8003712 <_printf_float+0x412>
 80036f8:	e65d      	b.n	80033b6 <_printf_float+0xb6>
 80036fa:	2301      	movs	r3, #1
 80036fc:	465a      	mov	r2, fp
 80036fe:	4631      	mov	r1, r6
 8003700:	4628      	mov	r0, r5
 8003702:	47b8      	blx	r7
 8003704:	3001      	adds	r0, #1
 8003706:	f43f ae56 	beq.w	80033b6 <_printf_float+0xb6>
 800370a:	f108 0801 	add.w	r8, r8, #1
 800370e:	45d0      	cmp	r8, sl
 8003710:	dbf3      	blt.n	80036fa <_printf_float+0x3fa>
 8003712:	464b      	mov	r3, r9
 8003714:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003718:	e6df      	b.n	80034da <_printf_float+0x1da>
 800371a:	f04f 0800 	mov.w	r8, #0
 800371e:	f104 0b1a 	add.w	fp, r4, #26
 8003722:	e7f4      	b.n	800370e <_printf_float+0x40e>
 8003724:	2301      	movs	r3, #1
 8003726:	4642      	mov	r2, r8
 8003728:	e7e1      	b.n	80036ee <_printf_float+0x3ee>
 800372a:	2301      	movs	r3, #1
 800372c:	464a      	mov	r2, r9
 800372e:	4631      	mov	r1, r6
 8003730:	4628      	mov	r0, r5
 8003732:	47b8      	blx	r7
 8003734:	3001      	adds	r0, #1
 8003736:	f43f ae3e 	beq.w	80033b6 <_printf_float+0xb6>
 800373a:	f108 0801 	add.w	r8, r8, #1
 800373e:	68e3      	ldr	r3, [r4, #12]
 8003740:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003742:	1a5b      	subs	r3, r3, r1
 8003744:	4543      	cmp	r3, r8
 8003746:	dcf0      	bgt.n	800372a <_printf_float+0x42a>
 8003748:	e6fc      	b.n	8003544 <_printf_float+0x244>
 800374a:	f04f 0800 	mov.w	r8, #0
 800374e:	f104 0919 	add.w	r9, r4, #25
 8003752:	e7f4      	b.n	800373e <_printf_float+0x43e>

08003754 <_printf_common>:
 8003754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003758:	4616      	mov	r6, r2
 800375a:	4698      	mov	r8, r3
 800375c:	688a      	ldr	r2, [r1, #8]
 800375e:	690b      	ldr	r3, [r1, #16]
 8003760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003764:	4293      	cmp	r3, r2
 8003766:	bfb8      	it	lt
 8003768:	4613      	movlt	r3, r2
 800376a:	6033      	str	r3, [r6, #0]
 800376c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003770:	4607      	mov	r7, r0
 8003772:	460c      	mov	r4, r1
 8003774:	b10a      	cbz	r2, 800377a <_printf_common+0x26>
 8003776:	3301      	adds	r3, #1
 8003778:	6033      	str	r3, [r6, #0]
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	0699      	lsls	r1, r3, #26
 800377e:	bf42      	ittt	mi
 8003780:	6833      	ldrmi	r3, [r6, #0]
 8003782:	3302      	addmi	r3, #2
 8003784:	6033      	strmi	r3, [r6, #0]
 8003786:	6825      	ldr	r5, [r4, #0]
 8003788:	f015 0506 	ands.w	r5, r5, #6
 800378c:	d106      	bne.n	800379c <_printf_common+0x48>
 800378e:	f104 0a19 	add.w	sl, r4, #25
 8003792:	68e3      	ldr	r3, [r4, #12]
 8003794:	6832      	ldr	r2, [r6, #0]
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	42ab      	cmp	r3, r5
 800379a:	dc26      	bgt.n	80037ea <_printf_common+0x96>
 800379c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	3b00      	subs	r3, #0
 80037a4:	bf18      	it	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	0692      	lsls	r2, r2, #26
 80037aa:	d42b      	bmi.n	8003804 <_printf_common+0xb0>
 80037ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037b0:	4641      	mov	r1, r8
 80037b2:	4638      	mov	r0, r7
 80037b4:	47c8      	blx	r9
 80037b6:	3001      	adds	r0, #1
 80037b8:	d01e      	beq.n	80037f8 <_printf_common+0xa4>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	6922      	ldr	r2, [r4, #16]
 80037be:	f003 0306 	and.w	r3, r3, #6
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf02      	ittt	eq
 80037c6:	68e5      	ldreq	r5, [r4, #12]
 80037c8:	6833      	ldreq	r3, [r6, #0]
 80037ca:	1aed      	subeq	r5, r5, r3
 80037cc:	68a3      	ldr	r3, [r4, #8]
 80037ce:	bf0c      	ite	eq
 80037d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037d4:	2500      	movne	r5, #0
 80037d6:	4293      	cmp	r3, r2
 80037d8:	bfc4      	itt	gt
 80037da:	1a9b      	subgt	r3, r3, r2
 80037dc:	18ed      	addgt	r5, r5, r3
 80037de:	2600      	movs	r6, #0
 80037e0:	341a      	adds	r4, #26
 80037e2:	42b5      	cmp	r5, r6
 80037e4:	d11a      	bne.n	800381c <_printf_common+0xc8>
 80037e6:	2000      	movs	r0, #0
 80037e8:	e008      	b.n	80037fc <_printf_common+0xa8>
 80037ea:	2301      	movs	r3, #1
 80037ec:	4652      	mov	r2, sl
 80037ee:	4641      	mov	r1, r8
 80037f0:	4638      	mov	r0, r7
 80037f2:	47c8      	blx	r9
 80037f4:	3001      	adds	r0, #1
 80037f6:	d103      	bne.n	8003800 <_printf_common+0xac>
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003800:	3501      	adds	r5, #1
 8003802:	e7c6      	b.n	8003792 <_printf_common+0x3e>
 8003804:	18e1      	adds	r1, r4, r3
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	2030      	movs	r0, #48	@ 0x30
 800380a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800380e:	4422      	add	r2, r4
 8003810:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003814:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003818:	3302      	adds	r3, #2
 800381a:	e7c7      	b.n	80037ac <_printf_common+0x58>
 800381c:	2301      	movs	r3, #1
 800381e:	4622      	mov	r2, r4
 8003820:	4641      	mov	r1, r8
 8003822:	4638      	mov	r0, r7
 8003824:	47c8      	blx	r9
 8003826:	3001      	adds	r0, #1
 8003828:	d0e6      	beq.n	80037f8 <_printf_common+0xa4>
 800382a:	3601      	adds	r6, #1
 800382c:	e7d9      	b.n	80037e2 <_printf_common+0x8e>
	...

08003830 <_printf_i>:
 8003830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003834:	7e0f      	ldrb	r7, [r1, #24]
 8003836:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003838:	2f78      	cmp	r7, #120	@ 0x78
 800383a:	4691      	mov	r9, r2
 800383c:	4680      	mov	r8, r0
 800383e:	460c      	mov	r4, r1
 8003840:	469a      	mov	sl, r3
 8003842:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003846:	d807      	bhi.n	8003858 <_printf_i+0x28>
 8003848:	2f62      	cmp	r7, #98	@ 0x62
 800384a:	d80a      	bhi.n	8003862 <_printf_i+0x32>
 800384c:	2f00      	cmp	r7, #0
 800384e:	f000 80d2 	beq.w	80039f6 <_printf_i+0x1c6>
 8003852:	2f58      	cmp	r7, #88	@ 0x58
 8003854:	f000 80b9 	beq.w	80039ca <_printf_i+0x19a>
 8003858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800385c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003860:	e03a      	b.n	80038d8 <_printf_i+0xa8>
 8003862:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003866:	2b15      	cmp	r3, #21
 8003868:	d8f6      	bhi.n	8003858 <_printf_i+0x28>
 800386a:	a101      	add	r1, pc, #4	@ (adr r1, 8003870 <_printf_i+0x40>)
 800386c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003870:	080038c9 	.word	0x080038c9
 8003874:	080038dd 	.word	0x080038dd
 8003878:	08003859 	.word	0x08003859
 800387c:	08003859 	.word	0x08003859
 8003880:	08003859 	.word	0x08003859
 8003884:	08003859 	.word	0x08003859
 8003888:	080038dd 	.word	0x080038dd
 800388c:	08003859 	.word	0x08003859
 8003890:	08003859 	.word	0x08003859
 8003894:	08003859 	.word	0x08003859
 8003898:	08003859 	.word	0x08003859
 800389c:	080039dd 	.word	0x080039dd
 80038a0:	08003907 	.word	0x08003907
 80038a4:	08003997 	.word	0x08003997
 80038a8:	08003859 	.word	0x08003859
 80038ac:	08003859 	.word	0x08003859
 80038b0:	080039ff 	.word	0x080039ff
 80038b4:	08003859 	.word	0x08003859
 80038b8:	08003907 	.word	0x08003907
 80038bc:	08003859 	.word	0x08003859
 80038c0:	08003859 	.word	0x08003859
 80038c4:	0800399f 	.word	0x0800399f
 80038c8:	6833      	ldr	r3, [r6, #0]
 80038ca:	1d1a      	adds	r2, r3, #4
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	6032      	str	r2, [r6, #0]
 80038d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038d8:	2301      	movs	r3, #1
 80038da:	e09d      	b.n	8003a18 <_printf_i+0x1e8>
 80038dc:	6833      	ldr	r3, [r6, #0]
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	1d19      	adds	r1, r3, #4
 80038e2:	6031      	str	r1, [r6, #0]
 80038e4:	0606      	lsls	r6, r0, #24
 80038e6:	d501      	bpl.n	80038ec <_printf_i+0xbc>
 80038e8:	681d      	ldr	r5, [r3, #0]
 80038ea:	e003      	b.n	80038f4 <_printf_i+0xc4>
 80038ec:	0645      	lsls	r5, r0, #25
 80038ee:	d5fb      	bpl.n	80038e8 <_printf_i+0xb8>
 80038f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80038f4:	2d00      	cmp	r5, #0
 80038f6:	da03      	bge.n	8003900 <_printf_i+0xd0>
 80038f8:	232d      	movs	r3, #45	@ 0x2d
 80038fa:	426d      	negs	r5, r5
 80038fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003900:	4859      	ldr	r0, [pc, #356]	@ (8003a68 <_printf_i+0x238>)
 8003902:	230a      	movs	r3, #10
 8003904:	e011      	b.n	800392a <_printf_i+0xfa>
 8003906:	6821      	ldr	r1, [r4, #0]
 8003908:	6833      	ldr	r3, [r6, #0]
 800390a:	0608      	lsls	r0, r1, #24
 800390c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003910:	d402      	bmi.n	8003918 <_printf_i+0xe8>
 8003912:	0649      	lsls	r1, r1, #25
 8003914:	bf48      	it	mi
 8003916:	b2ad      	uxthmi	r5, r5
 8003918:	2f6f      	cmp	r7, #111	@ 0x6f
 800391a:	4853      	ldr	r0, [pc, #332]	@ (8003a68 <_printf_i+0x238>)
 800391c:	6033      	str	r3, [r6, #0]
 800391e:	bf14      	ite	ne
 8003920:	230a      	movne	r3, #10
 8003922:	2308      	moveq	r3, #8
 8003924:	2100      	movs	r1, #0
 8003926:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800392a:	6866      	ldr	r6, [r4, #4]
 800392c:	60a6      	str	r6, [r4, #8]
 800392e:	2e00      	cmp	r6, #0
 8003930:	bfa2      	ittt	ge
 8003932:	6821      	ldrge	r1, [r4, #0]
 8003934:	f021 0104 	bicge.w	r1, r1, #4
 8003938:	6021      	strge	r1, [r4, #0]
 800393a:	b90d      	cbnz	r5, 8003940 <_printf_i+0x110>
 800393c:	2e00      	cmp	r6, #0
 800393e:	d04b      	beq.n	80039d8 <_printf_i+0x1a8>
 8003940:	4616      	mov	r6, r2
 8003942:	fbb5 f1f3 	udiv	r1, r5, r3
 8003946:	fb03 5711 	mls	r7, r3, r1, r5
 800394a:	5dc7      	ldrb	r7, [r0, r7]
 800394c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003950:	462f      	mov	r7, r5
 8003952:	42bb      	cmp	r3, r7
 8003954:	460d      	mov	r5, r1
 8003956:	d9f4      	bls.n	8003942 <_printf_i+0x112>
 8003958:	2b08      	cmp	r3, #8
 800395a:	d10b      	bne.n	8003974 <_printf_i+0x144>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	07df      	lsls	r7, r3, #31
 8003960:	d508      	bpl.n	8003974 <_printf_i+0x144>
 8003962:	6923      	ldr	r3, [r4, #16]
 8003964:	6861      	ldr	r1, [r4, #4]
 8003966:	4299      	cmp	r1, r3
 8003968:	bfde      	ittt	le
 800396a:	2330      	movle	r3, #48	@ 0x30
 800396c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003970:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003974:	1b92      	subs	r2, r2, r6
 8003976:	6122      	str	r2, [r4, #16]
 8003978:	f8cd a000 	str.w	sl, [sp]
 800397c:	464b      	mov	r3, r9
 800397e:	aa03      	add	r2, sp, #12
 8003980:	4621      	mov	r1, r4
 8003982:	4640      	mov	r0, r8
 8003984:	f7ff fee6 	bl	8003754 <_printf_common>
 8003988:	3001      	adds	r0, #1
 800398a:	d14a      	bne.n	8003a22 <_printf_i+0x1f2>
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	b004      	add	sp, #16
 8003992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	f043 0320 	orr.w	r3, r3, #32
 800399c:	6023      	str	r3, [r4, #0]
 800399e:	4833      	ldr	r0, [pc, #204]	@ (8003a6c <_printf_i+0x23c>)
 80039a0:	2778      	movs	r7, #120	@ 0x78
 80039a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	6831      	ldr	r1, [r6, #0]
 80039aa:	061f      	lsls	r7, r3, #24
 80039ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80039b0:	d402      	bmi.n	80039b8 <_printf_i+0x188>
 80039b2:	065f      	lsls	r7, r3, #25
 80039b4:	bf48      	it	mi
 80039b6:	b2ad      	uxthmi	r5, r5
 80039b8:	6031      	str	r1, [r6, #0]
 80039ba:	07d9      	lsls	r1, r3, #31
 80039bc:	bf44      	itt	mi
 80039be:	f043 0320 	orrmi.w	r3, r3, #32
 80039c2:	6023      	strmi	r3, [r4, #0]
 80039c4:	b11d      	cbz	r5, 80039ce <_printf_i+0x19e>
 80039c6:	2310      	movs	r3, #16
 80039c8:	e7ac      	b.n	8003924 <_printf_i+0xf4>
 80039ca:	4827      	ldr	r0, [pc, #156]	@ (8003a68 <_printf_i+0x238>)
 80039cc:	e7e9      	b.n	80039a2 <_printf_i+0x172>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	f023 0320 	bic.w	r3, r3, #32
 80039d4:	6023      	str	r3, [r4, #0]
 80039d6:	e7f6      	b.n	80039c6 <_printf_i+0x196>
 80039d8:	4616      	mov	r6, r2
 80039da:	e7bd      	b.n	8003958 <_printf_i+0x128>
 80039dc:	6833      	ldr	r3, [r6, #0]
 80039de:	6825      	ldr	r5, [r4, #0]
 80039e0:	6961      	ldr	r1, [r4, #20]
 80039e2:	1d18      	adds	r0, r3, #4
 80039e4:	6030      	str	r0, [r6, #0]
 80039e6:	062e      	lsls	r6, r5, #24
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	d501      	bpl.n	80039f0 <_printf_i+0x1c0>
 80039ec:	6019      	str	r1, [r3, #0]
 80039ee:	e002      	b.n	80039f6 <_printf_i+0x1c6>
 80039f0:	0668      	lsls	r0, r5, #25
 80039f2:	d5fb      	bpl.n	80039ec <_printf_i+0x1bc>
 80039f4:	8019      	strh	r1, [r3, #0]
 80039f6:	2300      	movs	r3, #0
 80039f8:	6123      	str	r3, [r4, #16]
 80039fa:	4616      	mov	r6, r2
 80039fc:	e7bc      	b.n	8003978 <_printf_i+0x148>
 80039fe:	6833      	ldr	r3, [r6, #0]
 8003a00:	1d1a      	adds	r2, r3, #4
 8003a02:	6032      	str	r2, [r6, #0]
 8003a04:	681e      	ldr	r6, [r3, #0]
 8003a06:	6862      	ldr	r2, [r4, #4]
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4630      	mov	r0, r6
 8003a0c:	f7fc fbe0 	bl	80001d0 <memchr>
 8003a10:	b108      	cbz	r0, 8003a16 <_printf_i+0x1e6>
 8003a12:	1b80      	subs	r0, r0, r6
 8003a14:	6060      	str	r0, [r4, #4]
 8003a16:	6863      	ldr	r3, [r4, #4]
 8003a18:	6123      	str	r3, [r4, #16]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a20:	e7aa      	b.n	8003978 <_printf_i+0x148>
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	4632      	mov	r2, r6
 8003a26:	4649      	mov	r1, r9
 8003a28:	4640      	mov	r0, r8
 8003a2a:	47d0      	blx	sl
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d0ad      	beq.n	800398c <_printf_i+0x15c>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	079b      	lsls	r3, r3, #30
 8003a34:	d413      	bmi.n	8003a5e <_printf_i+0x22e>
 8003a36:	68e0      	ldr	r0, [r4, #12]
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	4298      	cmp	r0, r3
 8003a3c:	bfb8      	it	lt
 8003a3e:	4618      	movlt	r0, r3
 8003a40:	e7a6      	b.n	8003990 <_printf_i+0x160>
 8003a42:	2301      	movs	r3, #1
 8003a44:	4632      	mov	r2, r6
 8003a46:	4649      	mov	r1, r9
 8003a48:	4640      	mov	r0, r8
 8003a4a:	47d0      	blx	sl
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d09d      	beq.n	800398c <_printf_i+0x15c>
 8003a50:	3501      	adds	r5, #1
 8003a52:	68e3      	ldr	r3, [r4, #12]
 8003a54:	9903      	ldr	r1, [sp, #12]
 8003a56:	1a5b      	subs	r3, r3, r1
 8003a58:	42ab      	cmp	r3, r5
 8003a5a:	dcf2      	bgt.n	8003a42 <_printf_i+0x212>
 8003a5c:	e7eb      	b.n	8003a36 <_printf_i+0x206>
 8003a5e:	2500      	movs	r5, #0
 8003a60:	f104 0619 	add.w	r6, r4, #25
 8003a64:	e7f5      	b.n	8003a52 <_printf_i+0x222>
 8003a66:	bf00      	nop
 8003a68:	08005eba 	.word	0x08005eba
 8003a6c:	08005ecb 	.word	0x08005ecb

08003a70 <std>:
 8003a70:	2300      	movs	r3, #0
 8003a72:	b510      	push	{r4, lr}
 8003a74:	4604      	mov	r4, r0
 8003a76:	e9c0 3300 	strd	r3, r3, [r0]
 8003a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a7e:	6083      	str	r3, [r0, #8]
 8003a80:	8181      	strh	r1, [r0, #12]
 8003a82:	6643      	str	r3, [r0, #100]	@ 0x64
 8003a84:	81c2      	strh	r2, [r0, #14]
 8003a86:	6183      	str	r3, [r0, #24]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	2208      	movs	r2, #8
 8003a8c:	305c      	adds	r0, #92	@ 0x5c
 8003a8e:	f000 f914 	bl	8003cba <memset>
 8003a92:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac8 <std+0x58>)
 8003a94:	6263      	str	r3, [r4, #36]	@ 0x24
 8003a96:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <std+0x5c>)
 8003a98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <std+0x60>)
 8003a9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <std+0x64>)
 8003aa0:	6323      	str	r3, [r4, #48]	@ 0x30
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad8 <std+0x68>)
 8003aa4:	6224      	str	r4, [r4, #32]
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	d006      	beq.n	8003ab8 <std+0x48>
 8003aaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003aae:	4294      	cmp	r4, r2
 8003ab0:	d002      	beq.n	8003ab8 <std+0x48>
 8003ab2:	33d0      	adds	r3, #208	@ 0xd0
 8003ab4:	429c      	cmp	r4, r3
 8003ab6:	d105      	bne.n	8003ac4 <std+0x54>
 8003ab8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac0:	f000 b978 	b.w	8003db4 <__retarget_lock_init_recursive>
 8003ac4:	bd10      	pop	{r4, pc}
 8003ac6:	bf00      	nop
 8003ac8:	08003c35 	.word	0x08003c35
 8003acc:	08003c57 	.word	0x08003c57
 8003ad0:	08003c8f 	.word	0x08003c8f
 8003ad4:	08003cb3 	.word	0x08003cb3
 8003ad8:	20000318 	.word	0x20000318

08003adc <stdio_exit_handler>:
 8003adc:	4a02      	ldr	r2, [pc, #8]	@ (8003ae8 <stdio_exit_handler+0xc>)
 8003ade:	4903      	ldr	r1, [pc, #12]	@ (8003aec <stdio_exit_handler+0x10>)
 8003ae0:	4803      	ldr	r0, [pc, #12]	@ (8003af0 <stdio_exit_handler+0x14>)
 8003ae2:	f000 b869 	b.w	8003bb8 <_fwalk_sglue>
 8003ae6:	bf00      	nop
 8003ae8:	2000000c 	.word	0x2000000c
 8003aec:	08005715 	.word	0x08005715
 8003af0:	2000001c 	.word	0x2000001c

08003af4 <cleanup_stdio>:
 8003af4:	6841      	ldr	r1, [r0, #4]
 8003af6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <cleanup_stdio+0x34>)
 8003af8:	4299      	cmp	r1, r3
 8003afa:	b510      	push	{r4, lr}
 8003afc:	4604      	mov	r4, r0
 8003afe:	d001      	beq.n	8003b04 <cleanup_stdio+0x10>
 8003b00:	f001 fe08 	bl	8005714 <_fflush_r>
 8003b04:	68a1      	ldr	r1, [r4, #8]
 8003b06:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <cleanup_stdio+0x38>)
 8003b08:	4299      	cmp	r1, r3
 8003b0a:	d002      	beq.n	8003b12 <cleanup_stdio+0x1e>
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	f001 fe01 	bl	8005714 <_fflush_r>
 8003b12:	68e1      	ldr	r1, [r4, #12]
 8003b14:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <cleanup_stdio+0x3c>)
 8003b16:	4299      	cmp	r1, r3
 8003b18:	d004      	beq.n	8003b24 <cleanup_stdio+0x30>
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b20:	f001 bdf8 	b.w	8005714 <_fflush_r>
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	bf00      	nop
 8003b28:	20000318 	.word	0x20000318
 8003b2c:	20000380 	.word	0x20000380
 8003b30:	200003e8 	.word	0x200003e8

08003b34 <global_stdio_init.part.0>:
 8003b34:	b510      	push	{r4, lr}
 8003b36:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <global_stdio_init.part.0+0x30>)
 8003b38:	4c0b      	ldr	r4, [pc, #44]	@ (8003b68 <global_stdio_init.part.0+0x34>)
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <global_stdio_init.part.0+0x38>)
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	4620      	mov	r0, r4
 8003b40:	2200      	movs	r2, #0
 8003b42:	2104      	movs	r1, #4
 8003b44:	f7ff ff94 	bl	8003a70 <std>
 8003b48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2109      	movs	r1, #9
 8003b50:	f7ff ff8e 	bl	8003a70 <std>
 8003b54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b58:	2202      	movs	r2, #2
 8003b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b5e:	2112      	movs	r1, #18
 8003b60:	f7ff bf86 	b.w	8003a70 <std>
 8003b64:	20000450 	.word	0x20000450
 8003b68:	20000318 	.word	0x20000318
 8003b6c:	08003add 	.word	0x08003add

08003b70 <__sfp_lock_acquire>:
 8003b70:	4801      	ldr	r0, [pc, #4]	@ (8003b78 <__sfp_lock_acquire+0x8>)
 8003b72:	f000 b920 	b.w	8003db6 <__retarget_lock_acquire_recursive>
 8003b76:	bf00      	nop
 8003b78:	20000459 	.word	0x20000459

08003b7c <__sfp_lock_release>:
 8003b7c:	4801      	ldr	r0, [pc, #4]	@ (8003b84 <__sfp_lock_release+0x8>)
 8003b7e:	f000 b91b 	b.w	8003db8 <__retarget_lock_release_recursive>
 8003b82:	bf00      	nop
 8003b84:	20000459 	.word	0x20000459

08003b88 <__sinit>:
 8003b88:	b510      	push	{r4, lr}
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	f7ff fff0 	bl	8003b70 <__sfp_lock_acquire>
 8003b90:	6a23      	ldr	r3, [r4, #32]
 8003b92:	b11b      	cbz	r3, 8003b9c <__sinit+0x14>
 8003b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b98:	f7ff bff0 	b.w	8003b7c <__sfp_lock_release>
 8003b9c:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <__sinit+0x28>)
 8003b9e:	6223      	str	r3, [r4, #32]
 8003ba0:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <__sinit+0x2c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f5      	bne.n	8003b94 <__sinit+0xc>
 8003ba8:	f7ff ffc4 	bl	8003b34 <global_stdio_init.part.0>
 8003bac:	e7f2      	b.n	8003b94 <__sinit+0xc>
 8003bae:	bf00      	nop
 8003bb0:	08003af5 	.word	0x08003af5
 8003bb4:	20000450 	.word	0x20000450

08003bb8 <_fwalk_sglue>:
 8003bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bbc:	4607      	mov	r7, r0
 8003bbe:	4688      	mov	r8, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	2600      	movs	r6, #0
 8003bc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003bc8:	f1b9 0901 	subs.w	r9, r9, #1
 8003bcc:	d505      	bpl.n	8003bda <_fwalk_sglue+0x22>
 8003bce:	6824      	ldr	r4, [r4, #0]
 8003bd0:	2c00      	cmp	r4, #0
 8003bd2:	d1f7      	bne.n	8003bc4 <_fwalk_sglue+0xc>
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bda:	89ab      	ldrh	r3, [r5, #12]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d907      	bls.n	8003bf0 <_fwalk_sglue+0x38>
 8003be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003be4:	3301      	adds	r3, #1
 8003be6:	d003      	beq.n	8003bf0 <_fwalk_sglue+0x38>
 8003be8:	4629      	mov	r1, r5
 8003bea:	4638      	mov	r0, r7
 8003bec:	47c0      	blx	r8
 8003bee:	4306      	orrs	r6, r0
 8003bf0:	3568      	adds	r5, #104	@ 0x68
 8003bf2:	e7e9      	b.n	8003bc8 <_fwalk_sglue+0x10>

08003bf4 <siprintf>:
 8003bf4:	b40e      	push	{r1, r2, r3}
 8003bf6:	b500      	push	{lr}
 8003bf8:	b09c      	sub	sp, #112	@ 0x70
 8003bfa:	ab1d      	add	r3, sp, #116	@ 0x74
 8003bfc:	9002      	str	r0, [sp, #8]
 8003bfe:	9006      	str	r0, [sp, #24]
 8003c00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c04:	4809      	ldr	r0, [pc, #36]	@ (8003c2c <siprintf+0x38>)
 8003c06:	9107      	str	r1, [sp, #28]
 8003c08:	9104      	str	r1, [sp, #16]
 8003c0a:	4909      	ldr	r1, [pc, #36]	@ (8003c30 <siprintf+0x3c>)
 8003c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c10:	9105      	str	r1, [sp, #20]
 8003c12:	6800      	ldr	r0, [r0, #0]
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	a902      	add	r1, sp, #8
 8003c18:	f001 fbfc 	bl	8005414 <_svfiprintf_r>
 8003c1c:	9b02      	ldr	r3, [sp, #8]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	b01c      	add	sp, #112	@ 0x70
 8003c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c28:	b003      	add	sp, #12
 8003c2a:	4770      	bx	lr
 8003c2c:	20000018 	.word	0x20000018
 8003c30:	ffff0208 	.word	0xffff0208

08003c34 <__sread>:
 8003c34:	b510      	push	{r4, lr}
 8003c36:	460c      	mov	r4, r1
 8003c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c3c:	f000 f86c 	bl	8003d18 <_read_r>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	bfab      	itete	ge
 8003c44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c46:	89a3      	ldrhlt	r3, [r4, #12]
 8003c48:	181b      	addge	r3, r3, r0
 8003c4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c4e:	bfac      	ite	ge
 8003c50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c52:	81a3      	strhlt	r3, [r4, #12]
 8003c54:	bd10      	pop	{r4, pc}

08003c56 <__swrite>:
 8003c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5a:	461f      	mov	r7, r3
 8003c5c:	898b      	ldrh	r3, [r1, #12]
 8003c5e:	05db      	lsls	r3, r3, #23
 8003c60:	4605      	mov	r5, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	4616      	mov	r6, r2
 8003c66:	d505      	bpl.n	8003c74 <__swrite+0x1e>
 8003c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f000 f840 	bl	8003cf4 <_lseek_r>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	4632      	mov	r2, r6
 8003c82:	463b      	mov	r3, r7
 8003c84:	4628      	mov	r0, r5
 8003c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c8a:	f000 b857 	b.w	8003d3c <_write_r>

08003c8e <__sseek>:
 8003c8e:	b510      	push	{r4, lr}
 8003c90:	460c      	mov	r4, r1
 8003c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c96:	f000 f82d 	bl	8003cf4 <_lseek_r>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	bf15      	itete	ne
 8003ca0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ca2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ca6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003caa:	81a3      	strheq	r3, [r4, #12]
 8003cac:	bf18      	it	ne
 8003cae:	81a3      	strhne	r3, [r4, #12]
 8003cb0:	bd10      	pop	{r4, pc}

08003cb2 <__sclose>:
 8003cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb6:	f000 b80d 	b.w	8003cd4 <_close_r>

08003cba <memset>:
 8003cba:	4402      	add	r2, r0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d100      	bne.n	8003cc4 <memset+0xa>
 8003cc2:	4770      	bx	lr
 8003cc4:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc8:	e7f9      	b.n	8003cbe <memset+0x4>
	...

08003ccc <_localeconv_r>:
 8003ccc:	4800      	ldr	r0, [pc, #0]	@ (8003cd0 <_localeconv_r+0x4>)
 8003cce:	4770      	bx	lr
 8003cd0:	20000158 	.word	0x20000158

08003cd4 <_close_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d06      	ldr	r5, [pc, #24]	@ (8003cf0 <_close_r+0x1c>)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4604      	mov	r4, r0
 8003cdc:	4608      	mov	r0, r1
 8003cde:	602b      	str	r3, [r5, #0]
 8003ce0:	f7ff f8bc 	bl	8002e5c <_close>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d102      	bne.n	8003cee <_close_r+0x1a>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	b103      	cbz	r3, 8003cee <_close_r+0x1a>
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	bd38      	pop	{r3, r4, r5, pc}
 8003cf0:	20000454 	.word	0x20000454

08003cf4 <_lseek_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	4d07      	ldr	r5, [pc, #28]	@ (8003d14 <_lseek_r+0x20>)
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	4608      	mov	r0, r1
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	602a      	str	r2, [r5, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f7ff f8d1 	bl	8002eaa <_lseek>
 8003d08:	1c43      	adds	r3, r0, #1
 8003d0a:	d102      	bne.n	8003d12 <_lseek_r+0x1e>
 8003d0c:	682b      	ldr	r3, [r5, #0]
 8003d0e:	b103      	cbz	r3, 8003d12 <_lseek_r+0x1e>
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	20000454 	.word	0x20000454

08003d18 <_read_r>:
 8003d18:	b538      	push	{r3, r4, r5, lr}
 8003d1a:	4d07      	ldr	r5, [pc, #28]	@ (8003d38 <_read_r+0x20>)
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	4608      	mov	r0, r1
 8003d20:	4611      	mov	r1, r2
 8003d22:	2200      	movs	r2, #0
 8003d24:	602a      	str	r2, [r5, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	f7ff f85f 	bl	8002dea <_read>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d102      	bne.n	8003d36 <_read_r+0x1e>
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	b103      	cbz	r3, 8003d36 <_read_r+0x1e>
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	bd38      	pop	{r3, r4, r5, pc}
 8003d38:	20000454 	.word	0x20000454

08003d3c <_write_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4d07      	ldr	r5, [pc, #28]	@ (8003d5c <_write_r+0x20>)
 8003d40:	4604      	mov	r4, r0
 8003d42:	4608      	mov	r0, r1
 8003d44:	4611      	mov	r1, r2
 8003d46:	2200      	movs	r2, #0
 8003d48:	602a      	str	r2, [r5, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f7ff f86a 	bl	8002e24 <_write>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d102      	bne.n	8003d5a <_write_r+0x1e>
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	b103      	cbz	r3, 8003d5a <_write_r+0x1e>
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	20000454 	.word	0x20000454

08003d60 <__errno>:
 8003d60:	4b01      	ldr	r3, [pc, #4]	@ (8003d68 <__errno+0x8>)
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000018 	.word	0x20000018

08003d6c <__libc_init_array>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	4d0d      	ldr	r5, [pc, #52]	@ (8003da4 <__libc_init_array+0x38>)
 8003d70:	4c0d      	ldr	r4, [pc, #52]	@ (8003da8 <__libc_init_array+0x3c>)
 8003d72:	1b64      	subs	r4, r4, r5
 8003d74:	10a4      	asrs	r4, r4, #2
 8003d76:	2600      	movs	r6, #0
 8003d78:	42a6      	cmp	r6, r4
 8003d7a:	d109      	bne.n	8003d90 <__libc_init_array+0x24>
 8003d7c:	4d0b      	ldr	r5, [pc, #44]	@ (8003dac <__libc_init_array+0x40>)
 8003d7e:	4c0c      	ldr	r4, [pc, #48]	@ (8003db0 <__libc_init_array+0x44>)
 8003d80:	f002 f866 	bl	8005e50 <_init>
 8003d84:	1b64      	subs	r4, r4, r5
 8003d86:	10a4      	asrs	r4, r4, #2
 8003d88:	2600      	movs	r6, #0
 8003d8a:	42a6      	cmp	r6, r4
 8003d8c:	d105      	bne.n	8003d9a <__libc_init_array+0x2e>
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}
 8003d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d94:	4798      	blx	r3
 8003d96:	3601      	adds	r6, #1
 8003d98:	e7ee      	b.n	8003d78 <__libc_init_array+0xc>
 8003d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9e:	4798      	blx	r3
 8003da0:	3601      	adds	r6, #1
 8003da2:	e7f2      	b.n	8003d8a <__libc_init_array+0x1e>
 8003da4:	08006220 	.word	0x08006220
 8003da8:	08006220 	.word	0x08006220
 8003dac:	08006220 	.word	0x08006220
 8003db0:	08006224 	.word	0x08006224

08003db4 <__retarget_lock_init_recursive>:
 8003db4:	4770      	bx	lr

08003db6 <__retarget_lock_acquire_recursive>:
 8003db6:	4770      	bx	lr

08003db8 <__retarget_lock_release_recursive>:
 8003db8:	4770      	bx	lr

08003dba <quorem>:
 8003dba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbe:	6903      	ldr	r3, [r0, #16]
 8003dc0:	690c      	ldr	r4, [r1, #16]
 8003dc2:	42a3      	cmp	r3, r4
 8003dc4:	4607      	mov	r7, r0
 8003dc6:	db7e      	blt.n	8003ec6 <quorem+0x10c>
 8003dc8:	3c01      	subs	r4, #1
 8003dca:	f101 0814 	add.w	r8, r1, #20
 8003dce:	00a3      	lsls	r3, r4, #2
 8003dd0:	f100 0514 	add.w	r5, r0, #20
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003de0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003de4:	3301      	adds	r3, #1
 8003de6:	429a      	cmp	r2, r3
 8003de8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003dec:	fbb2 f6f3 	udiv	r6, r2, r3
 8003df0:	d32e      	bcc.n	8003e50 <quorem+0x96>
 8003df2:	f04f 0a00 	mov.w	sl, #0
 8003df6:	46c4      	mov	ip, r8
 8003df8:	46ae      	mov	lr, r5
 8003dfa:	46d3      	mov	fp, sl
 8003dfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003e00:	b298      	uxth	r0, r3
 8003e02:	fb06 a000 	mla	r0, r6, r0, sl
 8003e06:	0c02      	lsrs	r2, r0, #16
 8003e08:	0c1b      	lsrs	r3, r3, #16
 8003e0a:	fb06 2303 	mla	r3, r6, r3, r2
 8003e0e:	f8de 2000 	ldr.w	r2, [lr]
 8003e12:	b280      	uxth	r0, r0
 8003e14:	b292      	uxth	r2, r2
 8003e16:	1a12      	subs	r2, r2, r0
 8003e18:	445a      	add	r2, fp
 8003e1a:	f8de 0000 	ldr.w	r0, [lr]
 8003e1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003e28:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003e32:	45e1      	cmp	r9, ip
 8003e34:	f84e 2b04 	str.w	r2, [lr], #4
 8003e38:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003e3c:	d2de      	bcs.n	8003dfc <quorem+0x42>
 8003e3e:	9b00      	ldr	r3, [sp, #0]
 8003e40:	58eb      	ldr	r3, [r5, r3]
 8003e42:	b92b      	cbnz	r3, 8003e50 <quorem+0x96>
 8003e44:	9b01      	ldr	r3, [sp, #4]
 8003e46:	3b04      	subs	r3, #4
 8003e48:	429d      	cmp	r5, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	d32f      	bcc.n	8003eae <quorem+0xf4>
 8003e4e:	613c      	str	r4, [r7, #16]
 8003e50:	4638      	mov	r0, r7
 8003e52:	f001 f97b 	bl	800514c <__mcmp>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	db25      	blt.n	8003ea6 <quorem+0xec>
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e62:	f8d1 c000 	ldr.w	ip, [r1]
 8003e66:	fa1f fe82 	uxth.w	lr, r2
 8003e6a:	fa1f f38c 	uxth.w	r3, ip
 8003e6e:	eba3 030e 	sub.w	r3, r3, lr
 8003e72:	4403      	add	r3, r0
 8003e74:	0c12      	lsrs	r2, r2, #16
 8003e76:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003e7a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e84:	45c1      	cmp	r9, r8
 8003e86:	f841 3b04 	str.w	r3, [r1], #4
 8003e8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003e8e:	d2e6      	bcs.n	8003e5e <quorem+0xa4>
 8003e90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e98:	b922      	cbnz	r2, 8003ea4 <quorem+0xea>
 8003e9a:	3b04      	subs	r3, #4
 8003e9c:	429d      	cmp	r5, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	d30b      	bcc.n	8003eba <quorem+0x100>
 8003ea2:	613c      	str	r4, [r7, #16]
 8003ea4:	3601      	adds	r6, #1
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	b003      	add	sp, #12
 8003eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	3b04      	subs	r3, #4
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	d1cb      	bne.n	8003e4e <quorem+0x94>
 8003eb6:	3c01      	subs	r4, #1
 8003eb8:	e7c6      	b.n	8003e48 <quorem+0x8e>
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	3b04      	subs	r3, #4
 8003ebe:	2a00      	cmp	r2, #0
 8003ec0:	d1ef      	bne.n	8003ea2 <quorem+0xe8>
 8003ec2:	3c01      	subs	r4, #1
 8003ec4:	e7ea      	b.n	8003e9c <quorem+0xe2>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e7ee      	b.n	8003ea8 <quorem+0xee>
 8003eca:	0000      	movs	r0, r0
 8003ecc:	0000      	movs	r0, r0
	...

08003ed0 <_dtoa_r>:
 8003ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed4:	69c7      	ldr	r7, [r0, #28]
 8003ed6:	b099      	sub	sp, #100	@ 0x64
 8003ed8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003edc:	ec55 4b10 	vmov	r4, r5, d0
 8003ee0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003ee2:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ee4:	4683      	mov	fp, r0
 8003ee6:	920e      	str	r2, [sp, #56]	@ 0x38
 8003ee8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003eea:	b97f      	cbnz	r7, 8003f0c <_dtoa_r+0x3c>
 8003eec:	2010      	movs	r0, #16
 8003eee:	f000 fdfd 	bl	8004aec <malloc>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f8cb 001c 	str.w	r0, [fp, #28]
 8003ef8:	b920      	cbnz	r0, 8003f04 <_dtoa_r+0x34>
 8003efa:	4ba7      	ldr	r3, [pc, #668]	@ (8004198 <_dtoa_r+0x2c8>)
 8003efc:	21ef      	movs	r1, #239	@ 0xef
 8003efe:	48a7      	ldr	r0, [pc, #668]	@ (800419c <_dtoa_r+0x2cc>)
 8003f00:	f001 fc68 	bl	80057d4 <__assert_func>
 8003f04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003f08:	6007      	str	r7, [r0, #0]
 8003f0a:	60c7      	str	r7, [r0, #12]
 8003f0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003f10:	6819      	ldr	r1, [r3, #0]
 8003f12:	b159      	cbz	r1, 8003f2c <_dtoa_r+0x5c>
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	604a      	str	r2, [r1, #4]
 8003f18:	2301      	movs	r3, #1
 8003f1a:	4093      	lsls	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
 8003f1e:	4658      	mov	r0, fp
 8003f20:	f000 feda 	bl	8004cd8 <_Bfree>
 8003f24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	1e2b      	subs	r3, r5, #0
 8003f2e:	bfb9      	ittee	lt
 8003f30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003f34:	9303      	strlt	r3, [sp, #12]
 8003f36:	2300      	movge	r3, #0
 8003f38:	6033      	strge	r3, [r6, #0]
 8003f3a:	9f03      	ldr	r7, [sp, #12]
 8003f3c:	4b98      	ldr	r3, [pc, #608]	@ (80041a0 <_dtoa_r+0x2d0>)
 8003f3e:	bfbc      	itt	lt
 8003f40:	2201      	movlt	r2, #1
 8003f42:	6032      	strlt	r2, [r6, #0]
 8003f44:	43bb      	bics	r3, r7
 8003f46:	d112      	bne.n	8003f6e <_dtoa_r+0x9e>
 8003f48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003f4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f54:	4323      	orrs	r3, r4
 8003f56:	f000 854d 	beq.w	80049f4 <_dtoa_r+0xb24>
 8003f5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003f5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80041b4 <_dtoa_r+0x2e4>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 854f 	beq.w	8004a04 <_dtoa_r+0xb34>
 8003f66:	f10a 0303 	add.w	r3, sl, #3
 8003f6a:	f000 bd49 	b.w	8004a00 <_dtoa_r+0xb30>
 8003f6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003f72:	2200      	movs	r2, #0
 8003f74:	ec51 0b17 	vmov	r0, r1, d7
 8003f78:	2300      	movs	r3, #0
 8003f7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003f7e:	f7fc fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f82:	4680      	mov	r8, r0
 8003f84:	b158      	cbz	r0, 8003f9e <_dtoa_r+0xce>
 8003f86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003f88:	2301      	movs	r3, #1
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003f8e:	b113      	cbz	r3, 8003f96 <_dtoa_r+0xc6>
 8003f90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003f92:	4b84      	ldr	r3, [pc, #528]	@ (80041a4 <_dtoa_r+0x2d4>)
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80041b8 <_dtoa_r+0x2e8>
 8003f9a:	f000 bd33 	b.w	8004a04 <_dtoa_r+0xb34>
 8003f9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003fa2:	aa16      	add	r2, sp, #88	@ 0x58
 8003fa4:	a917      	add	r1, sp, #92	@ 0x5c
 8003fa6:	4658      	mov	r0, fp
 8003fa8:	f001 f980 	bl	80052ac <__d2b>
 8003fac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003fb0:	4681      	mov	r9, r0
 8003fb2:	2e00      	cmp	r6, #0
 8003fb4:	d077      	beq.n	80040a6 <_dtoa_r+0x1d6>
 8003fb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003fc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003fc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003fcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	4b74      	ldr	r3, [pc, #464]	@ (80041a8 <_dtoa_r+0x2d8>)
 8003fd6:	f7fc f957 	bl	8000288 <__aeabi_dsub>
 8003fda:	a369      	add	r3, pc, #420	@ (adr r3, 8004180 <_dtoa_r+0x2b0>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fc fb0a 	bl	80005f8 <__aeabi_dmul>
 8003fe4:	a368      	add	r3, pc, #416	@ (adr r3, 8004188 <_dtoa_r+0x2b8>)
 8003fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fea:	f7fc f94f 	bl	800028c <__adddf3>
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4630      	mov	r0, r6
 8003ff2:	460d      	mov	r5, r1
 8003ff4:	f7fc fa96 	bl	8000524 <__aeabi_i2d>
 8003ff8:	a365      	add	r3, pc, #404	@ (adr r3, 8004190 <_dtoa_r+0x2c0>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc fafb 	bl	80005f8 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f7fc f93f 	bl	800028c <__adddf3>
 800400e:	4604      	mov	r4, r0
 8004010:	460d      	mov	r5, r1
 8004012:	f7fc fda1 	bl	8000b58 <__aeabi_d2iz>
 8004016:	2200      	movs	r2, #0
 8004018:	4607      	mov	r7, r0
 800401a:	2300      	movs	r3, #0
 800401c:	4620      	mov	r0, r4
 800401e:	4629      	mov	r1, r5
 8004020:	f7fc fd5c 	bl	8000adc <__aeabi_dcmplt>
 8004024:	b140      	cbz	r0, 8004038 <_dtoa_r+0x168>
 8004026:	4638      	mov	r0, r7
 8004028:	f7fc fa7c 	bl	8000524 <__aeabi_i2d>
 800402c:	4622      	mov	r2, r4
 800402e:	462b      	mov	r3, r5
 8004030:	f7fc fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004034:	b900      	cbnz	r0, 8004038 <_dtoa_r+0x168>
 8004036:	3f01      	subs	r7, #1
 8004038:	2f16      	cmp	r7, #22
 800403a:	d851      	bhi.n	80040e0 <_dtoa_r+0x210>
 800403c:	4b5b      	ldr	r3, [pc, #364]	@ (80041ac <_dtoa_r+0x2dc>)
 800403e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800404a:	f7fc fd47 	bl	8000adc <__aeabi_dcmplt>
 800404e:	2800      	cmp	r0, #0
 8004050:	d048      	beq.n	80040e4 <_dtoa_r+0x214>
 8004052:	3f01      	subs	r7, #1
 8004054:	2300      	movs	r3, #0
 8004056:	9312      	str	r3, [sp, #72]	@ 0x48
 8004058:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800405a:	1b9b      	subs	r3, r3, r6
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	bf44      	itt	mi
 8004060:	f1c3 0801 	rsbmi	r8, r3, #1
 8004064:	2300      	movmi	r3, #0
 8004066:	9208      	str	r2, [sp, #32]
 8004068:	bf54      	ite	pl
 800406a:	f04f 0800 	movpl.w	r8, #0
 800406e:	9308      	strmi	r3, [sp, #32]
 8004070:	2f00      	cmp	r7, #0
 8004072:	db39      	blt.n	80040e8 <_dtoa_r+0x218>
 8004074:	9b08      	ldr	r3, [sp, #32]
 8004076:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004078:	443b      	add	r3, r7
 800407a:	9308      	str	r3, [sp, #32]
 800407c:	2300      	movs	r3, #0
 800407e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004082:	2b09      	cmp	r3, #9
 8004084:	d864      	bhi.n	8004150 <_dtoa_r+0x280>
 8004086:	2b05      	cmp	r3, #5
 8004088:	bfc4      	itt	gt
 800408a:	3b04      	subgt	r3, #4
 800408c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800408e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004090:	f1a3 0302 	sub.w	r3, r3, #2
 8004094:	bfcc      	ite	gt
 8004096:	2400      	movgt	r4, #0
 8004098:	2401      	movle	r4, #1
 800409a:	2b03      	cmp	r3, #3
 800409c:	d863      	bhi.n	8004166 <_dtoa_r+0x296>
 800409e:	e8df f003 	tbb	[pc, r3]
 80040a2:	372a      	.short	0x372a
 80040a4:	5535      	.short	0x5535
 80040a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80040aa:	441e      	add	r6, r3
 80040ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	bfc1      	itttt	gt
 80040b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80040b8:	409f      	lslgt	r7, r3
 80040ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80040be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80040c2:	bfd6      	itet	le
 80040c4:	f1c3 0320 	rsble	r3, r3, #32
 80040c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80040cc:	fa04 f003 	lslle.w	r0, r4, r3
 80040d0:	f7fc fa18 	bl	8000504 <__aeabi_ui2d>
 80040d4:	2201      	movs	r2, #1
 80040d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80040da:	3e01      	subs	r6, #1
 80040dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80040de:	e777      	b.n	8003fd0 <_dtoa_r+0x100>
 80040e0:	2301      	movs	r3, #1
 80040e2:	e7b8      	b.n	8004056 <_dtoa_r+0x186>
 80040e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80040e6:	e7b7      	b.n	8004058 <_dtoa_r+0x188>
 80040e8:	427b      	negs	r3, r7
 80040ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80040ec:	2300      	movs	r3, #0
 80040ee:	eba8 0807 	sub.w	r8, r8, r7
 80040f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80040f4:	e7c4      	b.n	8004080 <_dtoa_r+0x1b0>
 80040f6:	2300      	movs	r3, #0
 80040f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80040fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	dc35      	bgt.n	800416c <_dtoa_r+0x29c>
 8004100:	2301      	movs	r3, #1
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	9307      	str	r3, [sp, #28]
 8004106:	461a      	mov	r2, r3
 8004108:	920e      	str	r2, [sp, #56]	@ 0x38
 800410a:	e00b      	b.n	8004124 <_dtoa_r+0x254>
 800410c:	2301      	movs	r3, #1
 800410e:	e7f3      	b.n	80040f8 <_dtoa_r+0x228>
 8004110:	2300      	movs	r3, #0
 8004112:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	3301      	adds	r3, #1
 800411c:	2b01      	cmp	r3, #1
 800411e:	9307      	str	r3, [sp, #28]
 8004120:	bfb8      	it	lt
 8004122:	2301      	movlt	r3, #1
 8004124:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004128:	2100      	movs	r1, #0
 800412a:	2204      	movs	r2, #4
 800412c:	f102 0514 	add.w	r5, r2, #20
 8004130:	429d      	cmp	r5, r3
 8004132:	d91f      	bls.n	8004174 <_dtoa_r+0x2a4>
 8004134:	6041      	str	r1, [r0, #4]
 8004136:	4658      	mov	r0, fp
 8004138:	f000 fd8e 	bl	8004c58 <_Balloc>
 800413c:	4682      	mov	sl, r0
 800413e:	2800      	cmp	r0, #0
 8004140:	d13c      	bne.n	80041bc <_dtoa_r+0x2ec>
 8004142:	4b1b      	ldr	r3, [pc, #108]	@ (80041b0 <_dtoa_r+0x2e0>)
 8004144:	4602      	mov	r2, r0
 8004146:	f240 11af 	movw	r1, #431	@ 0x1af
 800414a:	e6d8      	b.n	8003efe <_dtoa_r+0x2e>
 800414c:	2301      	movs	r3, #1
 800414e:	e7e0      	b.n	8004112 <_dtoa_r+0x242>
 8004150:	2401      	movs	r4, #1
 8004152:	2300      	movs	r3, #0
 8004154:	9309      	str	r3, [sp, #36]	@ 0x24
 8004156:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004158:	f04f 33ff 	mov.w	r3, #4294967295
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	9307      	str	r3, [sp, #28]
 8004160:	2200      	movs	r2, #0
 8004162:	2312      	movs	r3, #18
 8004164:	e7d0      	b.n	8004108 <_dtoa_r+0x238>
 8004166:	2301      	movs	r3, #1
 8004168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800416a:	e7f5      	b.n	8004158 <_dtoa_r+0x288>
 800416c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	9307      	str	r3, [sp, #28]
 8004172:	e7d7      	b.n	8004124 <_dtoa_r+0x254>
 8004174:	3101      	adds	r1, #1
 8004176:	0052      	lsls	r2, r2, #1
 8004178:	e7d8      	b.n	800412c <_dtoa_r+0x25c>
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w
 8004180:	636f4361 	.word	0x636f4361
 8004184:	3fd287a7 	.word	0x3fd287a7
 8004188:	8b60c8b3 	.word	0x8b60c8b3
 800418c:	3fc68a28 	.word	0x3fc68a28
 8004190:	509f79fb 	.word	0x509f79fb
 8004194:	3fd34413 	.word	0x3fd34413
 8004198:	08005ee9 	.word	0x08005ee9
 800419c:	08005f00 	.word	0x08005f00
 80041a0:	7ff00000 	.word	0x7ff00000
 80041a4:	08005eb9 	.word	0x08005eb9
 80041a8:	3ff80000 	.word	0x3ff80000
 80041ac:	08005ff8 	.word	0x08005ff8
 80041b0:	08005f58 	.word	0x08005f58
 80041b4:	08005ee5 	.word	0x08005ee5
 80041b8:	08005eb8 	.word	0x08005eb8
 80041bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80041c0:	6018      	str	r0, [r3, #0]
 80041c2:	9b07      	ldr	r3, [sp, #28]
 80041c4:	2b0e      	cmp	r3, #14
 80041c6:	f200 80a4 	bhi.w	8004312 <_dtoa_r+0x442>
 80041ca:	2c00      	cmp	r4, #0
 80041cc:	f000 80a1 	beq.w	8004312 <_dtoa_r+0x442>
 80041d0:	2f00      	cmp	r7, #0
 80041d2:	dd33      	ble.n	800423c <_dtoa_r+0x36c>
 80041d4:	4bad      	ldr	r3, [pc, #692]	@ (800448c <_dtoa_r+0x5bc>)
 80041d6:	f007 020f 	and.w	r2, r7, #15
 80041da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041de:	ed93 7b00 	vldr	d7, [r3]
 80041e2:	05f8      	lsls	r0, r7, #23
 80041e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80041e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80041ec:	d516      	bpl.n	800421c <_dtoa_r+0x34c>
 80041ee:	4ba8      	ldr	r3, [pc, #672]	@ (8004490 <_dtoa_r+0x5c0>)
 80041f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80041f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041f8:	f7fc fb28 	bl	800084c <__aeabi_ddiv>
 80041fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004200:	f004 040f 	and.w	r4, r4, #15
 8004204:	2603      	movs	r6, #3
 8004206:	4da2      	ldr	r5, [pc, #648]	@ (8004490 <_dtoa_r+0x5c0>)
 8004208:	b954      	cbnz	r4, 8004220 <_dtoa_r+0x350>
 800420a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800420e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004212:	f7fc fb1b 	bl	800084c <__aeabi_ddiv>
 8004216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800421a:	e028      	b.n	800426e <_dtoa_r+0x39e>
 800421c:	2602      	movs	r6, #2
 800421e:	e7f2      	b.n	8004206 <_dtoa_r+0x336>
 8004220:	07e1      	lsls	r1, r4, #31
 8004222:	d508      	bpl.n	8004236 <_dtoa_r+0x366>
 8004224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800422c:	f7fc f9e4 	bl	80005f8 <__aeabi_dmul>
 8004230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004234:	3601      	adds	r6, #1
 8004236:	1064      	asrs	r4, r4, #1
 8004238:	3508      	adds	r5, #8
 800423a:	e7e5      	b.n	8004208 <_dtoa_r+0x338>
 800423c:	f000 80d2 	beq.w	80043e4 <_dtoa_r+0x514>
 8004240:	427c      	negs	r4, r7
 8004242:	4b92      	ldr	r3, [pc, #584]	@ (800448c <_dtoa_r+0x5bc>)
 8004244:	4d92      	ldr	r5, [pc, #584]	@ (8004490 <_dtoa_r+0x5c0>)
 8004246:	f004 020f 	and.w	r2, r4, #15
 800424a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004256:	f7fc f9cf 	bl	80005f8 <__aeabi_dmul>
 800425a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800425e:	1124      	asrs	r4, r4, #4
 8004260:	2300      	movs	r3, #0
 8004262:	2602      	movs	r6, #2
 8004264:	2c00      	cmp	r4, #0
 8004266:	f040 80b2 	bne.w	80043ce <_dtoa_r+0x4fe>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1d3      	bne.n	8004216 <_dtoa_r+0x346>
 800426e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004270:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80b7 	beq.w	80043e8 <_dtoa_r+0x518>
 800427a:	4b86      	ldr	r3, [pc, #536]	@ (8004494 <_dtoa_r+0x5c4>)
 800427c:	2200      	movs	r2, #0
 800427e:	4620      	mov	r0, r4
 8004280:	4629      	mov	r1, r5
 8004282:	f7fc fc2b 	bl	8000adc <__aeabi_dcmplt>
 8004286:	2800      	cmp	r0, #0
 8004288:	f000 80ae 	beq.w	80043e8 <_dtoa_r+0x518>
 800428c:	9b07      	ldr	r3, [sp, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80aa 	beq.w	80043e8 <_dtoa_r+0x518>
 8004294:	9b00      	ldr	r3, [sp, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	dd37      	ble.n	800430a <_dtoa_r+0x43a>
 800429a:	1e7b      	subs	r3, r7, #1
 800429c:	9304      	str	r3, [sp, #16]
 800429e:	4620      	mov	r0, r4
 80042a0:	4b7d      	ldr	r3, [pc, #500]	@ (8004498 <_dtoa_r+0x5c8>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	4629      	mov	r1, r5
 80042a6:	f7fc f9a7 	bl	80005f8 <__aeabi_dmul>
 80042aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042ae:	9c00      	ldr	r4, [sp, #0]
 80042b0:	3601      	adds	r6, #1
 80042b2:	4630      	mov	r0, r6
 80042b4:	f7fc f936 	bl	8000524 <__aeabi_i2d>
 80042b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042bc:	f7fc f99c 	bl	80005f8 <__aeabi_dmul>
 80042c0:	4b76      	ldr	r3, [pc, #472]	@ (800449c <_dtoa_r+0x5cc>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	f7fb ffe2 	bl	800028c <__adddf3>
 80042c8:	4605      	mov	r5, r0
 80042ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80042ce:	2c00      	cmp	r4, #0
 80042d0:	f040 808d 	bne.w	80043ee <_dtoa_r+0x51e>
 80042d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042d8:	4b71      	ldr	r3, [pc, #452]	@ (80044a0 <_dtoa_r+0x5d0>)
 80042da:	2200      	movs	r2, #0
 80042dc:	f7fb ffd4 	bl	8000288 <__aeabi_dsub>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80042e8:	462a      	mov	r2, r5
 80042ea:	4633      	mov	r3, r6
 80042ec:	f7fc fc14 	bl	8000b18 <__aeabi_dcmpgt>
 80042f0:	2800      	cmp	r0, #0
 80042f2:	f040 828b 	bne.w	800480c <_dtoa_r+0x93c>
 80042f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042fa:	462a      	mov	r2, r5
 80042fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004300:	f7fc fbec 	bl	8000adc <__aeabi_dcmplt>
 8004304:	2800      	cmp	r0, #0
 8004306:	f040 8128 	bne.w	800455a <_dtoa_r+0x68a>
 800430a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800430e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004314:	2b00      	cmp	r3, #0
 8004316:	f2c0 815a 	blt.w	80045ce <_dtoa_r+0x6fe>
 800431a:	2f0e      	cmp	r7, #14
 800431c:	f300 8157 	bgt.w	80045ce <_dtoa_r+0x6fe>
 8004320:	4b5a      	ldr	r3, [pc, #360]	@ (800448c <_dtoa_r+0x5bc>)
 8004322:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004326:	ed93 7b00 	vldr	d7, [r3]
 800432a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800432c:	2b00      	cmp	r3, #0
 800432e:	ed8d 7b00 	vstr	d7, [sp]
 8004332:	da03      	bge.n	800433c <_dtoa_r+0x46c>
 8004334:	9b07      	ldr	r3, [sp, #28]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f340 8101 	ble.w	800453e <_dtoa_r+0x66e>
 800433c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004340:	4656      	mov	r6, sl
 8004342:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004346:	4620      	mov	r0, r4
 8004348:	4629      	mov	r1, r5
 800434a:	f7fc fa7f 	bl	800084c <__aeabi_ddiv>
 800434e:	f7fc fc03 	bl	8000b58 <__aeabi_d2iz>
 8004352:	4680      	mov	r8, r0
 8004354:	f7fc f8e6 	bl	8000524 <__aeabi_i2d>
 8004358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800435c:	f7fc f94c 	bl	80005f8 <__aeabi_dmul>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4620      	mov	r0, r4
 8004366:	4629      	mov	r1, r5
 8004368:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800436c:	f7fb ff8c 	bl	8000288 <__aeabi_dsub>
 8004370:	f806 4b01 	strb.w	r4, [r6], #1
 8004374:	9d07      	ldr	r5, [sp, #28]
 8004376:	eba6 040a 	sub.w	r4, r6, sl
 800437a:	42a5      	cmp	r5, r4
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	f040 8117 	bne.w	80045b2 <_dtoa_r+0x6e2>
 8004384:	f7fb ff82 	bl	800028c <__adddf3>
 8004388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800438c:	4604      	mov	r4, r0
 800438e:	460d      	mov	r5, r1
 8004390:	f7fc fbc2 	bl	8000b18 <__aeabi_dcmpgt>
 8004394:	2800      	cmp	r0, #0
 8004396:	f040 80f9 	bne.w	800458c <_dtoa_r+0x6bc>
 800439a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800439e:	4620      	mov	r0, r4
 80043a0:	4629      	mov	r1, r5
 80043a2:	f7fc fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 80043a6:	b118      	cbz	r0, 80043b0 <_dtoa_r+0x4e0>
 80043a8:	f018 0f01 	tst.w	r8, #1
 80043ac:	f040 80ee 	bne.w	800458c <_dtoa_r+0x6bc>
 80043b0:	4649      	mov	r1, r9
 80043b2:	4658      	mov	r0, fp
 80043b4:	f000 fc90 	bl	8004cd8 <_Bfree>
 80043b8:	2300      	movs	r3, #0
 80043ba:	7033      	strb	r3, [r6, #0]
 80043bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80043be:	3701      	adds	r7, #1
 80043c0:	601f      	str	r7, [r3, #0]
 80043c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 831d 	beq.w	8004a04 <_dtoa_r+0xb34>
 80043ca:	601e      	str	r6, [r3, #0]
 80043cc:	e31a      	b.n	8004a04 <_dtoa_r+0xb34>
 80043ce:	07e2      	lsls	r2, r4, #31
 80043d0:	d505      	bpl.n	80043de <_dtoa_r+0x50e>
 80043d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043d6:	f7fc f90f 	bl	80005f8 <__aeabi_dmul>
 80043da:	3601      	adds	r6, #1
 80043dc:	2301      	movs	r3, #1
 80043de:	1064      	asrs	r4, r4, #1
 80043e0:	3508      	adds	r5, #8
 80043e2:	e73f      	b.n	8004264 <_dtoa_r+0x394>
 80043e4:	2602      	movs	r6, #2
 80043e6:	e742      	b.n	800426e <_dtoa_r+0x39e>
 80043e8:	9c07      	ldr	r4, [sp, #28]
 80043ea:	9704      	str	r7, [sp, #16]
 80043ec:	e761      	b.n	80042b2 <_dtoa_r+0x3e2>
 80043ee:	4b27      	ldr	r3, [pc, #156]	@ (800448c <_dtoa_r+0x5bc>)
 80043f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80043f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80043fa:	4454      	add	r4, sl
 80043fc:	2900      	cmp	r1, #0
 80043fe:	d053      	beq.n	80044a8 <_dtoa_r+0x5d8>
 8004400:	4928      	ldr	r1, [pc, #160]	@ (80044a4 <_dtoa_r+0x5d4>)
 8004402:	2000      	movs	r0, #0
 8004404:	f7fc fa22 	bl	800084c <__aeabi_ddiv>
 8004408:	4633      	mov	r3, r6
 800440a:	462a      	mov	r2, r5
 800440c:	f7fb ff3c 	bl	8000288 <__aeabi_dsub>
 8004410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004414:	4656      	mov	r6, sl
 8004416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800441a:	f7fc fb9d 	bl	8000b58 <__aeabi_d2iz>
 800441e:	4605      	mov	r5, r0
 8004420:	f7fc f880 	bl	8000524 <__aeabi_i2d>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800442c:	f7fb ff2c 	bl	8000288 <__aeabi_dsub>
 8004430:	3530      	adds	r5, #48	@ 0x30
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800443a:	f806 5b01 	strb.w	r5, [r6], #1
 800443e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004442:	f7fc fb4b 	bl	8000adc <__aeabi_dcmplt>
 8004446:	2800      	cmp	r0, #0
 8004448:	d171      	bne.n	800452e <_dtoa_r+0x65e>
 800444a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800444e:	4911      	ldr	r1, [pc, #68]	@ (8004494 <_dtoa_r+0x5c4>)
 8004450:	2000      	movs	r0, #0
 8004452:	f7fb ff19 	bl	8000288 <__aeabi_dsub>
 8004456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800445a:	f7fc fb3f 	bl	8000adc <__aeabi_dcmplt>
 800445e:	2800      	cmp	r0, #0
 8004460:	f040 8095 	bne.w	800458e <_dtoa_r+0x6be>
 8004464:	42a6      	cmp	r6, r4
 8004466:	f43f af50 	beq.w	800430a <_dtoa_r+0x43a>
 800446a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800446e:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <_dtoa_r+0x5c8>)
 8004470:	2200      	movs	r2, #0
 8004472:	f7fc f8c1 	bl	80005f8 <__aeabi_dmul>
 8004476:	4b08      	ldr	r3, [pc, #32]	@ (8004498 <_dtoa_r+0x5c8>)
 8004478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800447c:	2200      	movs	r2, #0
 800447e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004482:	f7fc f8b9 	bl	80005f8 <__aeabi_dmul>
 8004486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800448a:	e7c4      	b.n	8004416 <_dtoa_r+0x546>
 800448c:	08005ff8 	.word	0x08005ff8
 8004490:	08005fd0 	.word	0x08005fd0
 8004494:	3ff00000 	.word	0x3ff00000
 8004498:	40240000 	.word	0x40240000
 800449c:	401c0000 	.word	0x401c0000
 80044a0:	40140000 	.word	0x40140000
 80044a4:	3fe00000 	.word	0x3fe00000
 80044a8:	4631      	mov	r1, r6
 80044aa:	4628      	mov	r0, r5
 80044ac:	f7fc f8a4 	bl	80005f8 <__aeabi_dmul>
 80044b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80044b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80044b6:	4656      	mov	r6, sl
 80044b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044bc:	f7fc fb4c 	bl	8000b58 <__aeabi_d2iz>
 80044c0:	4605      	mov	r5, r0
 80044c2:	f7fc f82f 	bl	8000524 <__aeabi_i2d>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ce:	f7fb fedb 	bl	8000288 <__aeabi_dsub>
 80044d2:	3530      	adds	r5, #48	@ 0x30
 80044d4:	f806 5b01 	strb.w	r5, [r6], #1
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	42a6      	cmp	r6, r4
 80044de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	d124      	bne.n	8004532 <_dtoa_r+0x662>
 80044e8:	4bac      	ldr	r3, [pc, #688]	@ (800479c <_dtoa_r+0x8cc>)
 80044ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80044ee:	f7fb fecd 	bl	800028c <__adddf3>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044fa:	f7fc fb0d 	bl	8000b18 <__aeabi_dcmpgt>
 80044fe:	2800      	cmp	r0, #0
 8004500:	d145      	bne.n	800458e <_dtoa_r+0x6be>
 8004502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004506:	49a5      	ldr	r1, [pc, #660]	@ (800479c <_dtoa_r+0x8cc>)
 8004508:	2000      	movs	r0, #0
 800450a:	f7fb febd 	bl	8000288 <__aeabi_dsub>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004516:	f7fc fae1 	bl	8000adc <__aeabi_dcmplt>
 800451a:	2800      	cmp	r0, #0
 800451c:	f43f aef5 	beq.w	800430a <_dtoa_r+0x43a>
 8004520:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004522:	1e73      	subs	r3, r6, #1
 8004524:	9315      	str	r3, [sp, #84]	@ 0x54
 8004526:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800452a:	2b30      	cmp	r3, #48	@ 0x30
 800452c:	d0f8      	beq.n	8004520 <_dtoa_r+0x650>
 800452e:	9f04      	ldr	r7, [sp, #16]
 8004530:	e73e      	b.n	80043b0 <_dtoa_r+0x4e0>
 8004532:	4b9b      	ldr	r3, [pc, #620]	@ (80047a0 <_dtoa_r+0x8d0>)
 8004534:	f7fc f860 	bl	80005f8 <__aeabi_dmul>
 8004538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800453c:	e7bc      	b.n	80044b8 <_dtoa_r+0x5e8>
 800453e:	d10c      	bne.n	800455a <_dtoa_r+0x68a>
 8004540:	4b98      	ldr	r3, [pc, #608]	@ (80047a4 <_dtoa_r+0x8d4>)
 8004542:	2200      	movs	r2, #0
 8004544:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004548:	f7fc f856 	bl	80005f8 <__aeabi_dmul>
 800454c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004550:	f7fc fad8 	bl	8000b04 <__aeabi_dcmpge>
 8004554:	2800      	cmp	r0, #0
 8004556:	f000 8157 	beq.w	8004808 <_dtoa_r+0x938>
 800455a:	2400      	movs	r4, #0
 800455c:	4625      	mov	r5, r4
 800455e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004560:	43db      	mvns	r3, r3
 8004562:	9304      	str	r3, [sp, #16]
 8004564:	4656      	mov	r6, sl
 8004566:	2700      	movs	r7, #0
 8004568:	4621      	mov	r1, r4
 800456a:	4658      	mov	r0, fp
 800456c:	f000 fbb4 	bl	8004cd8 <_Bfree>
 8004570:	2d00      	cmp	r5, #0
 8004572:	d0dc      	beq.n	800452e <_dtoa_r+0x65e>
 8004574:	b12f      	cbz	r7, 8004582 <_dtoa_r+0x6b2>
 8004576:	42af      	cmp	r7, r5
 8004578:	d003      	beq.n	8004582 <_dtoa_r+0x6b2>
 800457a:	4639      	mov	r1, r7
 800457c:	4658      	mov	r0, fp
 800457e:	f000 fbab 	bl	8004cd8 <_Bfree>
 8004582:	4629      	mov	r1, r5
 8004584:	4658      	mov	r0, fp
 8004586:	f000 fba7 	bl	8004cd8 <_Bfree>
 800458a:	e7d0      	b.n	800452e <_dtoa_r+0x65e>
 800458c:	9704      	str	r7, [sp, #16]
 800458e:	4633      	mov	r3, r6
 8004590:	461e      	mov	r6, r3
 8004592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004596:	2a39      	cmp	r2, #57	@ 0x39
 8004598:	d107      	bne.n	80045aa <_dtoa_r+0x6da>
 800459a:	459a      	cmp	sl, r3
 800459c:	d1f8      	bne.n	8004590 <_dtoa_r+0x6c0>
 800459e:	9a04      	ldr	r2, [sp, #16]
 80045a0:	3201      	adds	r2, #1
 80045a2:	9204      	str	r2, [sp, #16]
 80045a4:	2230      	movs	r2, #48	@ 0x30
 80045a6:	f88a 2000 	strb.w	r2, [sl]
 80045aa:	781a      	ldrb	r2, [r3, #0]
 80045ac:	3201      	adds	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e7bd      	b.n	800452e <_dtoa_r+0x65e>
 80045b2:	4b7b      	ldr	r3, [pc, #492]	@ (80047a0 <_dtoa_r+0x8d0>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	f7fc f81f 	bl	80005f8 <__aeabi_dmul>
 80045ba:	2200      	movs	r2, #0
 80045bc:	2300      	movs	r3, #0
 80045be:	4604      	mov	r4, r0
 80045c0:	460d      	mov	r5, r1
 80045c2:	f7fc fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	f43f aebb 	beq.w	8004342 <_dtoa_r+0x472>
 80045cc:	e6f0      	b.n	80043b0 <_dtoa_r+0x4e0>
 80045ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80045d0:	2a00      	cmp	r2, #0
 80045d2:	f000 80db 	beq.w	800478c <_dtoa_r+0x8bc>
 80045d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045d8:	2a01      	cmp	r2, #1
 80045da:	f300 80bf 	bgt.w	800475c <_dtoa_r+0x88c>
 80045de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80045e0:	2a00      	cmp	r2, #0
 80045e2:	f000 80b7 	beq.w	8004754 <_dtoa_r+0x884>
 80045e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80045ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80045ec:	4646      	mov	r6, r8
 80045ee:	9a08      	ldr	r2, [sp, #32]
 80045f0:	2101      	movs	r1, #1
 80045f2:	441a      	add	r2, r3
 80045f4:	4658      	mov	r0, fp
 80045f6:	4498      	add	r8, r3
 80045f8:	9208      	str	r2, [sp, #32]
 80045fa:	f000 fc21 	bl	8004e40 <__i2b>
 80045fe:	4605      	mov	r5, r0
 8004600:	b15e      	cbz	r6, 800461a <_dtoa_r+0x74a>
 8004602:	9b08      	ldr	r3, [sp, #32]
 8004604:	2b00      	cmp	r3, #0
 8004606:	dd08      	ble.n	800461a <_dtoa_r+0x74a>
 8004608:	42b3      	cmp	r3, r6
 800460a:	9a08      	ldr	r2, [sp, #32]
 800460c:	bfa8      	it	ge
 800460e:	4633      	movge	r3, r6
 8004610:	eba8 0803 	sub.w	r8, r8, r3
 8004614:	1af6      	subs	r6, r6, r3
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	9308      	str	r3, [sp, #32]
 800461a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800461c:	b1f3      	cbz	r3, 800465c <_dtoa_r+0x78c>
 800461e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80b7 	beq.w	8004794 <_dtoa_r+0x8c4>
 8004626:	b18c      	cbz	r4, 800464c <_dtoa_r+0x77c>
 8004628:	4629      	mov	r1, r5
 800462a:	4622      	mov	r2, r4
 800462c:	4658      	mov	r0, fp
 800462e:	f000 fcc7 	bl	8004fc0 <__pow5mult>
 8004632:	464a      	mov	r2, r9
 8004634:	4601      	mov	r1, r0
 8004636:	4605      	mov	r5, r0
 8004638:	4658      	mov	r0, fp
 800463a:	f000 fc17 	bl	8004e6c <__multiply>
 800463e:	4649      	mov	r1, r9
 8004640:	9004      	str	r0, [sp, #16]
 8004642:	4658      	mov	r0, fp
 8004644:	f000 fb48 	bl	8004cd8 <_Bfree>
 8004648:	9b04      	ldr	r3, [sp, #16]
 800464a:	4699      	mov	r9, r3
 800464c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800464e:	1b1a      	subs	r2, r3, r4
 8004650:	d004      	beq.n	800465c <_dtoa_r+0x78c>
 8004652:	4649      	mov	r1, r9
 8004654:	4658      	mov	r0, fp
 8004656:	f000 fcb3 	bl	8004fc0 <__pow5mult>
 800465a:	4681      	mov	r9, r0
 800465c:	2101      	movs	r1, #1
 800465e:	4658      	mov	r0, fp
 8004660:	f000 fbee 	bl	8004e40 <__i2b>
 8004664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004666:	4604      	mov	r4, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 81cf 	beq.w	8004a0c <_dtoa_r+0xb3c>
 800466e:	461a      	mov	r2, r3
 8004670:	4601      	mov	r1, r0
 8004672:	4658      	mov	r0, fp
 8004674:	f000 fca4 	bl	8004fc0 <__pow5mult>
 8004678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800467a:	2b01      	cmp	r3, #1
 800467c:	4604      	mov	r4, r0
 800467e:	f300 8095 	bgt.w	80047ac <_dtoa_r+0x8dc>
 8004682:	9b02      	ldr	r3, [sp, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f040 8087 	bne.w	8004798 <_dtoa_r+0x8c8>
 800468a:	9b03      	ldr	r3, [sp, #12]
 800468c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 8089 	bne.w	80047a8 <_dtoa_r+0x8d8>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800469c:	0d1b      	lsrs	r3, r3, #20
 800469e:	051b      	lsls	r3, r3, #20
 80046a0:	b12b      	cbz	r3, 80046ae <_dtoa_r+0x7de>
 80046a2:	9b08      	ldr	r3, [sp, #32]
 80046a4:	3301      	adds	r3, #1
 80046a6:	9308      	str	r3, [sp, #32]
 80046a8:	f108 0801 	add.w	r8, r8, #1
 80046ac:	2301      	movs	r3, #1
 80046ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80046b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 81b0 	beq.w	8004a18 <_dtoa_r+0xb48>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80046be:	6918      	ldr	r0, [r3, #16]
 80046c0:	f000 fb72 	bl	8004da8 <__hi0bits>
 80046c4:	f1c0 0020 	rsb	r0, r0, #32
 80046c8:	9b08      	ldr	r3, [sp, #32]
 80046ca:	4418      	add	r0, r3
 80046cc:	f010 001f 	ands.w	r0, r0, #31
 80046d0:	d077      	beq.n	80047c2 <_dtoa_r+0x8f2>
 80046d2:	f1c0 0320 	rsb	r3, r0, #32
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	dd6b      	ble.n	80047b2 <_dtoa_r+0x8e2>
 80046da:	9b08      	ldr	r3, [sp, #32]
 80046dc:	f1c0 001c 	rsb	r0, r0, #28
 80046e0:	4403      	add	r3, r0
 80046e2:	4480      	add	r8, r0
 80046e4:	4406      	add	r6, r0
 80046e6:	9308      	str	r3, [sp, #32]
 80046e8:	f1b8 0f00 	cmp.w	r8, #0
 80046ec:	dd05      	ble.n	80046fa <_dtoa_r+0x82a>
 80046ee:	4649      	mov	r1, r9
 80046f0:	4642      	mov	r2, r8
 80046f2:	4658      	mov	r0, fp
 80046f4:	f000 fcbe 	bl	8005074 <__lshift>
 80046f8:	4681      	mov	r9, r0
 80046fa:	9b08      	ldr	r3, [sp, #32]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	dd05      	ble.n	800470c <_dtoa_r+0x83c>
 8004700:	4621      	mov	r1, r4
 8004702:	461a      	mov	r2, r3
 8004704:	4658      	mov	r0, fp
 8004706:	f000 fcb5 	bl	8005074 <__lshift>
 800470a:	4604      	mov	r4, r0
 800470c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800470e:	2b00      	cmp	r3, #0
 8004710:	d059      	beq.n	80047c6 <_dtoa_r+0x8f6>
 8004712:	4621      	mov	r1, r4
 8004714:	4648      	mov	r0, r9
 8004716:	f000 fd19 	bl	800514c <__mcmp>
 800471a:	2800      	cmp	r0, #0
 800471c:	da53      	bge.n	80047c6 <_dtoa_r+0x8f6>
 800471e:	1e7b      	subs	r3, r7, #1
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	4649      	mov	r1, r9
 8004724:	2300      	movs	r3, #0
 8004726:	220a      	movs	r2, #10
 8004728:	4658      	mov	r0, fp
 800472a:	f000 faf7 	bl	8004d1c <__multadd>
 800472e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004730:	4681      	mov	r9, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8172 	beq.w	8004a1c <_dtoa_r+0xb4c>
 8004738:	2300      	movs	r3, #0
 800473a:	4629      	mov	r1, r5
 800473c:	220a      	movs	r2, #10
 800473e:	4658      	mov	r0, fp
 8004740:	f000 faec 	bl	8004d1c <__multadd>
 8004744:	9b00      	ldr	r3, [sp, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	4605      	mov	r5, r0
 800474a:	dc67      	bgt.n	800481c <_dtoa_r+0x94c>
 800474c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800474e:	2b02      	cmp	r3, #2
 8004750:	dc41      	bgt.n	80047d6 <_dtoa_r+0x906>
 8004752:	e063      	b.n	800481c <_dtoa_r+0x94c>
 8004754:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004756:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800475a:	e746      	b.n	80045ea <_dtoa_r+0x71a>
 800475c:	9b07      	ldr	r3, [sp, #28]
 800475e:	1e5c      	subs	r4, r3, #1
 8004760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004762:	42a3      	cmp	r3, r4
 8004764:	bfbf      	itttt	lt
 8004766:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004768:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800476a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800476c:	1ae3      	sublt	r3, r4, r3
 800476e:	bfb4      	ite	lt
 8004770:	18d2      	addlt	r2, r2, r3
 8004772:	1b1c      	subge	r4, r3, r4
 8004774:	9b07      	ldr	r3, [sp, #28]
 8004776:	bfbc      	itt	lt
 8004778:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800477a:	2400      	movlt	r4, #0
 800477c:	2b00      	cmp	r3, #0
 800477e:	bfb5      	itete	lt
 8004780:	eba8 0603 	sublt.w	r6, r8, r3
 8004784:	9b07      	ldrge	r3, [sp, #28]
 8004786:	2300      	movlt	r3, #0
 8004788:	4646      	movge	r6, r8
 800478a:	e730      	b.n	80045ee <_dtoa_r+0x71e>
 800478c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800478e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004790:	4646      	mov	r6, r8
 8004792:	e735      	b.n	8004600 <_dtoa_r+0x730>
 8004794:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004796:	e75c      	b.n	8004652 <_dtoa_r+0x782>
 8004798:	2300      	movs	r3, #0
 800479a:	e788      	b.n	80046ae <_dtoa_r+0x7de>
 800479c:	3fe00000 	.word	0x3fe00000
 80047a0:	40240000 	.word	0x40240000
 80047a4:	40140000 	.word	0x40140000
 80047a8:	9b02      	ldr	r3, [sp, #8]
 80047aa:	e780      	b.n	80046ae <_dtoa_r+0x7de>
 80047ac:	2300      	movs	r3, #0
 80047ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80047b0:	e782      	b.n	80046b8 <_dtoa_r+0x7e8>
 80047b2:	d099      	beq.n	80046e8 <_dtoa_r+0x818>
 80047b4:	9a08      	ldr	r2, [sp, #32]
 80047b6:	331c      	adds	r3, #28
 80047b8:	441a      	add	r2, r3
 80047ba:	4498      	add	r8, r3
 80047bc:	441e      	add	r6, r3
 80047be:	9208      	str	r2, [sp, #32]
 80047c0:	e792      	b.n	80046e8 <_dtoa_r+0x818>
 80047c2:	4603      	mov	r3, r0
 80047c4:	e7f6      	b.n	80047b4 <_dtoa_r+0x8e4>
 80047c6:	9b07      	ldr	r3, [sp, #28]
 80047c8:	9704      	str	r7, [sp, #16]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	dc20      	bgt.n	8004810 <_dtoa_r+0x940>
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	dd1e      	ble.n	8004814 <_dtoa_r+0x944>
 80047d6:	9b00      	ldr	r3, [sp, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f47f aec0 	bne.w	800455e <_dtoa_r+0x68e>
 80047de:	4621      	mov	r1, r4
 80047e0:	2205      	movs	r2, #5
 80047e2:	4658      	mov	r0, fp
 80047e4:	f000 fa9a 	bl	8004d1c <__multadd>
 80047e8:	4601      	mov	r1, r0
 80047ea:	4604      	mov	r4, r0
 80047ec:	4648      	mov	r0, r9
 80047ee:	f000 fcad 	bl	800514c <__mcmp>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	f77f aeb3 	ble.w	800455e <_dtoa_r+0x68e>
 80047f8:	4656      	mov	r6, sl
 80047fa:	2331      	movs	r3, #49	@ 0x31
 80047fc:	f806 3b01 	strb.w	r3, [r6], #1
 8004800:	9b04      	ldr	r3, [sp, #16]
 8004802:	3301      	adds	r3, #1
 8004804:	9304      	str	r3, [sp, #16]
 8004806:	e6ae      	b.n	8004566 <_dtoa_r+0x696>
 8004808:	9c07      	ldr	r4, [sp, #28]
 800480a:	9704      	str	r7, [sp, #16]
 800480c:	4625      	mov	r5, r4
 800480e:	e7f3      	b.n	80047f8 <_dtoa_r+0x928>
 8004810:	9b07      	ldr	r3, [sp, #28]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8104 	beq.w	8004a24 <_dtoa_r+0xb54>
 800481c:	2e00      	cmp	r6, #0
 800481e:	dd05      	ble.n	800482c <_dtoa_r+0x95c>
 8004820:	4629      	mov	r1, r5
 8004822:	4632      	mov	r2, r6
 8004824:	4658      	mov	r0, fp
 8004826:	f000 fc25 	bl	8005074 <__lshift>
 800482a:	4605      	mov	r5, r0
 800482c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d05a      	beq.n	80048e8 <_dtoa_r+0xa18>
 8004832:	6869      	ldr	r1, [r5, #4]
 8004834:	4658      	mov	r0, fp
 8004836:	f000 fa0f 	bl	8004c58 <_Balloc>
 800483a:	4606      	mov	r6, r0
 800483c:	b928      	cbnz	r0, 800484a <_dtoa_r+0x97a>
 800483e:	4b84      	ldr	r3, [pc, #528]	@ (8004a50 <_dtoa_r+0xb80>)
 8004840:	4602      	mov	r2, r0
 8004842:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004846:	f7ff bb5a 	b.w	8003efe <_dtoa_r+0x2e>
 800484a:	692a      	ldr	r2, [r5, #16]
 800484c:	3202      	adds	r2, #2
 800484e:	0092      	lsls	r2, r2, #2
 8004850:	f105 010c 	add.w	r1, r5, #12
 8004854:	300c      	adds	r0, #12
 8004856:	f000 ffaf 	bl	80057b8 <memcpy>
 800485a:	2201      	movs	r2, #1
 800485c:	4631      	mov	r1, r6
 800485e:	4658      	mov	r0, fp
 8004860:	f000 fc08 	bl	8005074 <__lshift>
 8004864:	f10a 0301 	add.w	r3, sl, #1
 8004868:	9307      	str	r3, [sp, #28]
 800486a:	9b00      	ldr	r3, [sp, #0]
 800486c:	4453      	add	r3, sl
 800486e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004870:	9b02      	ldr	r3, [sp, #8]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	462f      	mov	r7, r5
 8004878:	930a      	str	r3, [sp, #40]	@ 0x28
 800487a:	4605      	mov	r5, r0
 800487c:	9b07      	ldr	r3, [sp, #28]
 800487e:	4621      	mov	r1, r4
 8004880:	3b01      	subs	r3, #1
 8004882:	4648      	mov	r0, r9
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	f7ff fa98 	bl	8003dba <quorem>
 800488a:	4639      	mov	r1, r7
 800488c:	9002      	str	r0, [sp, #8]
 800488e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004892:	4648      	mov	r0, r9
 8004894:	f000 fc5a 	bl	800514c <__mcmp>
 8004898:	462a      	mov	r2, r5
 800489a:	9008      	str	r0, [sp, #32]
 800489c:	4621      	mov	r1, r4
 800489e:	4658      	mov	r0, fp
 80048a0:	f000 fc70 	bl	8005184 <__mdiff>
 80048a4:	68c2      	ldr	r2, [r0, #12]
 80048a6:	4606      	mov	r6, r0
 80048a8:	bb02      	cbnz	r2, 80048ec <_dtoa_r+0xa1c>
 80048aa:	4601      	mov	r1, r0
 80048ac:	4648      	mov	r0, r9
 80048ae:	f000 fc4d 	bl	800514c <__mcmp>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4631      	mov	r1, r6
 80048b6:	4658      	mov	r0, fp
 80048b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80048ba:	f000 fa0d 	bl	8004cd8 <_Bfree>
 80048be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048c2:	9e07      	ldr	r6, [sp, #28]
 80048c4:	ea43 0102 	orr.w	r1, r3, r2
 80048c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80048ca:	4319      	orrs	r1, r3
 80048cc:	d110      	bne.n	80048f0 <_dtoa_r+0xa20>
 80048ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80048d2:	d029      	beq.n	8004928 <_dtoa_r+0xa58>
 80048d4:	9b08      	ldr	r3, [sp, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	dd02      	ble.n	80048e0 <_dtoa_r+0xa10>
 80048da:	9b02      	ldr	r3, [sp, #8]
 80048dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80048e0:	9b00      	ldr	r3, [sp, #0]
 80048e2:	f883 8000 	strb.w	r8, [r3]
 80048e6:	e63f      	b.n	8004568 <_dtoa_r+0x698>
 80048e8:	4628      	mov	r0, r5
 80048ea:	e7bb      	b.n	8004864 <_dtoa_r+0x994>
 80048ec:	2201      	movs	r2, #1
 80048ee:	e7e1      	b.n	80048b4 <_dtoa_r+0x9e4>
 80048f0:	9b08      	ldr	r3, [sp, #32]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	db04      	blt.n	8004900 <_dtoa_r+0xa30>
 80048f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048f8:	430b      	orrs	r3, r1
 80048fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80048fc:	430b      	orrs	r3, r1
 80048fe:	d120      	bne.n	8004942 <_dtoa_r+0xa72>
 8004900:	2a00      	cmp	r2, #0
 8004902:	dded      	ble.n	80048e0 <_dtoa_r+0xa10>
 8004904:	4649      	mov	r1, r9
 8004906:	2201      	movs	r2, #1
 8004908:	4658      	mov	r0, fp
 800490a:	f000 fbb3 	bl	8005074 <__lshift>
 800490e:	4621      	mov	r1, r4
 8004910:	4681      	mov	r9, r0
 8004912:	f000 fc1b 	bl	800514c <__mcmp>
 8004916:	2800      	cmp	r0, #0
 8004918:	dc03      	bgt.n	8004922 <_dtoa_r+0xa52>
 800491a:	d1e1      	bne.n	80048e0 <_dtoa_r+0xa10>
 800491c:	f018 0f01 	tst.w	r8, #1
 8004920:	d0de      	beq.n	80048e0 <_dtoa_r+0xa10>
 8004922:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004926:	d1d8      	bne.n	80048da <_dtoa_r+0xa0a>
 8004928:	9a00      	ldr	r2, [sp, #0]
 800492a:	2339      	movs	r3, #57	@ 0x39
 800492c:	7013      	strb	r3, [r2, #0]
 800492e:	4633      	mov	r3, r6
 8004930:	461e      	mov	r6, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004938:	2a39      	cmp	r2, #57	@ 0x39
 800493a:	d052      	beq.n	80049e2 <_dtoa_r+0xb12>
 800493c:	3201      	adds	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
 8004940:	e612      	b.n	8004568 <_dtoa_r+0x698>
 8004942:	2a00      	cmp	r2, #0
 8004944:	dd07      	ble.n	8004956 <_dtoa_r+0xa86>
 8004946:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800494a:	d0ed      	beq.n	8004928 <_dtoa_r+0xa58>
 800494c:	9a00      	ldr	r2, [sp, #0]
 800494e:	f108 0301 	add.w	r3, r8, #1
 8004952:	7013      	strb	r3, [r2, #0]
 8004954:	e608      	b.n	8004568 <_dtoa_r+0x698>
 8004956:	9b07      	ldr	r3, [sp, #28]
 8004958:	9a07      	ldr	r2, [sp, #28]
 800495a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800495e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004960:	4293      	cmp	r3, r2
 8004962:	d028      	beq.n	80049b6 <_dtoa_r+0xae6>
 8004964:	4649      	mov	r1, r9
 8004966:	2300      	movs	r3, #0
 8004968:	220a      	movs	r2, #10
 800496a:	4658      	mov	r0, fp
 800496c:	f000 f9d6 	bl	8004d1c <__multadd>
 8004970:	42af      	cmp	r7, r5
 8004972:	4681      	mov	r9, r0
 8004974:	f04f 0300 	mov.w	r3, #0
 8004978:	f04f 020a 	mov.w	r2, #10
 800497c:	4639      	mov	r1, r7
 800497e:	4658      	mov	r0, fp
 8004980:	d107      	bne.n	8004992 <_dtoa_r+0xac2>
 8004982:	f000 f9cb 	bl	8004d1c <__multadd>
 8004986:	4607      	mov	r7, r0
 8004988:	4605      	mov	r5, r0
 800498a:	9b07      	ldr	r3, [sp, #28]
 800498c:	3301      	adds	r3, #1
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	e774      	b.n	800487c <_dtoa_r+0x9ac>
 8004992:	f000 f9c3 	bl	8004d1c <__multadd>
 8004996:	4629      	mov	r1, r5
 8004998:	4607      	mov	r7, r0
 800499a:	2300      	movs	r3, #0
 800499c:	220a      	movs	r2, #10
 800499e:	4658      	mov	r0, fp
 80049a0:	f000 f9bc 	bl	8004d1c <__multadd>
 80049a4:	4605      	mov	r5, r0
 80049a6:	e7f0      	b.n	800498a <_dtoa_r+0xaba>
 80049a8:	9b00      	ldr	r3, [sp, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bfcc      	ite	gt
 80049ae:	461e      	movgt	r6, r3
 80049b0:	2601      	movle	r6, #1
 80049b2:	4456      	add	r6, sl
 80049b4:	2700      	movs	r7, #0
 80049b6:	4649      	mov	r1, r9
 80049b8:	2201      	movs	r2, #1
 80049ba:	4658      	mov	r0, fp
 80049bc:	f000 fb5a 	bl	8005074 <__lshift>
 80049c0:	4621      	mov	r1, r4
 80049c2:	4681      	mov	r9, r0
 80049c4:	f000 fbc2 	bl	800514c <__mcmp>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	dcb0      	bgt.n	800492e <_dtoa_r+0xa5e>
 80049cc:	d102      	bne.n	80049d4 <_dtoa_r+0xb04>
 80049ce:	f018 0f01 	tst.w	r8, #1
 80049d2:	d1ac      	bne.n	800492e <_dtoa_r+0xa5e>
 80049d4:	4633      	mov	r3, r6
 80049d6:	461e      	mov	r6, r3
 80049d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049dc:	2a30      	cmp	r2, #48	@ 0x30
 80049de:	d0fa      	beq.n	80049d6 <_dtoa_r+0xb06>
 80049e0:	e5c2      	b.n	8004568 <_dtoa_r+0x698>
 80049e2:	459a      	cmp	sl, r3
 80049e4:	d1a4      	bne.n	8004930 <_dtoa_r+0xa60>
 80049e6:	9b04      	ldr	r3, [sp, #16]
 80049e8:	3301      	adds	r3, #1
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	2331      	movs	r3, #49	@ 0x31
 80049ee:	f88a 3000 	strb.w	r3, [sl]
 80049f2:	e5b9      	b.n	8004568 <_dtoa_r+0x698>
 80049f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80049f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004a54 <_dtoa_r+0xb84>
 80049fa:	b11b      	cbz	r3, 8004a04 <_dtoa_r+0xb34>
 80049fc:	f10a 0308 	add.w	r3, sl, #8
 8004a00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	4650      	mov	r0, sl
 8004a06:	b019      	add	sp, #100	@ 0x64
 8004a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	f77f ae37 	ble.w	8004682 <_dtoa_r+0x7b2>
 8004a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a18:	2001      	movs	r0, #1
 8004a1a:	e655      	b.n	80046c8 <_dtoa_r+0x7f8>
 8004a1c:	9b00      	ldr	r3, [sp, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f77f aed6 	ble.w	80047d0 <_dtoa_r+0x900>
 8004a24:	4656      	mov	r6, sl
 8004a26:	4621      	mov	r1, r4
 8004a28:	4648      	mov	r0, r9
 8004a2a:	f7ff f9c6 	bl	8003dba <quorem>
 8004a2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004a32:	f806 8b01 	strb.w	r8, [r6], #1
 8004a36:	9b00      	ldr	r3, [sp, #0]
 8004a38:	eba6 020a 	sub.w	r2, r6, sl
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	ddb3      	ble.n	80049a8 <_dtoa_r+0xad8>
 8004a40:	4649      	mov	r1, r9
 8004a42:	2300      	movs	r3, #0
 8004a44:	220a      	movs	r2, #10
 8004a46:	4658      	mov	r0, fp
 8004a48:	f000 f968 	bl	8004d1c <__multadd>
 8004a4c:	4681      	mov	r9, r0
 8004a4e:	e7ea      	b.n	8004a26 <_dtoa_r+0xb56>
 8004a50:	08005f58 	.word	0x08005f58
 8004a54:	08005edc 	.word	0x08005edc

08004a58 <_free_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4605      	mov	r5, r0
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	d041      	beq.n	8004ae4 <_free_r+0x8c>
 8004a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a64:	1f0c      	subs	r4, r1, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	bfb8      	it	lt
 8004a6a:	18e4      	addlt	r4, r4, r3
 8004a6c:	f000 f8e8 	bl	8004c40 <__malloc_lock>
 8004a70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ae8 <_free_r+0x90>)
 8004a72:	6813      	ldr	r3, [r2, #0]
 8004a74:	b933      	cbnz	r3, 8004a84 <_free_r+0x2c>
 8004a76:	6063      	str	r3, [r4, #4]
 8004a78:	6014      	str	r4, [r2, #0]
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a80:	f000 b8e4 	b.w	8004c4c <__malloc_unlock>
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d908      	bls.n	8004a9a <_free_r+0x42>
 8004a88:	6820      	ldr	r0, [r4, #0]
 8004a8a:	1821      	adds	r1, r4, r0
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	bf01      	itttt	eq
 8004a90:	6819      	ldreq	r1, [r3, #0]
 8004a92:	685b      	ldreq	r3, [r3, #4]
 8004a94:	1809      	addeq	r1, r1, r0
 8004a96:	6021      	streq	r1, [r4, #0]
 8004a98:	e7ed      	b.n	8004a76 <_free_r+0x1e>
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	b10b      	cbz	r3, 8004aa4 <_free_r+0x4c>
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	d9fa      	bls.n	8004a9a <_free_r+0x42>
 8004aa4:	6811      	ldr	r1, [r2, #0]
 8004aa6:	1850      	adds	r0, r2, r1
 8004aa8:	42a0      	cmp	r0, r4
 8004aaa:	d10b      	bne.n	8004ac4 <_free_r+0x6c>
 8004aac:	6820      	ldr	r0, [r4, #0]
 8004aae:	4401      	add	r1, r0
 8004ab0:	1850      	adds	r0, r2, r1
 8004ab2:	4283      	cmp	r3, r0
 8004ab4:	6011      	str	r1, [r2, #0]
 8004ab6:	d1e0      	bne.n	8004a7a <_free_r+0x22>
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	6053      	str	r3, [r2, #4]
 8004abe:	4408      	add	r0, r1
 8004ac0:	6010      	str	r0, [r2, #0]
 8004ac2:	e7da      	b.n	8004a7a <_free_r+0x22>
 8004ac4:	d902      	bls.n	8004acc <_free_r+0x74>
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	602b      	str	r3, [r5, #0]
 8004aca:	e7d6      	b.n	8004a7a <_free_r+0x22>
 8004acc:	6820      	ldr	r0, [r4, #0]
 8004ace:	1821      	adds	r1, r4, r0
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	bf04      	itt	eq
 8004ad4:	6819      	ldreq	r1, [r3, #0]
 8004ad6:	685b      	ldreq	r3, [r3, #4]
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	bf04      	itt	eq
 8004adc:	1809      	addeq	r1, r1, r0
 8004ade:	6021      	streq	r1, [r4, #0]
 8004ae0:	6054      	str	r4, [r2, #4]
 8004ae2:	e7ca      	b.n	8004a7a <_free_r+0x22>
 8004ae4:	bd38      	pop	{r3, r4, r5, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000460 	.word	0x20000460

08004aec <malloc>:
 8004aec:	4b02      	ldr	r3, [pc, #8]	@ (8004af8 <malloc+0xc>)
 8004aee:	4601      	mov	r1, r0
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	f000 b825 	b.w	8004b40 <_malloc_r>
 8004af6:	bf00      	nop
 8004af8:	20000018 	.word	0x20000018

08004afc <sbrk_aligned>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	4e0f      	ldr	r6, [pc, #60]	@ (8004b3c <sbrk_aligned+0x40>)
 8004b00:	460c      	mov	r4, r1
 8004b02:	6831      	ldr	r1, [r6, #0]
 8004b04:	4605      	mov	r5, r0
 8004b06:	b911      	cbnz	r1, 8004b0e <sbrk_aligned+0x12>
 8004b08:	f000 fe46 	bl	8005798 <_sbrk_r>
 8004b0c:	6030      	str	r0, [r6, #0]
 8004b0e:	4621      	mov	r1, r4
 8004b10:	4628      	mov	r0, r5
 8004b12:	f000 fe41 	bl	8005798 <_sbrk_r>
 8004b16:	1c43      	adds	r3, r0, #1
 8004b18:	d103      	bne.n	8004b22 <sbrk_aligned+0x26>
 8004b1a:	f04f 34ff 	mov.w	r4, #4294967295
 8004b1e:	4620      	mov	r0, r4
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
 8004b22:	1cc4      	adds	r4, r0, #3
 8004b24:	f024 0403 	bic.w	r4, r4, #3
 8004b28:	42a0      	cmp	r0, r4
 8004b2a:	d0f8      	beq.n	8004b1e <sbrk_aligned+0x22>
 8004b2c:	1a21      	subs	r1, r4, r0
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 fe32 	bl	8005798 <_sbrk_r>
 8004b34:	3001      	adds	r0, #1
 8004b36:	d1f2      	bne.n	8004b1e <sbrk_aligned+0x22>
 8004b38:	e7ef      	b.n	8004b1a <sbrk_aligned+0x1e>
 8004b3a:	bf00      	nop
 8004b3c:	2000045c 	.word	0x2000045c

08004b40 <_malloc_r>:
 8004b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b44:	1ccd      	adds	r5, r1, #3
 8004b46:	f025 0503 	bic.w	r5, r5, #3
 8004b4a:	3508      	adds	r5, #8
 8004b4c:	2d0c      	cmp	r5, #12
 8004b4e:	bf38      	it	cc
 8004b50:	250c      	movcc	r5, #12
 8004b52:	2d00      	cmp	r5, #0
 8004b54:	4606      	mov	r6, r0
 8004b56:	db01      	blt.n	8004b5c <_malloc_r+0x1c>
 8004b58:	42a9      	cmp	r1, r5
 8004b5a:	d904      	bls.n	8004b66 <_malloc_r+0x26>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	2000      	movs	r0, #0
 8004b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c3c <_malloc_r+0xfc>
 8004b6a:	f000 f869 	bl	8004c40 <__malloc_lock>
 8004b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b72:	461c      	mov	r4, r3
 8004b74:	bb44      	cbnz	r4, 8004bc8 <_malloc_r+0x88>
 8004b76:	4629      	mov	r1, r5
 8004b78:	4630      	mov	r0, r6
 8004b7a:	f7ff ffbf 	bl	8004afc <sbrk_aligned>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	4604      	mov	r4, r0
 8004b82:	d158      	bne.n	8004c36 <_malloc_r+0xf6>
 8004b84:	f8d8 4000 	ldr.w	r4, [r8]
 8004b88:	4627      	mov	r7, r4
 8004b8a:	2f00      	cmp	r7, #0
 8004b8c:	d143      	bne.n	8004c16 <_malloc_r+0xd6>
 8004b8e:	2c00      	cmp	r4, #0
 8004b90:	d04b      	beq.n	8004c2a <_malloc_r+0xea>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	4639      	mov	r1, r7
 8004b96:	4630      	mov	r0, r6
 8004b98:	eb04 0903 	add.w	r9, r4, r3
 8004b9c:	f000 fdfc 	bl	8005798 <_sbrk_r>
 8004ba0:	4581      	cmp	r9, r0
 8004ba2:	d142      	bne.n	8004c2a <_malloc_r+0xea>
 8004ba4:	6821      	ldr	r1, [r4, #0]
 8004ba6:	1a6d      	subs	r5, r5, r1
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4630      	mov	r0, r6
 8004bac:	f7ff ffa6 	bl	8004afc <sbrk_aligned>
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d03a      	beq.n	8004c2a <_malloc_r+0xea>
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	442b      	add	r3, r5
 8004bb8:	6023      	str	r3, [r4, #0]
 8004bba:	f8d8 3000 	ldr.w	r3, [r8]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	bb62      	cbnz	r2, 8004c1c <_malloc_r+0xdc>
 8004bc2:	f8c8 7000 	str.w	r7, [r8]
 8004bc6:	e00f      	b.n	8004be8 <_malloc_r+0xa8>
 8004bc8:	6822      	ldr	r2, [r4, #0]
 8004bca:	1b52      	subs	r2, r2, r5
 8004bcc:	d420      	bmi.n	8004c10 <_malloc_r+0xd0>
 8004bce:	2a0b      	cmp	r2, #11
 8004bd0:	d917      	bls.n	8004c02 <_malloc_r+0xc2>
 8004bd2:	1961      	adds	r1, r4, r5
 8004bd4:	42a3      	cmp	r3, r4
 8004bd6:	6025      	str	r5, [r4, #0]
 8004bd8:	bf18      	it	ne
 8004bda:	6059      	strne	r1, [r3, #4]
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	bf08      	it	eq
 8004be0:	f8c8 1000 	streq.w	r1, [r8]
 8004be4:	5162      	str	r2, [r4, r5]
 8004be6:	604b      	str	r3, [r1, #4]
 8004be8:	4630      	mov	r0, r6
 8004bea:	f000 f82f 	bl	8004c4c <__malloc_unlock>
 8004bee:	f104 000b 	add.w	r0, r4, #11
 8004bf2:	1d23      	adds	r3, r4, #4
 8004bf4:	f020 0007 	bic.w	r0, r0, #7
 8004bf8:	1ac2      	subs	r2, r0, r3
 8004bfa:	bf1c      	itt	ne
 8004bfc:	1a1b      	subne	r3, r3, r0
 8004bfe:	50a3      	strne	r3, [r4, r2]
 8004c00:	e7af      	b.n	8004b62 <_malloc_r+0x22>
 8004c02:	6862      	ldr	r2, [r4, #4]
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	bf0c      	ite	eq
 8004c08:	f8c8 2000 	streq.w	r2, [r8]
 8004c0c:	605a      	strne	r2, [r3, #4]
 8004c0e:	e7eb      	b.n	8004be8 <_malloc_r+0xa8>
 8004c10:	4623      	mov	r3, r4
 8004c12:	6864      	ldr	r4, [r4, #4]
 8004c14:	e7ae      	b.n	8004b74 <_malloc_r+0x34>
 8004c16:	463c      	mov	r4, r7
 8004c18:	687f      	ldr	r7, [r7, #4]
 8004c1a:	e7b6      	b.n	8004b8a <_malloc_r+0x4a>
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	42a3      	cmp	r3, r4
 8004c22:	d1fb      	bne.n	8004c1c <_malloc_r+0xdc>
 8004c24:	2300      	movs	r3, #0
 8004c26:	6053      	str	r3, [r2, #4]
 8004c28:	e7de      	b.n	8004be8 <_malloc_r+0xa8>
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	6033      	str	r3, [r6, #0]
 8004c2e:	4630      	mov	r0, r6
 8004c30:	f000 f80c 	bl	8004c4c <__malloc_unlock>
 8004c34:	e794      	b.n	8004b60 <_malloc_r+0x20>
 8004c36:	6005      	str	r5, [r0, #0]
 8004c38:	e7d6      	b.n	8004be8 <_malloc_r+0xa8>
 8004c3a:	bf00      	nop
 8004c3c:	20000460 	.word	0x20000460

08004c40 <__malloc_lock>:
 8004c40:	4801      	ldr	r0, [pc, #4]	@ (8004c48 <__malloc_lock+0x8>)
 8004c42:	f7ff b8b8 	b.w	8003db6 <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	20000458 	.word	0x20000458

08004c4c <__malloc_unlock>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	@ (8004c54 <__malloc_unlock+0x8>)
 8004c4e:	f7ff b8b3 	b.w	8003db8 <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	20000458 	.word	0x20000458

08004c58 <_Balloc>:
 8004c58:	b570      	push	{r4, r5, r6, lr}
 8004c5a:	69c6      	ldr	r6, [r0, #28]
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	460d      	mov	r5, r1
 8004c60:	b976      	cbnz	r6, 8004c80 <_Balloc+0x28>
 8004c62:	2010      	movs	r0, #16
 8004c64:	f7ff ff42 	bl	8004aec <malloc>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	61e0      	str	r0, [r4, #28]
 8004c6c:	b920      	cbnz	r0, 8004c78 <_Balloc+0x20>
 8004c6e:	4b18      	ldr	r3, [pc, #96]	@ (8004cd0 <_Balloc+0x78>)
 8004c70:	4818      	ldr	r0, [pc, #96]	@ (8004cd4 <_Balloc+0x7c>)
 8004c72:	216b      	movs	r1, #107	@ 0x6b
 8004c74:	f000 fdae 	bl	80057d4 <__assert_func>
 8004c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c7c:	6006      	str	r6, [r0, #0]
 8004c7e:	60c6      	str	r6, [r0, #12]
 8004c80:	69e6      	ldr	r6, [r4, #28]
 8004c82:	68f3      	ldr	r3, [r6, #12]
 8004c84:	b183      	cbz	r3, 8004ca8 <_Balloc+0x50>
 8004c86:	69e3      	ldr	r3, [r4, #28]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004c8e:	b9b8      	cbnz	r0, 8004cc0 <_Balloc+0x68>
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f605 	lsl.w	r6, r1, r5
 8004c96:	1d72      	adds	r2, r6, #5
 8004c98:	0092      	lsls	r2, r2, #2
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f000 fdb8 	bl	8005810 <_calloc_r>
 8004ca0:	b160      	cbz	r0, 8004cbc <_Balloc+0x64>
 8004ca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ca6:	e00e      	b.n	8004cc6 <_Balloc+0x6e>
 8004ca8:	2221      	movs	r2, #33	@ 0x21
 8004caa:	2104      	movs	r1, #4
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 fdaf 	bl	8005810 <_calloc_r>
 8004cb2:	69e3      	ldr	r3, [r4, #28]
 8004cb4:	60f0      	str	r0, [r6, #12]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e4      	bne.n	8004c86 <_Balloc+0x2e>
 8004cbc:	2000      	movs	r0, #0
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	6802      	ldr	r2, [r0, #0]
 8004cc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ccc:	e7f7      	b.n	8004cbe <_Balloc+0x66>
 8004cce:	bf00      	nop
 8004cd0:	08005ee9 	.word	0x08005ee9
 8004cd4:	08005f69 	.word	0x08005f69

08004cd8 <_Bfree>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	69c6      	ldr	r6, [r0, #28]
 8004cdc:	4605      	mov	r5, r0
 8004cde:	460c      	mov	r4, r1
 8004ce0:	b976      	cbnz	r6, 8004d00 <_Bfree+0x28>
 8004ce2:	2010      	movs	r0, #16
 8004ce4:	f7ff ff02 	bl	8004aec <malloc>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	61e8      	str	r0, [r5, #28]
 8004cec:	b920      	cbnz	r0, 8004cf8 <_Bfree+0x20>
 8004cee:	4b09      	ldr	r3, [pc, #36]	@ (8004d14 <_Bfree+0x3c>)
 8004cf0:	4809      	ldr	r0, [pc, #36]	@ (8004d18 <_Bfree+0x40>)
 8004cf2:	218f      	movs	r1, #143	@ 0x8f
 8004cf4:	f000 fd6e 	bl	80057d4 <__assert_func>
 8004cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004cfc:	6006      	str	r6, [r0, #0]
 8004cfe:	60c6      	str	r6, [r0, #12]
 8004d00:	b13c      	cbz	r4, 8004d12 <_Bfree+0x3a>
 8004d02:	69eb      	ldr	r3, [r5, #28]
 8004d04:	6862      	ldr	r2, [r4, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d0c:	6021      	str	r1, [r4, #0]
 8004d0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d12:	bd70      	pop	{r4, r5, r6, pc}
 8004d14:	08005ee9 	.word	0x08005ee9
 8004d18:	08005f69 	.word	0x08005f69

08004d1c <__multadd>:
 8004d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d20:	690d      	ldr	r5, [r1, #16]
 8004d22:	4607      	mov	r7, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	461e      	mov	r6, r3
 8004d28:	f101 0c14 	add.w	ip, r1, #20
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	f8dc 3000 	ldr.w	r3, [ip]
 8004d32:	b299      	uxth	r1, r3
 8004d34:	fb02 6101 	mla	r1, r2, r1, r6
 8004d38:	0c1e      	lsrs	r6, r3, #16
 8004d3a:	0c0b      	lsrs	r3, r1, #16
 8004d3c:	fb02 3306 	mla	r3, r2, r6, r3
 8004d40:	b289      	uxth	r1, r1
 8004d42:	3001      	adds	r0, #1
 8004d44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d48:	4285      	cmp	r5, r0
 8004d4a:	f84c 1b04 	str.w	r1, [ip], #4
 8004d4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004d52:	dcec      	bgt.n	8004d2e <__multadd+0x12>
 8004d54:	b30e      	cbz	r6, 8004d9a <__multadd+0x7e>
 8004d56:	68a3      	ldr	r3, [r4, #8]
 8004d58:	42ab      	cmp	r3, r5
 8004d5a:	dc19      	bgt.n	8004d90 <__multadd+0x74>
 8004d5c:	6861      	ldr	r1, [r4, #4]
 8004d5e:	4638      	mov	r0, r7
 8004d60:	3101      	adds	r1, #1
 8004d62:	f7ff ff79 	bl	8004c58 <_Balloc>
 8004d66:	4680      	mov	r8, r0
 8004d68:	b928      	cbnz	r0, 8004d76 <__multadd+0x5a>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004da0 <__multadd+0x84>)
 8004d6e:	480d      	ldr	r0, [pc, #52]	@ (8004da4 <__multadd+0x88>)
 8004d70:	21ba      	movs	r1, #186	@ 0xba
 8004d72:	f000 fd2f 	bl	80057d4 <__assert_func>
 8004d76:	6922      	ldr	r2, [r4, #16]
 8004d78:	3202      	adds	r2, #2
 8004d7a:	f104 010c 	add.w	r1, r4, #12
 8004d7e:	0092      	lsls	r2, r2, #2
 8004d80:	300c      	adds	r0, #12
 8004d82:	f000 fd19 	bl	80057b8 <memcpy>
 8004d86:	4621      	mov	r1, r4
 8004d88:	4638      	mov	r0, r7
 8004d8a:	f7ff ffa5 	bl	8004cd8 <_Bfree>
 8004d8e:	4644      	mov	r4, r8
 8004d90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004d94:	3501      	adds	r5, #1
 8004d96:	615e      	str	r6, [r3, #20]
 8004d98:	6125      	str	r5, [r4, #16]
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da0:	08005f58 	.word	0x08005f58
 8004da4:	08005f69 	.word	0x08005f69

08004da8 <__hi0bits>:
 8004da8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004dac:	4603      	mov	r3, r0
 8004dae:	bf36      	itet	cc
 8004db0:	0403      	lslcc	r3, r0, #16
 8004db2:	2000      	movcs	r0, #0
 8004db4:	2010      	movcc	r0, #16
 8004db6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dba:	bf3c      	itt	cc
 8004dbc:	021b      	lslcc	r3, r3, #8
 8004dbe:	3008      	addcc	r0, #8
 8004dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dc4:	bf3c      	itt	cc
 8004dc6:	011b      	lslcc	r3, r3, #4
 8004dc8:	3004      	addcc	r0, #4
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dce:	bf3c      	itt	cc
 8004dd0:	009b      	lslcc	r3, r3, #2
 8004dd2:	3002      	addcc	r0, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	db05      	blt.n	8004de4 <__hi0bits+0x3c>
 8004dd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004ddc:	f100 0001 	add.w	r0, r0, #1
 8004de0:	bf08      	it	eq
 8004de2:	2020      	moveq	r0, #32
 8004de4:	4770      	bx	lr

08004de6 <__lo0bits>:
 8004de6:	6803      	ldr	r3, [r0, #0]
 8004de8:	4602      	mov	r2, r0
 8004dea:	f013 0007 	ands.w	r0, r3, #7
 8004dee:	d00b      	beq.n	8004e08 <__lo0bits+0x22>
 8004df0:	07d9      	lsls	r1, r3, #31
 8004df2:	d421      	bmi.n	8004e38 <__lo0bits+0x52>
 8004df4:	0798      	lsls	r0, r3, #30
 8004df6:	bf49      	itett	mi
 8004df8:	085b      	lsrmi	r3, r3, #1
 8004dfa:	089b      	lsrpl	r3, r3, #2
 8004dfc:	2001      	movmi	r0, #1
 8004dfe:	6013      	strmi	r3, [r2, #0]
 8004e00:	bf5c      	itt	pl
 8004e02:	6013      	strpl	r3, [r2, #0]
 8004e04:	2002      	movpl	r0, #2
 8004e06:	4770      	bx	lr
 8004e08:	b299      	uxth	r1, r3
 8004e0a:	b909      	cbnz	r1, 8004e10 <__lo0bits+0x2a>
 8004e0c:	0c1b      	lsrs	r3, r3, #16
 8004e0e:	2010      	movs	r0, #16
 8004e10:	b2d9      	uxtb	r1, r3
 8004e12:	b909      	cbnz	r1, 8004e18 <__lo0bits+0x32>
 8004e14:	3008      	adds	r0, #8
 8004e16:	0a1b      	lsrs	r3, r3, #8
 8004e18:	0719      	lsls	r1, r3, #28
 8004e1a:	bf04      	itt	eq
 8004e1c:	091b      	lsreq	r3, r3, #4
 8004e1e:	3004      	addeq	r0, #4
 8004e20:	0799      	lsls	r1, r3, #30
 8004e22:	bf04      	itt	eq
 8004e24:	089b      	lsreq	r3, r3, #2
 8004e26:	3002      	addeq	r0, #2
 8004e28:	07d9      	lsls	r1, r3, #31
 8004e2a:	d403      	bmi.n	8004e34 <__lo0bits+0x4e>
 8004e2c:	085b      	lsrs	r3, r3, #1
 8004e2e:	f100 0001 	add.w	r0, r0, #1
 8004e32:	d003      	beq.n	8004e3c <__lo0bits+0x56>
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4770      	bx	lr
 8004e38:	2000      	movs	r0, #0
 8004e3a:	4770      	bx	lr
 8004e3c:	2020      	movs	r0, #32
 8004e3e:	4770      	bx	lr

08004e40 <__i2b>:
 8004e40:	b510      	push	{r4, lr}
 8004e42:	460c      	mov	r4, r1
 8004e44:	2101      	movs	r1, #1
 8004e46:	f7ff ff07 	bl	8004c58 <_Balloc>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	b928      	cbnz	r0, 8004e5a <__i2b+0x1a>
 8004e4e:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <__i2b+0x24>)
 8004e50:	4805      	ldr	r0, [pc, #20]	@ (8004e68 <__i2b+0x28>)
 8004e52:	f240 1145 	movw	r1, #325	@ 0x145
 8004e56:	f000 fcbd 	bl	80057d4 <__assert_func>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	6144      	str	r4, [r0, #20]
 8004e5e:	6103      	str	r3, [r0, #16]
 8004e60:	bd10      	pop	{r4, pc}
 8004e62:	bf00      	nop
 8004e64:	08005f58 	.word	0x08005f58
 8004e68:	08005f69 	.word	0x08005f69

08004e6c <__multiply>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	4614      	mov	r4, r2
 8004e72:	690a      	ldr	r2, [r1, #16]
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	bfa8      	it	ge
 8004e7a:	4623      	movge	r3, r4
 8004e7c:	460f      	mov	r7, r1
 8004e7e:	bfa4      	itt	ge
 8004e80:	460c      	movge	r4, r1
 8004e82:	461f      	movge	r7, r3
 8004e84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004e88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004e8c:	68a3      	ldr	r3, [r4, #8]
 8004e8e:	6861      	ldr	r1, [r4, #4]
 8004e90:	eb0a 0609 	add.w	r6, sl, r9
 8004e94:	42b3      	cmp	r3, r6
 8004e96:	b085      	sub	sp, #20
 8004e98:	bfb8      	it	lt
 8004e9a:	3101      	addlt	r1, #1
 8004e9c:	f7ff fedc 	bl	8004c58 <_Balloc>
 8004ea0:	b930      	cbnz	r0, 8004eb0 <__multiply+0x44>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	4b44      	ldr	r3, [pc, #272]	@ (8004fb8 <__multiply+0x14c>)
 8004ea6:	4845      	ldr	r0, [pc, #276]	@ (8004fbc <__multiply+0x150>)
 8004ea8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004eac:	f000 fc92 	bl	80057d4 <__assert_func>
 8004eb0:	f100 0514 	add.w	r5, r0, #20
 8004eb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004eb8:	462b      	mov	r3, r5
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4543      	cmp	r3, r8
 8004ebe:	d321      	bcc.n	8004f04 <__multiply+0x98>
 8004ec0:	f107 0114 	add.w	r1, r7, #20
 8004ec4:	f104 0214 	add.w	r2, r4, #20
 8004ec8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004ecc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004ed0:	9302      	str	r3, [sp, #8]
 8004ed2:	1b13      	subs	r3, r2, r4
 8004ed4:	3b15      	subs	r3, #21
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	3304      	adds	r3, #4
 8004edc:	f104 0715 	add.w	r7, r4, #21
 8004ee0:	42ba      	cmp	r2, r7
 8004ee2:	bf38      	it	cc
 8004ee4:	2304      	movcc	r3, #4
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	9b02      	ldr	r3, [sp, #8]
 8004eea:	9103      	str	r1, [sp, #12]
 8004eec:	428b      	cmp	r3, r1
 8004eee:	d80c      	bhi.n	8004f0a <__multiply+0x9e>
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	dd03      	ble.n	8004efc <__multiply+0x90>
 8004ef4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d05b      	beq.n	8004fb4 <__multiply+0x148>
 8004efc:	6106      	str	r6, [r0, #16]
 8004efe:	b005      	add	sp, #20
 8004f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f04:	f843 2b04 	str.w	r2, [r3], #4
 8004f08:	e7d8      	b.n	8004ebc <__multiply+0x50>
 8004f0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8004f0e:	f1ba 0f00 	cmp.w	sl, #0
 8004f12:	d024      	beq.n	8004f5e <__multiply+0xf2>
 8004f14:	f104 0e14 	add.w	lr, r4, #20
 8004f18:	46a9      	mov	r9, r5
 8004f1a:	f04f 0c00 	mov.w	ip, #0
 8004f1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004f22:	f8d9 3000 	ldr.w	r3, [r9]
 8004f26:	fa1f fb87 	uxth.w	fp, r7
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004f30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004f34:	f8d9 7000 	ldr.w	r7, [r9]
 8004f38:	4463      	add	r3, ip
 8004f3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004f3e:	fb0a c70b 	mla	r7, sl, fp, ip
 8004f42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004f4c:	4572      	cmp	r2, lr
 8004f4e:	f849 3b04 	str.w	r3, [r9], #4
 8004f52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004f56:	d8e2      	bhi.n	8004f1e <__multiply+0xb2>
 8004f58:	9b01      	ldr	r3, [sp, #4]
 8004f5a:	f845 c003 	str.w	ip, [r5, r3]
 8004f5e:	9b03      	ldr	r3, [sp, #12]
 8004f60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004f64:	3104      	adds	r1, #4
 8004f66:	f1b9 0f00 	cmp.w	r9, #0
 8004f6a:	d021      	beq.n	8004fb0 <__multiply+0x144>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	f104 0c14 	add.w	ip, r4, #20
 8004f72:	46ae      	mov	lr, r5
 8004f74:	f04f 0a00 	mov.w	sl, #0
 8004f78:	f8bc b000 	ldrh.w	fp, [ip]
 8004f7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004f80:	fb09 770b 	mla	r7, r9, fp, r7
 8004f84:	4457      	add	r7, sl
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004f8c:	f84e 3b04 	str.w	r3, [lr], #4
 8004f90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f98:	f8be 3000 	ldrh.w	r3, [lr]
 8004f9c:	fb09 330a 	mla	r3, r9, sl, r3
 8004fa0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004fa4:	4562      	cmp	r2, ip
 8004fa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004faa:	d8e5      	bhi.n	8004f78 <__multiply+0x10c>
 8004fac:	9f01      	ldr	r7, [sp, #4]
 8004fae:	51eb      	str	r3, [r5, r7]
 8004fb0:	3504      	adds	r5, #4
 8004fb2:	e799      	b.n	8004ee8 <__multiply+0x7c>
 8004fb4:	3e01      	subs	r6, #1
 8004fb6:	e79b      	b.n	8004ef0 <__multiply+0x84>
 8004fb8:	08005f58 	.word	0x08005f58
 8004fbc:	08005f69 	.word	0x08005f69

08004fc0 <__pow5mult>:
 8004fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	4615      	mov	r5, r2
 8004fc6:	f012 0203 	ands.w	r2, r2, #3
 8004fca:	4607      	mov	r7, r0
 8004fcc:	460e      	mov	r6, r1
 8004fce:	d007      	beq.n	8004fe0 <__pow5mult+0x20>
 8004fd0:	4c25      	ldr	r4, [pc, #148]	@ (8005068 <__pow5mult+0xa8>)
 8004fd2:	3a01      	subs	r2, #1
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004fda:	f7ff fe9f 	bl	8004d1c <__multadd>
 8004fde:	4606      	mov	r6, r0
 8004fe0:	10ad      	asrs	r5, r5, #2
 8004fe2:	d03d      	beq.n	8005060 <__pow5mult+0xa0>
 8004fe4:	69fc      	ldr	r4, [r7, #28]
 8004fe6:	b97c      	cbnz	r4, 8005008 <__pow5mult+0x48>
 8004fe8:	2010      	movs	r0, #16
 8004fea:	f7ff fd7f 	bl	8004aec <malloc>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	61f8      	str	r0, [r7, #28]
 8004ff2:	b928      	cbnz	r0, 8005000 <__pow5mult+0x40>
 8004ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800506c <__pow5mult+0xac>)
 8004ff6:	481e      	ldr	r0, [pc, #120]	@ (8005070 <__pow5mult+0xb0>)
 8004ff8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004ffc:	f000 fbea 	bl	80057d4 <__assert_func>
 8005000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005004:	6004      	str	r4, [r0, #0]
 8005006:	60c4      	str	r4, [r0, #12]
 8005008:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800500c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005010:	b94c      	cbnz	r4, 8005026 <__pow5mult+0x66>
 8005012:	f240 2171 	movw	r1, #625	@ 0x271
 8005016:	4638      	mov	r0, r7
 8005018:	f7ff ff12 	bl	8004e40 <__i2b>
 800501c:	2300      	movs	r3, #0
 800501e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005022:	4604      	mov	r4, r0
 8005024:	6003      	str	r3, [r0, #0]
 8005026:	f04f 0900 	mov.w	r9, #0
 800502a:	07eb      	lsls	r3, r5, #31
 800502c:	d50a      	bpl.n	8005044 <__pow5mult+0x84>
 800502e:	4631      	mov	r1, r6
 8005030:	4622      	mov	r2, r4
 8005032:	4638      	mov	r0, r7
 8005034:	f7ff ff1a 	bl	8004e6c <__multiply>
 8005038:	4631      	mov	r1, r6
 800503a:	4680      	mov	r8, r0
 800503c:	4638      	mov	r0, r7
 800503e:	f7ff fe4b 	bl	8004cd8 <_Bfree>
 8005042:	4646      	mov	r6, r8
 8005044:	106d      	asrs	r5, r5, #1
 8005046:	d00b      	beq.n	8005060 <__pow5mult+0xa0>
 8005048:	6820      	ldr	r0, [r4, #0]
 800504a:	b938      	cbnz	r0, 800505c <__pow5mult+0x9c>
 800504c:	4622      	mov	r2, r4
 800504e:	4621      	mov	r1, r4
 8005050:	4638      	mov	r0, r7
 8005052:	f7ff ff0b 	bl	8004e6c <__multiply>
 8005056:	6020      	str	r0, [r4, #0]
 8005058:	f8c0 9000 	str.w	r9, [r0]
 800505c:	4604      	mov	r4, r0
 800505e:	e7e4      	b.n	800502a <__pow5mult+0x6a>
 8005060:	4630      	mov	r0, r6
 8005062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005066:	bf00      	nop
 8005068:	08005fc4 	.word	0x08005fc4
 800506c:	08005ee9 	.word	0x08005ee9
 8005070:	08005f69 	.word	0x08005f69

08005074 <__lshift>:
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	460c      	mov	r4, r1
 800507a:	6849      	ldr	r1, [r1, #4]
 800507c:	6923      	ldr	r3, [r4, #16]
 800507e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005082:	68a3      	ldr	r3, [r4, #8]
 8005084:	4607      	mov	r7, r0
 8005086:	4691      	mov	r9, r2
 8005088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800508c:	f108 0601 	add.w	r6, r8, #1
 8005090:	42b3      	cmp	r3, r6
 8005092:	db0b      	blt.n	80050ac <__lshift+0x38>
 8005094:	4638      	mov	r0, r7
 8005096:	f7ff fddf 	bl	8004c58 <_Balloc>
 800509a:	4605      	mov	r5, r0
 800509c:	b948      	cbnz	r0, 80050b2 <__lshift+0x3e>
 800509e:	4602      	mov	r2, r0
 80050a0:	4b28      	ldr	r3, [pc, #160]	@ (8005144 <__lshift+0xd0>)
 80050a2:	4829      	ldr	r0, [pc, #164]	@ (8005148 <__lshift+0xd4>)
 80050a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80050a8:	f000 fb94 	bl	80057d4 <__assert_func>
 80050ac:	3101      	adds	r1, #1
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	e7ee      	b.n	8005090 <__lshift+0x1c>
 80050b2:	2300      	movs	r3, #0
 80050b4:	f100 0114 	add.w	r1, r0, #20
 80050b8:	f100 0210 	add.w	r2, r0, #16
 80050bc:	4618      	mov	r0, r3
 80050be:	4553      	cmp	r3, sl
 80050c0:	db33      	blt.n	800512a <__lshift+0xb6>
 80050c2:	6920      	ldr	r0, [r4, #16]
 80050c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050c8:	f104 0314 	add.w	r3, r4, #20
 80050cc:	f019 091f 	ands.w	r9, r9, #31
 80050d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80050d8:	d02b      	beq.n	8005132 <__lshift+0xbe>
 80050da:	f1c9 0e20 	rsb	lr, r9, #32
 80050de:	468a      	mov	sl, r1
 80050e0:	2200      	movs	r2, #0
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	fa00 f009 	lsl.w	r0, r0, r9
 80050e8:	4310      	orrs	r0, r2
 80050ea:	f84a 0b04 	str.w	r0, [sl], #4
 80050ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f2:	459c      	cmp	ip, r3
 80050f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80050f8:	d8f3      	bhi.n	80050e2 <__lshift+0x6e>
 80050fa:	ebac 0304 	sub.w	r3, ip, r4
 80050fe:	3b15      	subs	r3, #21
 8005100:	f023 0303 	bic.w	r3, r3, #3
 8005104:	3304      	adds	r3, #4
 8005106:	f104 0015 	add.w	r0, r4, #21
 800510a:	4584      	cmp	ip, r0
 800510c:	bf38      	it	cc
 800510e:	2304      	movcc	r3, #4
 8005110:	50ca      	str	r2, [r1, r3]
 8005112:	b10a      	cbz	r2, 8005118 <__lshift+0xa4>
 8005114:	f108 0602 	add.w	r6, r8, #2
 8005118:	3e01      	subs	r6, #1
 800511a:	4638      	mov	r0, r7
 800511c:	612e      	str	r6, [r5, #16]
 800511e:	4621      	mov	r1, r4
 8005120:	f7ff fdda 	bl	8004cd8 <_Bfree>
 8005124:	4628      	mov	r0, r5
 8005126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512a:	f842 0f04 	str.w	r0, [r2, #4]!
 800512e:	3301      	adds	r3, #1
 8005130:	e7c5      	b.n	80050be <__lshift+0x4a>
 8005132:	3904      	subs	r1, #4
 8005134:	f853 2b04 	ldr.w	r2, [r3], #4
 8005138:	f841 2f04 	str.w	r2, [r1, #4]!
 800513c:	459c      	cmp	ip, r3
 800513e:	d8f9      	bhi.n	8005134 <__lshift+0xc0>
 8005140:	e7ea      	b.n	8005118 <__lshift+0xa4>
 8005142:	bf00      	nop
 8005144:	08005f58 	.word	0x08005f58
 8005148:	08005f69 	.word	0x08005f69

0800514c <__mcmp>:
 800514c:	690a      	ldr	r2, [r1, #16]
 800514e:	4603      	mov	r3, r0
 8005150:	6900      	ldr	r0, [r0, #16]
 8005152:	1a80      	subs	r0, r0, r2
 8005154:	b530      	push	{r4, r5, lr}
 8005156:	d10e      	bne.n	8005176 <__mcmp+0x2a>
 8005158:	3314      	adds	r3, #20
 800515a:	3114      	adds	r1, #20
 800515c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005160:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005164:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005168:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800516c:	4295      	cmp	r5, r2
 800516e:	d003      	beq.n	8005178 <__mcmp+0x2c>
 8005170:	d205      	bcs.n	800517e <__mcmp+0x32>
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	bd30      	pop	{r4, r5, pc}
 8005178:	42a3      	cmp	r3, r4
 800517a:	d3f3      	bcc.n	8005164 <__mcmp+0x18>
 800517c:	e7fb      	b.n	8005176 <__mcmp+0x2a>
 800517e:	2001      	movs	r0, #1
 8005180:	e7f9      	b.n	8005176 <__mcmp+0x2a>
	...

08005184 <__mdiff>:
 8005184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005188:	4689      	mov	r9, r1
 800518a:	4606      	mov	r6, r0
 800518c:	4611      	mov	r1, r2
 800518e:	4648      	mov	r0, r9
 8005190:	4614      	mov	r4, r2
 8005192:	f7ff ffdb 	bl	800514c <__mcmp>
 8005196:	1e05      	subs	r5, r0, #0
 8005198:	d112      	bne.n	80051c0 <__mdiff+0x3c>
 800519a:	4629      	mov	r1, r5
 800519c:	4630      	mov	r0, r6
 800519e:	f7ff fd5b 	bl	8004c58 <_Balloc>
 80051a2:	4602      	mov	r2, r0
 80051a4:	b928      	cbnz	r0, 80051b2 <__mdiff+0x2e>
 80051a6:	4b3f      	ldr	r3, [pc, #252]	@ (80052a4 <__mdiff+0x120>)
 80051a8:	f240 2137 	movw	r1, #567	@ 0x237
 80051ac:	483e      	ldr	r0, [pc, #248]	@ (80052a8 <__mdiff+0x124>)
 80051ae:	f000 fb11 	bl	80057d4 <__assert_func>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80051b8:	4610      	mov	r0, r2
 80051ba:	b003      	add	sp, #12
 80051bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c0:	bfbc      	itt	lt
 80051c2:	464b      	movlt	r3, r9
 80051c4:	46a1      	movlt	r9, r4
 80051c6:	4630      	mov	r0, r6
 80051c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80051cc:	bfba      	itte	lt
 80051ce:	461c      	movlt	r4, r3
 80051d0:	2501      	movlt	r5, #1
 80051d2:	2500      	movge	r5, #0
 80051d4:	f7ff fd40 	bl	8004c58 <_Balloc>
 80051d8:	4602      	mov	r2, r0
 80051da:	b918      	cbnz	r0, 80051e4 <__mdiff+0x60>
 80051dc:	4b31      	ldr	r3, [pc, #196]	@ (80052a4 <__mdiff+0x120>)
 80051de:	f240 2145 	movw	r1, #581	@ 0x245
 80051e2:	e7e3      	b.n	80051ac <__mdiff+0x28>
 80051e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80051e8:	6926      	ldr	r6, [r4, #16]
 80051ea:	60c5      	str	r5, [r0, #12]
 80051ec:	f109 0310 	add.w	r3, r9, #16
 80051f0:	f109 0514 	add.w	r5, r9, #20
 80051f4:	f104 0e14 	add.w	lr, r4, #20
 80051f8:	f100 0b14 	add.w	fp, r0, #20
 80051fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005200:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	46d9      	mov	r9, fp
 8005208:	f04f 0c00 	mov.w	ip, #0
 800520c:	9b01      	ldr	r3, [sp, #4]
 800520e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005212:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	fa1f f38a 	uxth.w	r3, sl
 800521c:	4619      	mov	r1, r3
 800521e:	b283      	uxth	r3, r0
 8005220:	1acb      	subs	r3, r1, r3
 8005222:	0c00      	lsrs	r0, r0, #16
 8005224:	4463      	add	r3, ip
 8005226:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800522a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800522e:	b29b      	uxth	r3, r3
 8005230:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005234:	4576      	cmp	r6, lr
 8005236:	f849 3b04 	str.w	r3, [r9], #4
 800523a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800523e:	d8e5      	bhi.n	800520c <__mdiff+0x88>
 8005240:	1b33      	subs	r3, r6, r4
 8005242:	3b15      	subs	r3, #21
 8005244:	f023 0303 	bic.w	r3, r3, #3
 8005248:	3415      	adds	r4, #21
 800524a:	3304      	adds	r3, #4
 800524c:	42a6      	cmp	r6, r4
 800524e:	bf38      	it	cc
 8005250:	2304      	movcc	r3, #4
 8005252:	441d      	add	r5, r3
 8005254:	445b      	add	r3, fp
 8005256:	461e      	mov	r6, r3
 8005258:	462c      	mov	r4, r5
 800525a:	4544      	cmp	r4, r8
 800525c:	d30e      	bcc.n	800527c <__mdiff+0xf8>
 800525e:	f108 0103 	add.w	r1, r8, #3
 8005262:	1b49      	subs	r1, r1, r5
 8005264:	f021 0103 	bic.w	r1, r1, #3
 8005268:	3d03      	subs	r5, #3
 800526a:	45a8      	cmp	r8, r5
 800526c:	bf38      	it	cc
 800526e:	2100      	movcc	r1, #0
 8005270:	440b      	add	r3, r1
 8005272:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005276:	b191      	cbz	r1, 800529e <__mdiff+0x11a>
 8005278:	6117      	str	r7, [r2, #16]
 800527a:	e79d      	b.n	80051b8 <__mdiff+0x34>
 800527c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005280:	46e6      	mov	lr, ip
 8005282:	0c08      	lsrs	r0, r1, #16
 8005284:	fa1c fc81 	uxtah	ip, ip, r1
 8005288:	4471      	add	r1, lr
 800528a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800528e:	b289      	uxth	r1, r1
 8005290:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005294:	f846 1b04 	str.w	r1, [r6], #4
 8005298:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800529c:	e7dd      	b.n	800525a <__mdiff+0xd6>
 800529e:	3f01      	subs	r7, #1
 80052a0:	e7e7      	b.n	8005272 <__mdiff+0xee>
 80052a2:	bf00      	nop
 80052a4:	08005f58 	.word	0x08005f58
 80052a8:	08005f69 	.word	0x08005f69

080052ac <__d2b>:
 80052ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80052b0:	460f      	mov	r7, r1
 80052b2:	2101      	movs	r1, #1
 80052b4:	ec59 8b10 	vmov	r8, r9, d0
 80052b8:	4616      	mov	r6, r2
 80052ba:	f7ff fccd 	bl	8004c58 <_Balloc>
 80052be:	4604      	mov	r4, r0
 80052c0:	b930      	cbnz	r0, 80052d0 <__d2b+0x24>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b23      	ldr	r3, [pc, #140]	@ (8005354 <__d2b+0xa8>)
 80052c6:	4824      	ldr	r0, [pc, #144]	@ (8005358 <__d2b+0xac>)
 80052c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80052cc:	f000 fa82 	bl	80057d4 <__assert_func>
 80052d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80052d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052d8:	b10d      	cbz	r5, 80052de <__d2b+0x32>
 80052da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	f1b8 0300 	subs.w	r3, r8, #0
 80052e4:	d023      	beq.n	800532e <__d2b+0x82>
 80052e6:	4668      	mov	r0, sp
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	f7ff fd7c 	bl	8004de6 <__lo0bits>
 80052ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80052f2:	b1d0      	cbz	r0, 800532a <__d2b+0x7e>
 80052f4:	f1c0 0320 	rsb	r3, r0, #32
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	430b      	orrs	r3, r1
 80052fe:	40c2      	lsrs	r2, r0
 8005300:	6163      	str	r3, [r4, #20]
 8005302:	9201      	str	r2, [sp, #4]
 8005304:	9b01      	ldr	r3, [sp, #4]
 8005306:	61a3      	str	r3, [r4, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf0c      	ite	eq
 800530c:	2201      	moveq	r2, #1
 800530e:	2202      	movne	r2, #2
 8005310:	6122      	str	r2, [r4, #16]
 8005312:	b1a5      	cbz	r5, 800533e <__d2b+0x92>
 8005314:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005318:	4405      	add	r5, r0
 800531a:	603d      	str	r5, [r7, #0]
 800531c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005320:	6030      	str	r0, [r6, #0]
 8005322:	4620      	mov	r0, r4
 8005324:	b003      	add	sp, #12
 8005326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800532a:	6161      	str	r1, [r4, #20]
 800532c:	e7ea      	b.n	8005304 <__d2b+0x58>
 800532e:	a801      	add	r0, sp, #4
 8005330:	f7ff fd59 	bl	8004de6 <__lo0bits>
 8005334:	9b01      	ldr	r3, [sp, #4]
 8005336:	6163      	str	r3, [r4, #20]
 8005338:	3020      	adds	r0, #32
 800533a:	2201      	movs	r2, #1
 800533c:	e7e8      	b.n	8005310 <__d2b+0x64>
 800533e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005342:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005346:	6038      	str	r0, [r7, #0]
 8005348:	6918      	ldr	r0, [r3, #16]
 800534a:	f7ff fd2d 	bl	8004da8 <__hi0bits>
 800534e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005352:	e7e5      	b.n	8005320 <__d2b+0x74>
 8005354:	08005f58 	.word	0x08005f58
 8005358:	08005f69 	.word	0x08005f69

0800535c <__ssputs_r>:
 800535c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005360:	688e      	ldr	r6, [r1, #8]
 8005362:	461f      	mov	r7, r3
 8005364:	42be      	cmp	r6, r7
 8005366:	680b      	ldr	r3, [r1, #0]
 8005368:	4682      	mov	sl, r0
 800536a:	460c      	mov	r4, r1
 800536c:	4690      	mov	r8, r2
 800536e:	d82d      	bhi.n	80053cc <__ssputs_r+0x70>
 8005370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005374:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005378:	d026      	beq.n	80053c8 <__ssputs_r+0x6c>
 800537a:	6965      	ldr	r5, [r4, #20]
 800537c:	6909      	ldr	r1, [r1, #16]
 800537e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005382:	eba3 0901 	sub.w	r9, r3, r1
 8005386:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800538a:	1c7b      	adds	r3, r7, #1
 800538c:	444b      	add	r3, r9
 800538e:	106d      	asrs	r5, r5, #1
 8005390:	429d      	cmp	r5, r3
 8005392:	bf38      	it	cc
 8005394:	461d      	movcc	r5, r3
 8005396:	0553      	lsls	r3, r2, #21
 8005398:	d527      	bpl.n	80053ea <__ssputs_r+0x8e>
 800539a:	4629      	mov	r1, r5
 800539c:	f7ff fbd0 	bl	8004b40 <_malloc_r>
 80053a0:	4606      	mov	r6, r0
 80053a2:	b360      	cbz	r0, 80053fe <__ssputs_r+0xa2>
 80053a4:	6921      	ldr	r1, [r4, #16]
 80053a6:	464a      	mov	r2, r9
 80053a8:	f000 fa06 	bl	80057b8 <memcpy>
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80053b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053b6:	81a3      	strh	r3, [r4, #12]
 80053b8:	6126      	str	r6, [r4, #16]
 80053ba:	6165      	str	r5, [r4, #20]
 80053bc:	444e      	add	r6, r9
 80053be:	eba5 0509 	sub.w	r5, r5, r9
 80053c2:	6026      	str	r6, [r4, #0]
 80053c4:	60a5      	str	r5, [r4, #8]
 80053c6:	463e      	mov	r6, r7
 80053c8:	42be      	cmp	r6, r7
 80053ca:	d900      	bls.n	80053ce <__ssputs_r+0x72>
 80053cc:	463e      	mov	r6, r7
 80053ce:	6820      	ldr	r0, [r4, #0]
 80053d0:	4632      	mov	r2, r6
 80053d2:	4641      	mov	r1, r8
 80053d4:	f000 f9c6 	bl	8005764 <memmove>
 80053d8:	68a3      	ldr	r3, [r4, #8]
 80053da:	1b9b      	subs	r3, r3, r6
 80053dc:	60a3      	str	r3, [r4, #8]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	4433      	add	r3, r6
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	2000      	movs	r0, #0
 80053e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ea:	462a      	mov	r2, r5
 80053ec:	f000 fa36 	bl	800585c <_realloc_r>
 80053f0:	4606      	mov	r6, r0
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d1e0      	bne.n	80053b8 <__ssputs_r+0x5c>
 80053f6:	6921      	ldr	r1, [r4, #16]
 80053f8:	4650      	mov	r0, sl
 80053fa:	f7ff fb2d 	bl	8004a58 <_free_r>
 80053fe:	230c      	movs	r3, #12
 8005400:	f8ca 3000 	str.w	r3, [sl]
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800540a:	81a3      	strh	r3, [r4, #12]
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	e7e9      	b.n	80053e6 <__ssputs_r+0x8a>
	...

08005414 <_svfiprintf_r>:
 8005414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	4698      	mov	r8, r3
 800541a:	898b      	ldrh	r3, [r1, #12]
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	b09d      	sub	sp, #116	@ 0x74
 8005420:	4607      	mov	r7, r0
 8005422:	460d      	mov	r5, r1
 8005424:	4614      	mov	r4, r2
 8005426:	d510      	bpl.n	800544a <_svfiprintf_r+0x36>
 8005428:	690b      	ldr	r3, [r1, #16]
 800542a:	b973      	cbnz	r3, 800544a <_svfiprintf_r+0x36>
 800542c:	2140      	movs	r1, #64	@ 0x40
 800542e:	f7ff fb87 	bl	8004b40 <_malloc_r>
 8005432:	6028      	str	r0, [r5, #0]
 8005434:	6128      	str	r0, [r5, #16]
 8005436:	b930      	cbnz	r0, 8005446 <_svfiprintf_r+0x32>
 8005438:	230c      	movs	r3, #12
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	b01d      	add	sp, #116	@ 0x74
 8005442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005446:	2340      	movs	r3, #64	@ 0x40
 8005448:	616b      	str	r3, [r5, #20]
 800544a:	2300      	movs	r3, #0
 800544c:	9309      	str	r3, [sp, #36]	@ 0x24
 800544e:	2320      	movs	r3, #32
 8005450:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005454:	f8cd 800c 	str.w	r8, [sp, #12]
 8005458:	2330      	movs	r3, #48	@ 0x30
 800545a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80055f8 <_svfiprintf_r+0x1e4>
 800545e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005462:	f04f 0901 	mov.w	r9, #1
 8005466:	4623      	mov	r3, r4
 8005468:	469a      	mov	sl, r3
 800546a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800546e:	b10a      	cbz	r2, 8005474 <_svfiprintf_r+0x60>
 8005470:	2a25      	cmp	r2, #37	@ 0x25
 8005472:	d1f9      	bne.n	8005468 <_svfiprintf_r+0x54>
 8005474:	ebba 0b04 	subs.w	fp, sl, r4
 8005478:	d00b      	beq.n	8005492 <_svfiprintf_r+0x7e>
 800547a:	465b      	mov	r3, fp
 800547c:	4622      	mov	r2, r4
 800547e:	4629      	mov	r1, r5
 8005480:	4638      	mov	r0, r7
 8005482:	f7ff ff6b 	bl	800535c <__ssputs_r>
 8005486:	3001      	adds	r0, #1
 8005488:	f000 80a7 	beq.w	80055da <_svfiprintf_r+0x1c6>
 800548c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800548e:	445a      	add	r2, fp
 8005490:	9209      	str	r2, [sp, #36]	@ 0x24
 8005492:	f89a 3000 	ldrb.w	r3, [sl]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 809f 	beq.w	80055da <_svfiprintf_r+0x1c6>
 800549c:	2300      	movs	r3, #0
 800549e:	f04f 32ff 	mov.w	r2, #4294967295
 80054a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054a6:	f10a 0a01 	add.w	sl, sl, #1
 80054aa:	9304      	str	r3, [sp, #16]
 80054ac:	9307      	str	r3, [sp, #28]
 80054ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80054b4:	4654      	mov	r4, sl
 80054b6:	2205      	movs	r2, #5
 80054b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054bc:	484e      	ldr	r0, [pc, #312]	@ (80055f8 <_svfiprintf_r+0x1e4>)
 80054be:	f7fa fe87 	bl	80001d0 <memchr>
 80054c2:	9a04      	ldr	r2, [sp, #16]
 80054c4:	b9d8      	cbnz	r0, 80054fe <_svfiprintf_r+0xea>
 80054c6:	06d0      	lsls	r0, r2, #27
 80054c8:	bf44      	itt	mi
 80054ca:	2320      	movmi	r3, #32
 80054cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054d0:	0711      	lsls	r1, r2, #28
 80054d2:	bf44      	itt	mi
 80054d4:	232b      	movmi	r3, #43	@ 0x2b
 80054d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80054da:	f89a 3000 	ldrb.w	r3, [sl]
 80054de:	2b2a      	cmp	r3, #42	@ 0x2a
 80054e0:	d015      	beq.n	800550e <_svfiprintf_r+0xfa>
 80054e2:	9a07      	ldr	r2, [sp, #28]
 80054e4:	4654      	mov	r4, sl
 80054e6:	2000      	movs	r0, #0
 80054e8:	f04f 0c0a 	mov.w	ip, #10
 80054ec:	4621      	mov	r1, r4
 80054ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054f2:	3b30      	subs	r3, #48	@ 0x30
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d94b      	bls.n	8005590 <_svfiprintf_r+0x17c>
 80054f8:	b1b0      	cbz	r0, 8005528 <_svfiprintf_r+0x114>
 80054fa:	9207      	str	r2, [sp, #28]
 80054fc:	e014      	b.n	8005528 <_svfiprintf_r+0x114>
 80054fe:	eba0 0308 	sub.w	r3, r0, r8
 8005502:	fa09 f303 	lsl.w	r3, r9, r3
 8005506:	4313      	orrs	r3, r2
 8005508:	9304      	str	r3, [sp, #16]
 800550a:	46a2      	mov	sl, r4
 800550c:	e7d2      	b.n	80054b4 <_svfiprintf_r+0xa0>
 800550e:	9b03      	ldr	r3, [sp, #12]
 8005510:	1d19      	adds	r1, r3, #4
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	9103      	str	r1, [sp, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	bfbb      	ittet	lt
 800551a:	425b      	neglt	r3, r3
 800551c:	f042 0202 	orrlt.w	r2, r2, #2
 8005520:	9307      	strge	r3, [sp, #28]
 8005522:	9307      	strlt	r3, [sp, #28]
 8005524:	bfb8      	it	lt
 8005526:	9204      	strlt	r2, [sp, #16]
 8005528:	7823      	ldrb	r3, [r4, #0]
 800552a:	2b2e      	cmp	r3, #46	@ 0x2e
 800552c:	d10a      	bne.n	8005544 <_svfiprintf_r+0x130>
 800552e:	7863      	ldrb	r3, [r4, #1]
 8005530:	2b2a      	cmp	r3, #42	@ 0x2a
 8005532:	d132      	bne.n	800559a <_svfiprintf_r+0x186>
 8005534:	9b03      	ldr	r3, [sp, #12]
 8005536:	1d1a      	adds	r2, r3, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	9203      	str	r2, [sp, #12]
 800553c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005540:	3402      	adds	r4, #2
 8005542:	9305      	str	r3, [sp, #20]
 8005544:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005608 <_svfiprintf_r+0x1f4>
 8005548:	7821      	ldrb	r1, [r4, #0]
 800554a:	2203      	movs	r2, #3
 800554c:	4650      	mov	r0, sl
 800554e:	f7fa fe3f 	bl	80001d0 <memchr>
 8005552:	b138      	cbz	r0, 8005564 <_svfiprintf_r+0x150>
 8005554:	9b04      	ldr	r3, [sp, #16]
 8005556:	eba0 000a 	sub.w	r0, r0, sl
 800555a:	2240      	movs	r2, #64	@ 0x40
 800555c:	4082      	lsls	r2, r0
 800555e:	4313      	orrs	r3, r2
 8005560:	3401      	adds	r4, #1
 8005562:	9304      	str	r3, [sp, #16]
 8005564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005568:	4824      	ldr	r0, [pc, #144]	@ (80055fc <_svfiprintf_r+0x1e8>)
 800556a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800556e:	2206      	movs	r2, #6
 8005570:	f7fa fe2e 	bl	80001d0 <memchr>
 8005574:	2800      	cmp	r0, #0
 8005576:	d036      	beq.n	80055e6 <_svfiprintf_r+0x1d2>
 8005578:	4b21      	ldr	r3, [pc, #132]	@ (8005600 <_svfiprintf_r+0x1ec>)
 800557a:	bb1b      	cbnz	r3, 80055c4 <_svfiprintf_r+0x1b0>
 800557c:	9b03      	ldr	r3, [sp, #12]
 800557e:	3307      	adds	r3, #7
 8005580:	f023 0307 	bic.w	r3, r3, #7
 8005584:	3308      	adds	r3, #8
 8005586:	9303      	str	r3, [sp, #12]
 8005588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800558a:	4433      	add	r3, r6
 800558c:	9309      	str	r3, [sp, #36]	@ 0x24
 800558e:	e76a      	b.n	8005466 <_svfiprintf_r+0x52>
 8005590:	fb0c 3202 	mla	r2, ip, r2, r3
 8005594:	460c      	mov	r4, r1
 8005596:	2001      	movs	r0, #1
 8005598:	e7a8      	b.n	80054ec <_svfiprintf_r+0xd8>
 800559a:	2300      	movs	r3, #0
 800559c:	3401      	adds	r4, #1
 800559e:	9305      	str	r3, [sp, #20]
 80055a0:	4619      	mov	r1, r3
 80055a2:	f04f 0c0a 	mov.w	ip, #10
 80055a6:	4620      	mov	r0, r4
 80055a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ac:	3a30      	subs	r2, #48	@ 0x30
 80055ae:	2a09      	cmp	r2, #9
 80055b0:	d903      	bls.n	80055ba <_svfiprintf_r+0x1a6>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d0c6      	beq.n	8005544 <_svfiprintf_r+0x130>
 80055b6:	9105      	str	r1, [sp, #20]
 80055b8:	e7c4      	b.n	8005544 <_svfiprintf_r+0x130>
 80055ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80055be:	4604      	mov	r4, r0
 80055c0:	2301      	movs	r3, #1
 80055c2:	e7f0      	b.n	80055a6 <_svfiprintf_r+0x192>
 80055c4:	ab03      	add	r3, sp, #12
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	462a      	mov	r2, r5
 80055ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005604 <_svfiprintf_r+0x1f0>)
 80055cc:	a904      	add	r1, sp, #16
 80055ce:	4638      	mov	r0, r7
 80055d0:	f7fd fe96 	bl	8003300 <_printf_float>
 80055d4:	1c42      	adds	r2, r0, #1
 80055d6:	4606      	mov	r6, r0
 80055d8:	d1d6      	bne.n	8005588 <_svfiprintf_r+0x174>
 80055da:	89ab      	ldrh	r3, [r5, #12]
 80055dc:	065b      	lsls	r3, r3, #25
 80055de:	f53f af2d 	bmi.w	800543c <_svfiprintf_r+0x28>
 80055e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055e4:	e72c      	b.n	8005440 <_svfiprintf_r+0x2c>
 80055e6:	ab03      	add	r3, sp, #12
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	462a      	mov	r2, r5
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <_svfiprintf_r+0x1f0>)
 80055ee:	a904      	add	r1, sp, #16
 80055f0:	4638      	mov	r0, r7
 80055f2:	f7fe f91d 	bl	8003830 <_printf_i>
 80055f6:	e7ed      	b.n	80055d4 <_svfiprintf_r+0x1c0>
 80055f8:	080060c0 	.word	0x080060c0
 80055fc:	080060ca 	.word	0x080060ca
 8005600:	08003301 	.word	0x08003301
 8005604:	0800535d 	.word	0x0800535d
 8005608:	080060c6 	.word	0x080060c6

0800560c <__sflush_r>:
 800560c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005614:	0716      	lsls	r6, r2, #28
 8005616:	4605      	mov	r5, r0
 8005618:	460c      	mov	r4, r1
 800561a:	d454      	bmi.n	80056c6 <__sflush_r+0xba>
 800561c:	684b      	ldr	r3, [r1, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	dc02      	bgt.n	8005628 <__sflush_r+0x1c>
 8005622:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	dd48      	ble.n	80056ba <__sflush_r+0xae>
 8005628:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800562a:	2e00      	cmp	r6, #0
 800562c:	d045      	beq.n	80056ba <__sflush_r+0xae>
 800562e:	2300      	movs	r3, #0
 8005630:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005634:	682f      	ldr	r7, [r5, #0]
 8005636:	6a21      	ldr	r1, [r4, #32]
 8005638:	602b      	str	r3, [r5, #0]
 800563a:	d030      	beq.n	800569e <__sflush_r+0x92>
 800563c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	0759      	lsls	r1, r3, #29
 8005642:	d505      	bpl.n	8005650 <__sflush_r+0x44>
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	1ad2      	subs	r2, r2, r3
 8005648:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800564a:	b10b      	cbz	r3, 8005650 <__sflush_r+0x44>
 800564c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800564e:	1ad2      	subs	r2, r2, r3
 8005650:	2300      	movs	r3, #0
 8005652:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005654:	6a21      	ldr	r1, [r4, #32]
 8005656:	4628      	mov	r0, r5
 8005658:	47b0      	blx	r6
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	89a3      	ldrh	r3, [r4, #12]
 800565e:	d106      	bne.n	800566e <__sflush_r+0x62>
 8005660:	6829      	ldr	r1, [r5, #0]
 8005662:	291d      	cmp	r1, #29
 8005664:	d82b      	bhi.n	80056be <__sflush_r+0xb2>
 8005666:	4a2a      	ldr	r2, [pc, #168]	@ (8005710 <__sflush_r+0x104>)
 8005668:	410a      	asrs	r2, r1
 800566a:	07d6      	lsls	r6, r2, #31
 800566c:	d427      	bmi.n	80056be <__sflush_r+0xb2>
 800566e:	2200      	movs	r2, #0
 8005670:	6062      	str	r2, [r4, #4]
 8005672:	04d9      	lsls	r1, r3, #19
 8005674:	6922      	ldr	r2, [r4, #16]
 8005676:	6022      	str	r2, [r4, #0]
 8005678:	d504      	bpl.n	8005684 <__sflush_r+0x78>
 800567a:	1c42      	adds	r2, r0, #1
 800567c:	d101      	bne.n	8005682 <__sflush_r+0x76>
 800567e:	682b      	ldr	r3, [r5, #0]
 8005680:	b903      	cbnz	r3, 8005684 <__sflush_r+0x78>
 8005682:	6560      	str	r0, [r4, #84]	@ 0x54
 8005684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005686:	602f      	str	r7, [r5, #0]
 8005688:	b1b9      	cbz	r1, 80056ba <__sflush_r+0xae>
 800568a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800568e:	4299      	cmp	r1, r3
 8005690:	d002      	beq.n	8005698 <__sflush_r+0x8c>
 8005692:	4628      	mov	r0, r5
 8005694:	f7ff f9e0 	bl	8004a58 <_free_r>
 8005698:	2300      	movs	r3, #0
 800569a:	6363      	str	r3, [r4, #52]	@ 0x34
 800569c:	e00d      	b.n	80056ba <__sflush_r+0xae>
 800569e:	2301      	movs	r3, #1
 80056a0:	4628      	mov	r0, r5
 80056a2:	47b0      	blx	r6
 80056a4:	4602      	mov	r2, r0
 80056a6:	1c50      	adds	r0, r2, #1
 80056a8:	d1c9      	bne.n	800563e <__sflush_r+0x32>
 80056aa:	682b      	ldr	r3, [r5, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d0c6      	beq.n	800563e <__sflush_r+0x32>
 80056b0:	2b1d      	cmp	r3, #29
 80056b2:	d001      	beq.n	80056b8 <__sflush_r+0xac>
 80056b4:	2b16      	cmp	r3, #22
 80056b6:	d11e      	bne.n	80056f6 <__sflush_r+0xea>
 80056b8:	602f      	str	r7, [r5, #0]
 80056ba:	2000      	movs	r0, #0
 80056bc:	e022      	b.n	8005704 <__sflush_r+0xf8>
 80056be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056c2:	b21b      	sxth	r3, r3
 80056c4:	e01b      	b.n	80056fe <__sflush_r+0xf2>
 80056c6:	690f      	ldr	r7, [r1, #16]
 80056c8:	2f00      	cmp	r7, #0
 80056ca:	d0f6      	beq.n	80056ba <__sflush_r+0xae>
 80056cc:	0793      	lsls	r3, r2, #30
 80056ce:	680e      	ldr	r6, [r1, #0]
 80056d0:	bf08      	it	eq
 80056d2:	694b      	ldreq	r3, [r1, #20]
 80056d4:	600f      	str	r7, [r1, #0]
 80056d6:	bf18      	it	ne
 80056d8:	2300      	movne	r3, #0
 80056da:	eba6 0807 	sub.w	r8, r6, r7
 80056de:	608b      	str	r3, [r1, #8]
 80056e0:	f1b8 0f00 	cmp.w	r8, #0
 80056e4:	dde9      	ble.n	80056ba <__sflush_r+0xae>
 80056e6:	6a21      	ldr	r1, [r4, #32]
 80056e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80056ea:	4643      	mov	r3, r8
 80056ec:	463a      	mov	r2, r7
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b0      	blx	r6
 80056f2:	2800      	cmp	r0, #0
 80056f4:	dc08      	bgt.n	8005708 <__sflush_r+0xfc>
 80056f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	f04f 30ff 	mov.w	r0, #4294967295
 8005704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005708:	4407      	add	r7, r0
 800570a:	eba8 0800 	sub.w	r8, r8, r0
 800570e:	e7e7      	b.n	80056e0 <__sflush_r+0xd4>
 8005710:	dfbffffe 	.word	0xdfbffffe

08005714 <_fflush_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	690b      	ldr	r3, [r1, #16]
 8005718:	4605      	mov	r5, r0
 800571a:	460c      	mov	r4, r1
 800571c:	b913      	cbnz	r3, 8005724 <_fflush_r+0x10>
 800571e:	2500      	movs	r5, #0
 8005720:	4628      	mov	r0, r5
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	b118      	cbz	r0, 800572e <_fflush_r+0x1a>
 8005726:	6a03      	ldr	r3, [r0, #32]
 8005728:	b90b      	cbnz	r3, 800572e <_fflush_r+0x1a>
 800572a:	f7fe fa2d 	bl	8003b88 <__sinit>
 800572e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0f3      	beq.n	800571e <_fflush_r+0xa>
 8005736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005738:	07d0      	lsls	r0, r2, #31
 800573a:	d404      	bmi.n	8005746 <_fflush_r+0x32>
 800573c:	0599      	lsls	r1, r3, #22
 800573e:	d402      	bmi.n	8005746 <_fflush_r+0x32>
 8005740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005742:	f7fe fb38 	bl	8003db6 <__retarget_lock_acquire_recursive>
 8005746:	4628      	mov	r0, r5
 8005748:	4621      	mov	r1, r4
 800574a:	f7ff ff5f 	bl	800560c <__sflush_r>
 800574e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005750:	07da      	lsls	r2, r3, #31
 8005752:	4605      	mov	r5, r0
 8005754:	d4e4      	bmi.n	8005720 <_fflush_r+0xc>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	059b      	lsls	r3, r3, #22
 800575a:	d4e1      	bmi.n	8005720 <_fflush_r+0xc>
 800575c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800575e:	f7fe fb2b 	bl	8003db8 <__retarget_lock_release_recursive>
 8005762:	e7dd      	b.n	8005720 <_fflush_r+0xc>

08005764 <memmove>:
 8005764:	4288      	cmp	r0, r1
 8005766:	b510      	push	{r4, lr}
 8005768:	eb01 0402 	add.w	r4, r1, r2
 800576c:	d902      	bls.n	8005774 <memmove+0x10>
 800576e:	4284      	cmp	r4, r0
 8005770:	4623      	mov	r3, r4
 8005772:	d807      	bhi.n	8005784 <memmove+0x20>
 8005774:	1e43      	subs	r3, r0, #1
 8005776:	42a1      	cmp	r1, r4
 8005778:	d008      	beq.n	800578c <memmove+0x28>
 800577a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800577e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005782:	e7f8      	b.n	8005776 <memmove+0x12>
 8005784:	4402      	add	r2, r0
 8005786:	4601      	mov	r1, r0
 8005788:	428a      	cmp	r2, r1
 800578a:	d100      	bne.n	800578e <memmove+0x2a>
 800578c:	bd10      	pop	{r4, pc}
 800578e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005796:	e7f7      	b.n	8005788 <memmove+0x24>

08005798 <_sbrk_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4d06      	ldr	r5, [pc, #24]	@ (80057b4 <_sbrk_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4604      	mov	r4, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	602b      	str	r3, [r5, #0]
 80057a4:	f7fd fb8e 	bl	8002ec4 <_sbrk>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_sbrk_r+0x1a>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_sbrk_r+0x1a>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000454 	.word	0x20000454

080057b8 <memcpy>:
 80057b8:	440a      	add	r2, r1
 80057ba:	4291      	cmp	r1, r2
 80057bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80057c0:	d100      	bne.n	80057c4 <memcpy+0xc>
 80057c2:	4770      	bx	lr
 80057c4:	b510      	push	{r4, lr}
 80057c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ce:	4291      	cmp	r1, r2
 80057d0:	d1f9      	bne.n	80057c6 <memcpy+0xe>
 80057d2:	bd10      	pop	{r4, pc}

080057d4 <__assert_func>:
 80057d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057d6:	4614      	mov	r4, r2
 80057d8:	461a      	mov	r2, r3
 80057da:	4b09      	ldr	r3, [pc, #36]	@ (8005800 <__assert_func+0x2c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4605      	mov	r5, r0
 80057e0:	68d8      	ldr	r0, [r3, #12]
 80057e2:	b954      	cbnz	r4, 80057fa <__assert_func+0x26>
 80057e4:	4b07      	ldr	r3, [pc, #28]	@ (8005804 <__assert_func+0x30>)
 80057e6:	461c      	mov	r4, r3
 80057e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057ec:	9100      	str	r1, [sp, #0]
 80057ee:	462b      	mov	r3, r5
 80057f0:	4905      	ldr	r1, [pc, #20]	@ (8005808 <__assert_func+0x34>)
 80057f2:	f000 f86f 	bl	80058d4 <fiprintf>
 80057f6:	f000 f87f 	bl	80058f8 <abort>
 80057fa:	4b04      	ldr	r3, [pc, #16]	@ (800580c <__assert_func+0x38>)
 80057fc:	e7f4      	b.n	80057e8 <__assert_func+0x14>
 80057fe:	bf00      	nop
 8005800:	20000018 	.word	0x20000018
 8005804:	08006116 	.word	0x08006116
 8005808:	080060e8 	.word	0x080060e8
 800580c:	080060db 	.word	0x080060db

08005810 <_calloc_r>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	fba1 5402 	umull	r5, r4, r1, r2
 8005816:	b93c      	cbnz	r4, 8005828 <_calloc_r+0x18>
 8005818:	4629      	mov	r1, r5
 800581a:	f7ff f991 	bl	8004b40 <_malloc_r>
 800581e:	4606      	mov	r6, r0
 8005820:	b928      	cbnz	r0, 800582e <_calloc_r+0x1e>
 8005822:	2600      	movs	r6, #0
 8005824:	4630      	mov	r0, r6
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	220c      	movs	r2, #12
 800582a:	6002      	str	r2, [r0, #0]
 800582c:	e7f9      	b.n	8005822 <_calloc_r+0x12>
 800582e:	462a      	mov	r2, r5
 8005830:	4621      	mov	r1, r4
 8005832:	f7fe fa42 	bl	8003cba <memset>
 8005836:	e7f5      	b.n	8005824 <_calloc_r+0x14>

08005838 <__ascii_mbtowc>:
 8005838:	b082      	sub	sp, #8
 800583a:	b901      	cbnz	r1, 800583e <__ascii_mbtowc+0x6>
 800583c:	a901      	add	r1, sp, #4
 800583e:	b142      	cbz	r2, 8005852 <__ascii_mbtowc+0x1a>
 8005840:	b14b      	cbz	r3, 8005856 <__ascii_mbtowc+0x1e>
 8005842:	7813      	ldrb	r3, [r2, #0]
 8005844:	600b      	str	r3, [r1, #0]
 8005846:	7812      	ldrb	r2, [r2, #0]
 8005848:	1e10      	subs	r0, r2, #0
 800584a:	bf18      	it	ne
 800584c:	2001      	movne	r0, #1
 800584e:	b002      	add	sp, #8
 8005850:	4770      	bx	lr
 8005852:	4610      	mov	r0, r2
 8005854:	e7fb      	b.n	800584e <__ascii_mbtowc+0x16>
 8005856:	f06f 0001 	mvn.w	r0, #1
 800585a:	e7f8      	b.n	800584e <__ascii_mbtowc+0x16>

0800585c <_realloc_r>:
 800585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	4680      	mov	r8, r0
 8005862:	4615      	mov	r5, r2
 8005864:	460c      	mov	r4, r1
 8005866:	b921      	cbnz	r1, 8005872 <_realloc_r+0x16>
 8005868:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800586c:	4611      	mov	r1, r2
 800586e:	f7ff b967 	b.w	8004b40 <_malloc_r>
 8005872:	b92a      	cbnz	r2, 8005880 <_realloc_r+0x24>
 8005874:	f7ff f8f0 	bl	8004a58 <_free_r>
 8005878:	2400      	movs	r4, #0
 800587a:	4620      	mov	r0, r4
 800587c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005880:	f000 f841 	bl	8005906 <_malloc_usable_size_r>
 8005884:	4285      	cmp	r5, r0
 8005886:	4606      	mov	r6, r0
 8005888:	d802      	bhi.n	8005890 <_realloc_r+0x34>
 800588a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800588e:	d8f4      	bhi.n	800587a <_realloc_r+0x1e>
 8005890:	4629      	mov	r1, r5
 8005892:	4640      	mov	r0, r8
 8005894:	f7ff f954 	bl	8004b40 <_malloc_r>
 8005898:	4607      	mov	r7, r0
 800589a:	2800      	cmp	r0, #0
 800589c:	d0ec      	beq.n	8005878 <_realloc_r+0x1c>
 800589e:	42b5      	cmp	r5, r6
 80058a0:	462a      	mov	r2, r5
 80058a2:	4621      	mov	r1, r4
 80058a4:	bf28      	it	cs
 80058a6:	4632      	movcs	r2, r6
 80058a8:	f7ff ff86 	bl	80057b8 <memcpy>
 80058ac:	4621      	mov	r1, r4
 80058ae:	4640      	mov	r0, r8
 80058b0:	f7ff f8d2 	bl	8004a58 <_free_r>
 80058b4:	463c      	mov	r4, r7
 80058b6:	e7e0      	b.n	800587a <_realloc_r+0x1e>

080058b8 <__ascii_wctomb>:
 80058b8:	4603      	mov	r3, r0
 80058ba:	4608      	mov	r0, r1
 80058bc:	b141      	cbz	r1, 80058d0 <__ascii_wctomb+0x18>
 80058be:	2aff      	cmp	r2, #255	@ 0xff
 80058c0:	d904      	bls.n	80058cc <__ascii_wctomb+0x14>
 80058c2:	228a      	movs	r2, #138	@ 0x8a
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	f04f 30ff 	mov.w	r0, #4294967295
 80058ca:	4770      	bx	lr
 80058cc:	700a      	strb	r2, [r1, #0]
 80058ce:	2001      	movs	r0, #1
 80058d0:	4770      	bx	lr
	...

080058d4 <fiprintf>:
 80058d4:	b40e      	push	{r1, r2, r3}
 80058d6:	b503      	push	{r0, r1, lr}
 80058d8:	4601      	mov	r1, r0
 80058da:	ab03      	add	r3, sp, #12
 80058dc:	4805      	ldr	r0, [pc, #20]	@ (80058f4 <fiprintf+0x20>)
 80058de:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e2:	6800      	ldr	r0, [r0, #0]
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	f000 f83f 	bl	8005968 <_vfiprintf_r>
 80058ea:	b002      	add	sp, #8
 80058ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f0:	b003      	add	sp, #12
 80058f2:	4770      	bx	lr
 80058f4:	20000018 	.word	0x20000018

080058f8 <abort>:
 80058f8:	b508      	push	{r3, lr}
 80058fa:	2006      	movs	r0, #6
 80058fc:	f000 fa08 	bl	8005d10 <raise>
 8005900:	2001      	movs	r0, #1
 8005902:	f7fd fa67 	bl	8002dd4 <_exit>

08005906 <_malloc_usable_size_r>:
 8005906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800590a:	1f18      	subs	r0, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	bfbc      	itt	lt
 8005910:	580b      	ldrlt	r3, [r1, r0]
 8005912:	18c0      	addlt	r0, r0, r3
 8005914:	4770      	bx	lr

08005916 <__sfputc_r>:
 8005916:	6893      	ldr	r3, [r2, #8]
 8005918:	3b01      	subs	r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	b410      	push	{r4}
 800591e:	6093      	str	r3, [r2, #8]
 8005920:	da08      	bge.n	8005934 <__sfputc_r+0x1e>
 8005922:	6994      	ldr	r4, [r2, #24]
 8005924:	42a3      	cmp	r3, r4
 8005926:	db01      	blt.n	800592c <__sfputc_r+0x16>
 8005928:	290a      	cmp	r1, #10
 800592a:	d103      	bne.n	8005934 <__sfputc_r+0x1e>
 800592c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005930:	f000 b932 	b.w	8005b98 <__swbuf_r>
 8005934:	6813      	ldr	r3, [r2, #0]
 8005936:	1c58      	adds	r0, r3, #1
 8005938:	6010      	str	r0, [r2, #0]
 800593a:	7019      	strb	r1, [r3, #0]
 800593c:	4608      	mov	r0, r1
 800593e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005942:	4770      	bx	lr

08005944 <__sfputs_r>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	4606      	mov	r6, r0
 8005948:	460f      	mov	r7, r1
 800594a:	4614      	mov	r4, r2
 800594c:	18d5      	adds	r5, r2, r3
 800594e:	42ac      	cmp	r4, r5
 8005950:	d101      	bne.n	8005956 <__sfputs_r+0x12>
 8005952:	2000      	movs	r0, #0
 8005954:	e007      	b.n	8005966 <__sfputs_r+0x22>
 8005956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800595a:	463a      	mov	r2, r7
 800595c:	4630      	mov	r0, r6
 800595e:	f7ff ffda 	bl	8005916 <__sfputc_r>
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	d1f3      	bne.n	800594e <__sfputs_r+0xa>
 8005966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005968 <_vfiprintf_r>:
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	460d      	mov	r5, r1
 800596e:	b09d      	sub	sp, #116	@ 0x74
 8005970:	4614      	mov	r4, r2
 8005972:	4698      	mov	r8, r3
 8005974:	4606      	mov	r6, r0
 8005976:	b118      	cbz	r0, 8005980 <_vfiprintf_r+0x18>
 8005978:	6a03      	ldr	r3, [r0, #32]
 800597a:	b90b      	cbnz	r3, 8005980 <_vfiprintf_r+0x18>
 800597c:	f7fe f904 	bl	8003b88 <__sinit>
 8005980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005982:	07d9      	lsls	r1, r3, #31
 8005984:	d405      	bmi.n	8005992 <_vfiprintf_r+0x2a>
 8005986:	89ab      	ldrh	r3, [r5, #12]
 8005988:	059a      	lsls	r2, r3, #22
 800598a:	d402      	bmi.n	8005992 <_vfiprintf_r+0x2a>
 800598c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800598e:	f7fe fa12 	bl	8003db6 <__retarget_lock_acquire_recursive>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	071b      	lsls	r3, r3, #28
 8005996:	d501      	bpl.n	800599c <_vfiprintf_r+0x34>
 8005998:	692b      	ldr	r3, [r5, #16]
 800599a:	b99b      	cbnz	r3, 80059c4 <_vfiprintf_r+0x5c>
 800599c:	4629      	mov	r1, r5
 800599e:	4630      	mov	r0, r6
 80059a0:	f000 f938 	bl	8005c14 <__swsetup_r>
 80059a4:	b170      	cbz	r0, 80059c4 <_vfiprintf_r+0x5c>
 80059a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059a8:	07dc      	lsls	r4, r3, #31
 80059aa:	d504      	bpl.n	80059b6 <_vfiprintf_r+0x4e>
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	b01d      	add	sp, #116	@ 0x74
 80059b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b6:	89ab      	ldrh	r3, [r5, #12]
 80059b8:	0598      	lsls	r0, r3, #22
 80059ba:	d4f7      	bmi.n	80059ac <_vfiprintf_r+0x44>
 80059bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059be:	f7fe f9fb 	bl	8003db8 <__retarget_lock_release_recursive>
 80059c2:	e7f3      	b.n	80059ac <_vfiprintf_r+0x44>
 80059c4:	2300      	movs	r3, #0
 80059c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80059c8:	2320      	movs	r3, #32
 80059ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80059ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80059d2:	2330      	movs	r3, #48	@ 0x30
 80059d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005b84 <_vfiprintf_r+0x21c>
 80059d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80059dc:	f04f 0901 	mov.w	r9, #1
 80059e0:	4623      	mov	r3, r4
 80059e2:	469a      	mov	sl, r3
 80059e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059e8:	b10a      	cbz	r2, 80059ee <_vfiprintf_r+0x86>
 80059ea:	2a25      	cmp	r2, #37	@ 0x25
 80059ec:	d1f9      	bne.n	80059e2 <_vfiprintf_r+0x7a>
 80059ee:	ebba 0b04 	subs.w	fp, sl, r4
 80059f2:	d00b      	beq.n	8005a0c <_vfiprintf_r+0xa4>
 80059f4:	465b      	mov	r3, fp
 80059f6:	4622      	mov	r2, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	4630      	mov	r0, r6
 80059fc:	f7ff ffa2 	bl	8005944 <__sfputs_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	f000 80a7 	beq.w	8005b54 <_vfiprintf_r+0x1ec>
 8005a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a08:	445a      	add	r2, fp
 8005a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 809f 	beq.w	8005b54 <_vfiprintf_r+0x1ec>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a20:	f10a 0a01 	add.w	sl, sl, #1
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	9307      	str	r3, [sp, #28]
 8005a28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a2e:	4654      	mov	r4, sl
 8005a30:	2205      	movs	r2, #5
 8005a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a36:	4853      	ldr	r0, [pc, #332]	@ (8005b84 <_vfiprintf_r+0x21c>)
 8005a38:	f7fa fbca 	bl	80001d0 <memchr>
 8005a3c:	9a04      	ldr	r2, [sp, #16]
 8005a3e:	b9d8      	cbnz	r0, 8005a78 <_vfiprintf_r+0x110>
 8005a40:	06d1      	lsls	r1, r2, #27
 8005a42:	bf44      	itt	mi
 8005a44:	2320      	movmi	r3, #32
 8005a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a4a:	0713      	lsls	r3, r2, #28
 8005a4c:	bf44      	itt	mi
 8005a4e:	232b      	movmi	r3, #43	@ 0x2b
 8005a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005a54:	f89a 3000 	ldrb.w	r3, [sl]
 8005a58:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a5a:	d015      	beq.n	8005a88 <_vfiprintf_r+0x120>
 8005a5c:	9a07      	ldr	r2, [sp, #28]
 8005a5e:	4654      	mov	r4, sl
 8005a60:	2000      	movs	r0, #0
 8005a62:	f04f 0c0a 	mov.w	ip, #10
 8005a66:	4621      	mov	r1, r4
 8005a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a6c:	3b30      	subs	r3, #48	@ 0x30
 8005a6e:	2b09      	cmp	r3, #9
 8005a70:	d94b      	bls.n	8005b0a <_vfiprintf_r+0x1a2>
 8005a72:	b1b0      	cbz	r0, 8005aa2 <_vfiprintf_r+0x13a>
 8005a74:	9207      	str	r2, [sp, #28]
 8005a76:	e014      	b.n	8005aa2 <_vfiprintf_r+0x13a>
 8005a78:	eba0 0308 	sub.w	r3, r0, r8
 8005a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8005a80:	4313      	orrs	r3, r2
 8005a82:	9304      	str	r3, [sp, #16]
 8005a84:	46a2      	mov	sl, r4
 8005a86:	e7d2      	b.n	8005a2e <_vfiprintf_r+0xc6>
 8005a88:	9b03      	ldr	r3, [sp, #12]
 8005a8a:	1d19      	adds	r1, r3, #4
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	9103      	str	r1, [sp, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bfbb      	ittet	lt
 8005a94:	425b      	neglt	r3, r3
 8005a96:	f042 0202 	orrlt.w	r2, r2, #2
 8005a9a:	9307      	strge	r3, [sp, #28]
 8005a9c:	9307      	strlt	r3, [sp, #28]
 8005a9e:	bfb8      	it	lt
 8005aa0:	9204      	strlt	r2, [sp, #16]
 8005aa2:	7823      	ldrb	r3, [r4, #0]
 8005aa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005aa6:	d10a      	bne.n	8005abe <_vfiprintf_r+0x156>
 8005aa8:	7863      	ldrb	r3, [r4, #1]
 8005aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005aac:	d132      	bne.n	8005b14 <_vfiprintf_r+0x1ac>
 8005aae:	9b03      	ldr	r3, [sp, #12]
 8005ab0:	1d1a      	adds	r2, r3, #4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	9203      	str	r2, [sp, #12]
 8005ab6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005aba:	3402      	adds	r4, #2
 8005abc:	9305      	str	r3, [sp, #20]
 8005abe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005b94 <_vfiprintf_r+0x22c>
 8005ac2:	7821      	ldrb	r1, [r4, #0]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	f7fa fb82 	bl	80001d0 <memchr>
 8005acc:	b138      	cbz	r0, 8005ade <_vfiprintf_r+0x176>
 8005ace:	9b04      	ldr	r3, [sp, #16]
 8005ad0:	eba0 000a 	sub.w	r0, r0, sl
 8005ad4:	2240      	movs	r2, #64	@ 0x40
 8005ad6:	4082      	lsls	r2, r0
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	3401      	adds	r4, #1
 8005adc:	9304      	str	r3, [sp, #16]
 8005ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ae2:	4829      	ldr	r0, [pc, #164]	@ (8005b88 <_vfiprintf_r+0x220>)
 8005ae4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ae8:	2206      	movs	r2, #6
 8005aea:	f7fa fb71 	bl	80001d0 <memchr>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d03f      	beq.n	8005b72 <_vfiprintf_r+0x20a>
 8005af2:	4b26      	ldr	r3, [pc, #152]	@ (8005b8c <_vfiprintf_r+0x224>)
 8005af4:	bb1b      	cbnz	r3, 8005b3e <_vfiprintf_r+0x1d6>
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	3307      	adds	r3, #7
 8005afa:	f023 0307 	bic.w	r3, r3, #7
 8005afe:	3308      	adds	r3, #8
 8005b00:	9303      	str	r3, [sp, #12]
 8005b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b04:	443b      	add	r3, r7
 8005b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b08:	e76a      	b.n	80059e0 <_vfiprintf_r+0x78>
 8005b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b0e:	460c      	mov	r4, r1
 8005b10:	2001      	movs	r0, #1
 8005b12:	e7a8      	b.n	8005a66 <_vfiprintf_r+0xfe>
 8005b14:	2300      	movs	r3, #0
 8005b16:	3401      	adds	r4, #1
 8005b18:	9305      	str	r3, [sp, #20]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	f04f 0c0a 	mov.w	ip, #10
 8005b20:	4620      	mov	r0, r4
 8005b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b26:	3a30      	subs	r2, #48	@ 0x30
 8005b28:	2a09      	cmp	r2, #9
 8005b2a:	d903      	bls.n	8005b34 <_vfiprintf_r+0x1cc>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0c6      	beq.n	8005abe <_vfiprintf_r+0x156>
 8005b30:	9105      	str	r1, [sp, #20]
 8005b32:	e7c4      	b.n	8005abe <_vfiprintf_r+0x156>
 8005b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b38:	4604      	mov	r4, r0
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e7f0      	b.n	8005b20 <_vfiprintf_r+0x1b8>
 8005b3e:	ab03      	add	r3, sp, #12
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	462a      	mov	r2, r5
 8005b44:	4b12      	ldr	r3, [pc, #72]	@ (8005b90 <_vfiprintf_r+0x228>)
 8005b46:	a904      	add	r1, sp, #16
 8005b48:	4630      	mov	r0, r6
 8005b4a:	f7fd fbd9 	bl	8003300 <_printf_float>
 8005b4e:	4607      	mov	r7, r0
 8005b50:	1c78      	adds	r0, r7, #1
 8005b52:	d1d6      	bne.n	8005b02 <_vfiprintf_r+0x19a>
 8005b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b56:	07d9      	lsls	r1, r3, #31
 8005b58:	d405      	bmi.n	8005b66 <_vfiprintf_r+0x1fe>
 8005b5a:	89ab      	ldrh	r3, [r5, #12]
 8005b5c:	059a      	lsls	r2, r3, #22
 8005b5e:	d402      	bmi.n	8005b66 <_vfiprintf_r+0x1fe>
 8005b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b62:	f7fe f929 	bl	8003db8 <__retarget_lock_release_recursive>
 8005b66:	89ab      	ldrh	r3, [r5, #12]
 8005b68:	065b      	lsls	r3, r3, #25
 8005b6a:	f53f af1f 	bmi.w	80059ac <_vfiprintf_r+0x44>
 8005b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b70:	e71e      	b.n	80059b0 <_vfiprintf_r+0x48>
 8005b72:	ab03      	add	r3, sp, #12
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	462a      	mov	r2, r5
 8005b78:	4b05      	ldr	r3, [pc, #20]	@ (8005b90 <_vfiprintf_r+0x228>)
 8005b7a:	a904      	add	r1, sp, #16
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f7fd fe57 	bl	8003830 <_printf_i>
 8005b82:	e7e4      	b.n	8005b4e <_vfiprintf_r+0x1e6>
 8005b84:	080060c0 	.word	0x080060c0
 8005b88:	080060ca 	.word	0x080060ca
 8005b8c:	08003301 	.word	0x08003301
 8005b90:	08005945 	.word	0x08005945
 8005b94:	080060c6 	.word	0x080060c6

08005b98 <__swbuf_r>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	460e      	mov	r6, r1
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	b118      	cbz	r0, 8005baa <__swbuf_r+0x12>
 8005ba2:	6a03      	ldr	r3, [r0, #32]
 8005ba4:	b90b      	cbnz	r3, 8005baa <__swbuf_r+0x12>
 8005ba6:	f7fd ffef 	bl	8003b88 <__sinit>
 8005baa:	69a3      	ldr	r3, [r4, #24]
 8005bac:	60a3      	str	r3, [r4, #8]
 8005bae:	89a3      	ldrh	r3, [r4, #12]
 8005bb0:	071a      	lsls	r2, r3, #28
 8005bb2:	d501      	bpl.n	8005bb8 <__swbuf_r+0x20>
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	b943      	cbnz	r3, 8005bca <__swbuf_r+0x32>
 8005bb8:	4621      	mov	r1, r4
 8005bba:	4628      	mov	r0, r5
 8005bbc:	f000 f82a 	bl	8005c14 <__swsetup_r>
 8005bc0:	b118      	cbz	r0, 8005bca <__swbuf_r+0x32>
 8005bc2:	f04f 37ff 	mov.w	r7, #4294967295
 8005bc6:	4638      	mov	r0, r7
 8005bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	6922      	ldr	r2, [r4, #16]
 8005bce:	1a98      	subs	r0, r3, r2
 8005bd0:	6963      	ldr	r3, [r4, #20]
 8005bd2:	b2f6      	uxtb	r6, r6
 8005bd4:	4283      	cmp	r3, r0
 8005bd6:	4637      	mov	r7, r6
 8005bd8:	dc05      	bgt.n	8005be6 <__swbuf_r+0x4e>
 8005bda:	4621      	mov	r1, r4
 8005bdc:	4628      	mov	r0, r5
 8005bde:	f7ff fd99 	bl	8005714 <_fflush_r>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d1ed      	bne.n	8005bc2 <__swbuf_r+0x2a>
 8005be6:	68a3      	ldr	r3, [r4, #8]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	60a3      	str	r3, [r4, #8]
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	6022      	str	r2, [r4, #0]
 8005bf2:	701e      	strb	r6, [r3, #0]
 8005bf4:	6962      	ldr	r2, [r4, #20]
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d004      	beq.n	8005c06 <__swbuf_r+0x6e>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	07db      	lsls	r3, r3, #31
 8005c00:	d5e1      	bpl.n	8005bc6 <__swbuf_r+0x2e>
 8005c02:	2e0a      	cmp	r6, #10
 8005c04:	d1df      	bne.n	8005bc6 <__swbuf_r+0x2e>
 8005c06:	4621      	mov	r1, r4
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f7ff fd83 	bl	8005714 <_fflush_r>
 8005c0e:	2800      	cmp	r0, #0
 8005c10:	d0d9      	beq.n	8005bc6 <__swbuf_r+0x2e>
 8005c12:	e7d6      	b.n	8005bc2 <__swbuf_r+0x2a>

08005c14 <__swsetup_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4b29      	ldr	r3, [pc, #164]	@ (8005cbc <__swsetup_r+0xa8>)
 8005c18:	4605      	mov	r5, r0
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	b118      	cbz	r0, 8005c28 <__swsetup_r+0x14>
 8005c20:	6a03      	ldr	r3, [r0, #32]
 8005c22:	b90b      	cbnz	r3, 8005c28 <__swsetup_r+0x14>
 8005c24:	f7fd ffb0 	bl	8003b88 <__sinit>
 8005c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c2c:	0719      	lsls	r1, r3, #28
 8005c2e:	d422      	bmi.n	8005c76 <__swsetup_r+0x62>
 8005c30:	06da      	lsls	r2, r3, #27
 8005c32:	d407      	bmi.n	8005c44 <__swsetup_r+0x30>
 8005c34:	2209      	movs	r2, #9
 8005c36:	602a      	str	r2, [r5, #0]
 8005c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	e033      	b.n	8005cac <__swsetup_r+0x98>
 8005c44:	0758      	lsls	r0, r3, #29
 8005c46:	d512      	bpl.n	8005c6e <__swsetup_r+0x5a>
 8005c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c4a:	b141      	cbz	r1, 8005c5e <__swsetup_r+0x4a>
 8005c4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c50:	4299      	cmp	r1, r3
 8005c52:	d002      	beq.n	8005c5a <__swsetup_r+0x46>
 8005c54:	4628      	mov	r0, r5
 8005c56:	f7fe feff 	bl	8004a58 <_free_r>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	2300      	movs	r3, #0
 8005c68:	6063      	str	r3, [r4, #4]
 8005c6a:	6923      	ldr	r3, [r4, #16]
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	f043 0308 	orr.w	r3, r3, #8
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	b94b      	cbnz	r3, 8005c8e <__swsetup_r+0x7a>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005c80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c84:	d003      	beq.n	8005c8e <__swsetup_r+0x7a>
 8005c86:	4621      	mov	r1, r4
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f883 	bl	8005d94 <__smakebuf_r>
 8005c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c92:	f013 0201 	ands.w	r2, r3, #1
 8005c96:	d00a      	beq.n	8005cae <__swsetup_r+0x9a>
 8005c98:	2200      	movs	r2, #0
 8005c9a:	60a2      	str	r2, [r4, #8]
 8005c9c:	6962      	ldr	r2, [r4, #20]
 8005c9e:	4252      	negs	r2, r2
 8005ca0:	61a2      	str	r2, [r4, #24]
 8005ca2:	6922      	ldr	r2, [r4, #16]
 8005ca4:	b942      	cbnz	r2, 8005cb8 <__swsetup_r+0xa4>
 8005ca6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005caa:	d1c5      	bne.n	8005c38 <__swsetup_r+0x24>
 8005cac:	bd38      	pop	{r3, r4, r5, pc}
 8005cae:	0799      	lsls	r1, r3, #30
 8005cb0:	bf58      	it	pl
 8005cb2:	6962      	ldrpl	r2, [r4, #20]
 8005cb4:	60a2      	str	r2, [r4, #8]
 8005cb6:	e7f4      	b.n	8005ca2 <__swsetup_r+0x8e>
 8005cb8:	2000      	movs	r0, #0
 8005cba:	e7f7      	b.n	8005cac <__swsetup_r+0x98>
 8005cbc:	20000018 	.word	0x20000018

08005cc0 <_raise_r>:
 8005cc0:	291f      	cmp	r1, #31
 8005cc2:	b538      	push	{r3, r4, r5, lr}
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	d904      	bls.n	8005cd4 <_raise_r+0x14>
 8005cca:	2316      	movs	r3, #22
 8005ccc:	6003      	str	r3, [r0, #0]
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd2:	bd38      	pop	{r3, r4, r5, pc}
 8005cd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005cd6:	b112      	cbz	r2, 8005cde <_raise_r+0x1e>
 8005cd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cdc:	b94b      	cbnz	r3, 8005cf2 <_raise_r+0x32>
 8005cde:	4628      	mov	r0, r5
 8005ce0:	f000 f830 	bl	8005d44 <_getpid_r>
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	4628      	mov	r0, r5
 8005cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cee:	f000 b817 	b.w	8005d20 <_kill_r>
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d00a      	beq.n	8005d0c <_raise_r+0x4c>
 8005cf6:	1c59      	adds	r1, r3, #1
 8005cf8:	d103      	bne.n	8005d02 <_raise_r+0x42>
 8005cfa:	2316      	movs	r3, #22
 8005cfc:	6003      	str	r3, [r0, #0]
 8005cfe:	2001      	movs	r0, #1
 8005d00:	e7e7      	b.n	8005cd2 <_raise_r+0x12>
 8005d02:	2100      	movs	r1, #0
 8005d04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005d08:	4620      	mov	r0, r4
 8005d0a:	4798      	blx	r3
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e7e0      	b.n	8005cd2 <_raise_r+0x12>

08005d10 <raise>:
 8005d10:	4b02      	ldr	r3, [pc, #8]	@ (8005d1c <raise+0xc>)
 8005d12:	4601      	mov	r1, r0
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	f7ff bfd3 	b.w	8005cc0 <_raise_r>
 8005d1a:	bf00      	nop
 8005d1c:	20000018 	.word	0x20000018

08005d20 <_kill_r>:
 8005d20:	b538      	push	{r3, r4, r5, lr}
 8005d22:	4d07      	ldr	r5, [pc, #28]	@ (8005d40 <_kill_r+0x20>)
 8005d24:	2300      	movs	r3, #0
 8005d26:	4604      	mov	r4, r0
 8005d28:	4608      	mov	r0, r1
 8005d2a:	4611      	mov	r1, r2
 8005d2c:	602b      	str	r3, [r5, #0]
 8005d2e:	f7fd f841 	bl	8002db4 <_kill>
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	d102      	bne.n	8005d3c <_kill_r+0x1c>
 8005d36:	682b      	ldr	r3, [r5, #0]
 8005d38:	b103      	cbz	r3, 8005d3c <_kill_r+0x1c>
 8005d3a:	6023      	str	r3, [r4, #0]
 8005d3c:	bd38      	pop	{r3, r4, r5, pc}
 8005d3e:	bf00      	nop
 8005d40:	20000454 	.word	0x20000454

08005d44 <_getpid_r>:
 8005d44:	f7fd b82e 	b.w	8002da4 <_getpid>

08005d48 <__swhatbuf_r>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d50:	2900      	cmp	r1, #0
 8005d52:	b096      	sub	sp, #88	@ 0x58
 8005d54:	4615      	mov	r5, r2
 8005d56:	461e      	mov	r6, r3
 8005d58:	da0d      	bge.n	8005d76 <__swhatbuf_r+0x2e>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d60:	f04f 0100 	mov.w	r1, #0
 8005d64:	bf14      	ite	ne
 8005d66:	2340      	movne	r3, #64	@ 0x40
 8005d68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	6031      	str	r1, [r6, #0]
 8005d70:	602b      	str	r3, [r5, #0]
 8005d72:	b016      	add	sp, #88	@ 0x58
 8005d74:	bd70      	pop	{r4, r5, r6, pc}
 8005d76:	466a      	mov	r2, sp
 8005d78:	f000 f848 	bl	8005e0c <_fstat_r>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	dbec      	blt.n	8005d5a <__swhatbuf_r+0x12>
 8005d80:	9901      	ldr	r1, [sp, #4]
 8005d82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d8a:	4259      	negs	r1, r3
 8005d8c:	4159      	adcs	r1, r3
 8005d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d92:	e7eb      	b.n	8005d6c <__swhatbuf_r+0x24>

08005d94 <__smakebuf_r>:
 8005d94:	898b      	ldrh	r3, [r1, #12]
 8005d96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d98:	079d      	lsls	r5, r3, #30
 8005d9a:	4606      	mov	r6, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	d507      	bpl.n	8005db0 <__smakebuf_r+0x1c>
 8005da0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	2301      	movs	r3, #1
 8005daa:	6163      	str	r3, [r4, #20]
 8005dac:	b003      	add	sp, #12
 8005dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005db0:	ab01      	add	r3, sp, #4
 8005db2:	466a      	mov	r2, sp
 8005db4:	f7ff ffc8 	bl	8005d48 <__swhatbuf_r>
 8005db8:	9f00      	ldr	r7, [sp, #0]
 8005dba:	4605      	mov	r5, r0
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f7fe febe 	bl	8004b40 <_malloc_r>
 8005dc4:	b948      	cbnz	r0, 8005dda <__smakebuf_r+0x46>
 8005dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dca:	059a      	lsls	r2, r3, #22
 8005dcc:	d4ee      	bmi.n	8005dac <__smakebuf_r+0x18>
 8005dce:	f023 0303 	bic.w	r3, r3, #3
 8005dd2:	f043 0302 	orr.w	r3, r3, #2
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	e7e2      	b.n	8005da0 <__smakebuf_r+0xc>
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	6020      	str	r0, [r4, #0]
 8005dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de2:	81a3      	strh	r3, [r4, #12]
 8005de4:	9b01      	ldr	r3, [sp, #4]
 8005de6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005dea:	b15b      	cbz	r3, 8005e04 <__smakebuf_r+0x70>
 8005dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005df0:	4630      	mov	r0, r6
 8005df2:	f000 f81d 	bl	8005e30 <_isatty_r>
 8005df6:	b128      	cbz	r0, 8005e04 <__smakebuf_r+0x70>
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	f023 0303 	bic.w	r3, r3, #3
 8005dfe:	f043 0301 	orr.w	r3, r3, #1
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	89a3      	ldrh	r3, [r4, #12]
 8005e06:	431d      	orrs	r5, r3
 8005e08:	81a5      	strh	r5, [r4, #12]
 8005e0a:	e7cf      	b.n	8005dac <__smakebuf_r+0x18>

08005e0c <_fstat_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	@ (8005e2c <_fstat_r+0x20>)
 8005e10:	2300      	movs	r3, #0
 8005e12:	4604      	mov	r4, r0
 8005e14:	4608      	mov	r0, r1
 8005e16:	4611      	mov	r1, r2
 8005e18:	602b      	str	r3, [r5, #0]
 8005e1a:	f7fd f82b 	bl	8002e74 <_fstat>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	d102      	bne.n	8005e28 <_fstat_r+0x1c>
 8005e22:	682b      	ldr	r3, [r5, #0]
 8005e24:	b103      	cbz	r3, 8005e28 <_fstat_r+0x1c>
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	bd38      	pop	{r3, r4, r5, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000454 	.word	0x20000454

08005e30 <_isatty_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d06      	ldr	r5, [pc, #24]	@ (8005e4c <_isatty_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	f7fd f82a 	bl	8002e94 <_isatty>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_isatty_r+0x1a>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_isatty_r+0x1a>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	20000454 	.word	0x20000454

08005e50 <_init>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr

08005e5c <_fini>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	bf00      	nop
 8005e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e62:	bc08      	pop	{r3}
 8005e64:	469e      	mov	lr, r3
 8005e66:	4770      	bx	lr
